-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_M_real_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    x_M_real_ce0 : OUT STD_LOGIC;
    x_M_real_we0 : OUT STD_LOGIC;
    x_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    x_M_imag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    x_M_imag_ce0 : OUT STD_LOGIC;
    x_M_imag_we0 : OUT STD_LOGIC;
    x_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    x_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_C01921FB5444261E : STD_LOGIC_VECTOR (63 downto 0) := "1100000000011001001000011111101101010100010001000010011000011110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal X_R_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal X_I_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_490 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln141_fu_370_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln141_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln140_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln152_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln152_reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln151_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_520 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_329_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_526 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_531 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal numBF_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e_reg_541 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_cast_fu_410_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_8_cast_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal j_fu_419_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_reg_554 : STD_LOGIC_VECTOR (9 downto 0);
    signal stage_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln159_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sin_or_cos_float_s_fu_258_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal c_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_258_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_258_ap_done : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_274_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_274_ap_done : STD_LOGIC;
    signal ap_block_state48_on_subcall_done : BOOLEAN;
    signal grp_sin_or_cos_float_s_fu_274_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal s_reg_570 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_addr_2_reg_584 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal icmp_ln165_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_I_addr_2_reg_589 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_addr_3_reg_594 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_addr_3_reg_599 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_9_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_9_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_624 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal tmp_24_reg_634 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_7_fu_475_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_7_reg_642 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal zext_ln179_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_647 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln178_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_R_ce0 : STD_LOGIC;
    signal X_R_we0 : STD_LOGIC;
    signal X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_R_ce1 : STD_LOGIC;
    signal X_R_we1 : STD_LOGIC;
    signal X_R_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_I_ce0 : STD_LOGIC;
    signal X_I_we0 : STD_LOGIC;
    signal X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_I_ce1 : STD_LOGIC;
    signal X_I_we1 : STD_LOGIC;
    signal X_I_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_float_s_fu_258_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_258_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_258_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_274_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_274_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_float_s_fu_274_do_cos : STD_LOGIC;
    signal grp_bit_reverse_fu_290_ap_start : STD_LOGIC;
    signal grp_bit_reverse_fu_290_ap_done : STD_LOGIC;
    signal grp_bit_reverse_fu_290_ap_idle : STD_LOGIC;
    signal grp_bit_reverse_fu_290_ap_ready : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_290_X_R_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_R_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_290_X_R_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_290_X_R_ce1 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_R_we1 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_R_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_290_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_290_X_I_ce0 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_I_we0 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_bit_reverse_fu_290_X_I_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_bit_reverse_fu_290_X_I_ce1 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_I_we1 : STD_LOGIC;
    signal grp_bit_reverse_fu_290_X_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_192 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal stage_0_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_8_reg_215 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_x_assign_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal i2_0_reg_247 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_258_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_sin_or_cos_float_s_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal grp_bit_reverse_fu_290_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln167_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln169_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal grp_fu_301_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln151_fu_376_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal DFTpts_fu_386_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_44_fu_431_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal i_lower_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_296_ce : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal grp_fu_301_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);

    component sin_or_cos_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component bit_reverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce1 : OUT STD_LOGIC;
        X_R_we1 : OUT STD_LOGIC;
        X_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce1 : OUT STD_LOGIC;
        X_I_we1 : OUT STD_LOGIC;
        X_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_faddfsub_32ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fptrunc_64nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_ddiv_64ns_6lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component music_sitodp_32nsmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fft_X_R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    X_R_U : component fft_X_R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_R_address0,
        ce0 => X_R_ce0,
        we0 => X_R_we0,
        d0 => X_R_d0,
        q0 => X_R_q0,
        address1 => grp_bit_reverse_fu_290_X_R_address1,
        ce1 => X_R_ce1,
        we1 => X_R_we1,
        d1 => grp_bit_reverse_fu_290_X_R_d1,
        q1 => X_R_q1);

    X_I_U : component fft_X_R
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_I_address0,
        ce0 => X_I_ce0,
        we0 => X_I_we0,
        d0 => X_I_d0,
        q0 => X_I_q0,
        address1 => grp_bit_reverse_fu_290_X_I_address1,
        ce1 => X_I_ce1,
        we1 => X_I_we1,
        d1 => grp_bit_reverse_fu_290_X_I_d1,
        q1 => X_I_q1);

    grp_sin_or_cos_float_s_fu_258 : component sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_s_fu_258_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_258_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_258_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_258_ap_ready,
        t_in => p_x_assign_reg_226,
        do_cos => grp_sin_or_cos_float_s_fu_258_do_cos,
        ap_return => grp_sin_or_cos_float_s_fu_258_ap_return);

    grp_sin_or_cos_float_s_fu_274 : component sin_or_cos_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_float_s_fu_274_ap_start,
        ap_done => grp_sin_or_cos_float_s_fu_274_ap_done,
        ap_idle => grp_sin_or_cos_float_s_fu_274_ap_idle,
        ap_ready => grp_sin_or_cos_float_s_fu_274_ap_ready,
        t_in => p_x_assign_reg_226,
        do_cos => grp_sin_or_cos_float_s_fu_274_do_cos,
        ap_return => grp_sin_or_cos_float_s_fu_274_ap_return);

    grp_bit_reverse_fu_290 : component bit_reverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bit_reverse_fu_290_ap_start,
        ap_done => grp_bit_reverse_fu_290_ap_done,
        ap_idle => grp_bit_reverse_fu_290_ap_idle,
        ap_ready => grp_bit_reverse_fu_290_ap_ready,
        X_R_address0 => grp_bit_reverse_fu_290_X_R_address0,
        X_R_ce0 => grp_bit_reverse_fu_290_X_R_ce0,
        X_R_we0 => grp_bit_reverse_fu_290_X_R_we0,
        X_R_d0 => grp_bit_reverse_fu_290_X_R_d0,
        X_R_q0 => X_R_q0,
        X_R_address1 => grp_bit_reverse_fu_290_X_R_address1,
        X_R_ce1 => grp_bit_reverse_fu_290_X_R_ce1,
        X_R_we1 => grp_bit_reverse_fu_290_X_R_we1,
        X_R_d1 => grp_bit_reverse_fu_290_X_R_d1,
        X_R_q1 => X_R_q1,
        X_I_address0 => grp_bit_reverse_fu_290_X_I_address0,
        X_I_ce0 => grp_bit_reverse_fu_290_X_I_ce0,
        X_I_we0 => grp_bit_reverse_fu_290_X_I_we0,
        X_I_d0 => grp_bit_reverse_fu_290_X_I_d0,
        X_I_q0 => X_I_q0,
        X_I_address1 => grp_bit_reverse_fu_290_X_I_address1,
        X_I_ce1 => grp_bit_reverse_fu_290_X_I_ce1,
        X_I_we1 => grp_bit_reverse_fu_290_X_I_we1,
        X_I_d1 => grp_bit_reverse_fu_290_X_I_d1,
        X_I_q1 => X_I_q1);

    music_faddfsub_32ibs_U23 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        opcode => grp_fu_296_opcode,
        ce => grp_fu_296_ce,
        dout => grp_fu_296_p2);

    music_faddfsub_32ibs_U24 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_301_p0,
        din1 => grp_fu_301_p1,
        opcode => grp_fu_301_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_301_p2);

    music_fmul_32ns_3jbC_U25 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_332,
        din1 => c_reg_564,
        ce => ap_const_logic_1,
        dout => grp_fu_305_p2);

    music_fmul_32ns_3jbC_U26 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_339,
        din1 => s_reg_570,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    music_fmul_32ns_3jbC_U27 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_339,
        din1 => c_reg_564,
        ce => ap_const_logic_1,
        dout => grp_fu_313_p2);

    music_fmul_32ns_3jbC_U28 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_332,
        din1 => s_reg_570,
        ce => ap_const_logic_1,
        dout => grp_fu_317_p2);

    music_fptrunc_64nkbM_U29 : component music_fptrunc_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_531,
        ce => ap_const_logic_1,
        dout => grp_fu_321_p1);

    music_ddiv_64ns_6lbW_U30 : component music_ddiv_64ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_C01921FB5444261E,
        din1 => tmp_reg_526,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);

    music_sitodp_32nsmb6_U31 : component music_sitodp_32nsmb6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_329_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_bit_reverse_fu_290_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bit_reverse_fu_290_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln140_fu_358_p2 = ap_const_lv1_1))) then 
                    grp_bit_reverse_fu_290_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bit_reverse_fu_290_ap_ready = ap_const_logic_1)) then 
                    grp_bit_reverse_fu_290_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_258_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_s_fu_258_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    grp_sin_or_cos_float_s_fu_258_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_258_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_258_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_float_s_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_float_s_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                    grp_sin_or_cos_float_s_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_float_s_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_float_s_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i1_0_reg_192 <= i_reg_490;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_0_reg_192 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    i2_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln151_fu_380_p2 = ap_const_lv1_1))) then 
                i2_0_reg_247 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                i2_0_reg_247 <= i_7_reg_642;
            end if; 
        end if;
    end process;

    i_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                i_0_reg_238 <= i_9_reg_604;
            elsif (((ap_const_boolean_0 = ap_block_state48_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_0_reg_238 <= i_8_cast_reg_546;
            end if; 
        end if;
    end process;

    i_8_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln165_fu_441_p2 = ap_const_lv1_0))) then 
                i_8_reg_215 <= j_reg_554;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                i_8_reg_215 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    p_x_assign_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln165_fu_441_p2 = ap_const_lv1_0))) then 
                p_x_assign_reg_226 <= a_reg_576;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                p_x_assign_reg_226 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    stage_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln159_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                stage_0_reg_203 <= stage_fu_425_p2;
            elsif (((grp_bit_reverse_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                stage_0_reg_203 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln165_fu_441_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                X_I_addr_2_reg_589 <= sext_ln167_fu_452_p1(10 - 1 downto 0);
                X_I_addr_3_reg_599 <= sext_ln169_fu_458_p1(10 - 1 downto 0);
                X_R_addr_2_reg_584 <= sext_ln167_fu_452_p1(10 - 1 downto 0);
                X_R_addr_3_reg_594 <= sext_ln169_fu_458_p1(10 - 1 downto 0);
                i_9_reg_604 <= i_9_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state48_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                a_reg_576 <= grp_fu_296_p2;
                c_reg_564 <= grp_sin_or_cos_float_s_fu_258_ap_return;
                s_reg_570 <= grp_sin_or_cos_float_s_fu_274_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                e_reg_541 <= grp_fu_321_p1;
                    numBF_reg_536(9 downto 0) <= numBF_fu_407_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                i_7_reg_642 <= i_7_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                    i_8_cast_reg_546(9 downto 0) <= i_8_cast_fu_410_p1(9 downto 0);
                j_reg_554 <= j_fu_419_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_490 <= i_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state50))) then
                reg_332 <= X_R_q0;
                reg_339 <= X_I_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state59))) then
                reg_346 <= grp_fu_296_p2;
                reg_352 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                tmp_19_reg_609 <= grp_fu_305_p2;
                tmp_20_reg_614 <= grp_fu_309_p2;
                tmp_21_reg_619 <= grp_fu_313_p2;
                tmp_22_reg_624 <= grp_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                tmp_23_reg_629 <= grp_fu_296_p2;
                tmp_24_reg_634 <= grp_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_reg_526 <= grp_fu_329_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                tmp_s_reg_531 <= grp_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln151_fu_380_p2 = ap_const_lv1_0))) then
                trunc_ln_reg_520 <= DFTpts_fu_386_p2(10 downto 1);
                    zext_ln152_reg_514(10 downto 0) <= zext_ln152_fu_392_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln140_fu_358_p2 = ap_const_lv1_0))) then
                    zext_ln141_reg_495(10 downto 0) <= zext_ln141_fu_370_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (icmp_ln178_fu_469_p2 = ap_const_lv1_0))) then
                    zext_ln179_reg_647(10 downto 0) <= zext_ln179_fu_481_p1(10 downto 0);
            end if;
        end if;
    end process;
    zext_ln141_reg_495(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln152_reg_514(31 downto 11) <= "000000000000000000000";
    numBF_reg_536(31 downto 10) <= "0000000000000000000000";
    i_8_cast_reg_546(31 downto 10) <= "0000000000000000000000";
    zext_ln179_reg_647(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln140_fu_358_p2, ap_CS_fsm_state5, icmp_ln151_fu_380_p2, ap_CS_fsm_state44, icmp_ln159_fu_414_p2, ap_CS_fsm_state48, ap_block_state48_on_subcall_done, ap_CS_fsm_state49, icmp_ln165_fu_441_p2, ap_CS_fsm_state74, icmp_ln178_fu_469_p2, grp_bit_reverse_fu_290_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln140_fu_358_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((grp_bit_reverse_fu_290_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln151_fu_380_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln159_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_boolean_0 = ap_block_state48_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state49) and (icmp_ln165_fu_441_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state74 => 
                if (((icmp_ln178_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    DFTpts_fu_386_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & zext_ln151_fu_376_p1(11-1 downto 0)))));

    X_I_address0_assign_proc : process(zext_ln141_reg_495, ap_CS_fsm_state49, X_I_addr_2_reg_589, X_I_addr_3_reg_599, ap_CS_fsm_state74, zext_ln179_fu_481_p1, grp_bit_reverse_fu_290_X_I_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, sext_ln167_fu_452_p1, ap_CS_fsm_state58, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            X_I_address0 <= zext_ln179_fu_481_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_I_address0 <= X_I_addr_2_reg_589;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            X_I_address0 <= X_I_addr_3_reg_599;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            X_I_address0 <= sext_ln167_fu_452_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_I_address0 <= zext_ln141_reg_495(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_address0 <= grp_bit_reverse_fu_290_X_I_address0;
        else 
            X_I_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_ce0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state74, grp_bit_reverse_fu_290_X_I_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, ap_CS_fsm_state58, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            X_I_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_ce0 <= grp_bit_reverse_fu_290_X_I_ce0;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_ce1_assign_proc : process(grp_bit_reverse_fu_290_X_I_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_ce1 <= grp_bit_reverse_fu_290_X_I_ce1;
        else 
            X_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_d0_assign_proc : process(x_M_imag_q0, reg_352, tmp_24_reg_634, grp_bit_reverse_fu_290_X_I_d0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            X_I_d0 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_I_d0 <= tmp_24_reg_634;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_I_d0 <= x_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_d0 <= grp_bit_reverse_fu_290_X_I_d0;
        else 
            X_I_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_we0_assign_proc : process(grp_bit_reverse_fu_290_X_I_we0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            X_I_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_we0 <= grp_bit_reverse_fu_290_X_I_we0;
        else 
            X_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_we1_assign_proc : process(grp_bit_reverse_fu_290_X_I_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_I_we1 <= grp_bit_reverse_fu_290_X_I_we1;
        else 
            X_I_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_address0_assign_proc : process(zext_ln141_reg_495, X_R_addr_2_reg_584, ap_CS_fsm_state49, X_R_addr_3_reg_594, ap_CS_fsm_state74, zext_ln179_fu_481_p1, grp_bit_reverse_fu_290_X_R_address0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, sext_ln167_fu_452_p1, ap_CS_fsm_state58, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            X_R_address0 <= zext_ln179_fu_481_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_R_address0 <= X_R_addr_2_reg_584;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            X_R_address0 <= X_R_addr_3_reg_594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            X_R_address0 <= sext_ln167_fu_452_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_R_address0 <= zext_ln141_reg_495(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_address0 <= grp_bit_reverse_fu_290_X_R_address0;
        else 
            X_R_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_ce0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state74, grp_bit_reverse_fu_290_X_R_ce0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, ap_CS_fsm_state58, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            X_R_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_ce0 <= grp_bit_reverse_fu_290_X_R_ce0;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_ce1_assign_proc : process(grp_bit_reverse_fu_290_X_R_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_ce1 <= grp_bit_reverse_fu_290_X_R_ce1;
        else 
            X_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_d0_assign_proc : process(x_M_real_q0, reg_346, tmp_23_reg_629, grp_bit_reverse_fu_290_X_R_d0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, ap_CS_fsm_state65)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            X_R_d0 <= reg_346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            X_R_d0 <= tmp_23_reg_629;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_R_d0 <= x_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_d0 <= grp_bit_reverse_fu_290_X_R_d0;
        else 
            X_R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_we0_assign_proc : process(grp_bit_reverse_fu_290_X_R_we0, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state73, ap_CS_fsm_state65)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            X_R_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_we0 <= grp_bit_reverse_fu_290_X_R_we0;
        else 
            X_R_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_we1_assign_proc : process(grp_bit_reverse_fu_290_X_R_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_R_we1 <= grp_bit_reverse_fu_290_X_R_we1;
        else 
            X_R_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);

    ap_block_state48_on_subcall_done_assign_proc : process(grp_sin_or_cos_float_s_fu_258_ap_done, grp_sin_or_cos_float_s_fu_274_ap_done)
    begin
                ap_block_state48_on_subcall_done <= ((grp_sin_or_cos_float_s_fu_274_ap_done = ap_const_logic_0) or (grp_sin_or_cos_float_s_fu_258_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state74, icmp_ln178_fu_469_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln178_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state74, icmp_ln178_fu_469_p2)
    begin
        if (((icmp_ln178_fu_469_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_bit_reverse_fu_290_ap_start <= grp_bit_reverse_fu_290_ap_start_reg;

    grp_fu_296_ce_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state72, ap_CS_fsm_state44, ap_CS_fsm_state48, ap_block_state48_on_subcall_done, ap_CS_fsm_state64, ap_CS_fsm_state47, ap_CS_fsm_state58, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state59) or ((ap_const_boolean_0 = ap_block_state48_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state48)))) then 
            grp_fu_296_ce <= ap_const_logic_1;
        else 
            grp_fu_296_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_296_opcode_assign_proc : process(ap_CS_fsm_state44, icmp_ln159_fu_414_p2, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_fu_296_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or ((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln159_fu_414_p2 = ap_const_lv1_0)))) then 
            grp_fu_296_opcode <= ap_const_lv2_0;
        else 
            grp_fu_296_opcode <= "XX";
        end if; 
    end process;


    grp_fu_296_p0_assign_proc : process(reg_332, ap_CS_fsm_state44, tmp_19_reg_609, p_x_assign_reg_226, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_296_p0 <= reg_332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_296_p0 <= tmp_19_reg_609;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_296_p0 <= p_x_assign_reg_226;
        else 
            grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p1_assign_proc : process(reg_346, e_reg_541, ap_CS_fsm_state44, tmp_20_reg_614, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_296_p1 <= reg_346;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_296_p1 <= tmp_20_reg_614;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_296_p1 <= e_reg_541;
        else 
            grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_opcode_assign_proc : process(ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_301_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state55))) then 
            grp_fu_301_opcode <= ap_const_lv2_0;
        else 
            grp_fu_301_opcode <= "XX";
        end if; 
    end process;


    grp_fu_301_p0_assign_proc : process(reg_339, tmp_21_reg_619, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_301_p0 <= reg_339;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_301_p0 <= tmp_21_reg_619;
        else 
            grp_fu_301_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_301_p1_assign_proc : process(reg_352, tmp_22_reg_624, ap_CS_fsm_state55, ap_CS_fsm_state60, ap_CS_fsm_state68)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_301_p1 <= reg_352;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_301_p1 <= tmp_22_reg_624;
        else 
            grp_fu_301_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_329_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_386_p2),32));
    grp_sin_or_cos_float_s_fu_258_ap_start <= grp_sin_or_cos_float_s_fu_258_ap_start_reg;
    grp_sin_or_cos_float_s_fu_258_do_cos <= ap_const_logic_1;
    grp_sin_or_cos_float_s_fu_274_ap_start <= grp_sin_or_cos_float_s_fu_274_ap_start_reg;
    grp_sin_or_cos_float_s_fu_274_do_cos <= ap_const_logic_0;
    i_7_fu_475_p2 <= std_logic_vector(unsigned(i2_0_reg_247) + unsigned(ap_const_lv11_1));
    i_8_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_215),32));
    i_9_fu_464_p2 <= std_logic_vector(unsigned(zext_ln152_reg_514) + unsigned(i_0_reg_238));
    i_fu_364_p2 <= std_logic_vector(unsigned(i1_0_reg_192) + unsigned(ap_const_lv11_1));
    i_lower_fu_447_p2 <= std_logic_vector(signed(i_0_reg_238) + signed(numBF_reg_536));
    icmp_ln140_fu_358_p2 <= "1" when (i1_0_reg_192 = ap_const_lv11_400) else "0";
    icmp_ln151_fu_380_p2 <= "1" when (stage_0_reg_203 = ap_const_lv4_B) else "0";
    icmp_ln159_fu_414_p2 <= "1" when (i_8_reg_215 = trunc_ln_reg_520) else "0";
    icmp_ln165_fu_441_p2 <= "1" when (signed(tmp_44_fu_431_p4) < signed(ap_const_lv22_1)) else "0";
    icmp_ln178_fu_469_p2 <= "1" when (i2_0_reg_247 = ap_const_lv11_400) else "0";
    j_fu_419_p2 <= std_logic_vector(unsigned(i_8_reg_215) + unsigned(ap_const_lv10_1));
    numBF_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_520),32));
        sext_ln167_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_lower_fu_447_p2),64));

        sext_ln169_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_0_reg_238),64));

    stage_fu_425_p2 <= std_logic_vector(unsigned(stage_0_reg_203) + unsigned(ap_const_lv4_1));
    tmp_44_fu_431_p4 <= i_0_reg_238(31 downto 10);

    x_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln141_fu_370_p1, zext_ln179_reg_647, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            x_M_imag_address0 <= zext_ln179_reg_647(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_M_imag_address0 <= zext_ln141_fu_370_p1(10 - 1 downto 0);
        else 
            x_M_imag_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_M_imag_ce0 <= ap_const_logic_1;
        else 
            x_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_M_imag_d0 <= X_I_q0;

    x_M_imag_we0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            x_M_imag_we0 <= ap_const_logic_1;
        else 
            x_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_M_real_address0_assign_proc : process(ap_CS_fsm_state2, zext_ln141_fu_370_p1, zext_ln179_reg_647, ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            x_M_real_address0 <= zext_ln179_reg_647(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_M_real_address0 <= zext_ln141_fu_370_p1(10 - 1 downto 0);
        else 
            x_M_real_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    x_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            x_M_real_ce0 <= ap_const_logic_1;
        else 
            x_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_M_real_d0 <= X_R_q0;

    x_M_real_we0_assign_proc : process(ap_CS_fsm_state75)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            x_M_real_we0 <= ap_const_logic_1;
        else 
            x_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln141_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_0_reg_192),64));
    zext_ln151_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_0_reg_203),11));
    zext_ln152_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(DFTpts_fu_386_p2),32));
    zext_ln179_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i2_0_reg_247),64));
end behav;
