-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Autocorrelation is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_M_real_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    X_M_real_ce0 : OUT STD_LOGIC;
    X_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_M_real_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    X_M_real_ce1 : OUT STD_LOGIC;
    X_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_M_imag_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    X_M_imag_ce0 : OUT STD_LOGIC;
    X_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_M_imag_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    X_M_imag_ce1 : OUT STD_LOGIC;
    X_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Rx_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Rx_M_real_ce0 : OUT STD_LOGIC;
    Rx_M_real_we0 : OUT STD_LOGIC;
    Rx_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Rx_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    Rx_M_imag_ce0 : OUT STD_LOGIC;
    Rx_M_imag_we0 : OUT STD_LOGIC;
    Rx_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Autocorrelation is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (42 downto 0) := "0000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (42 downto 0) := "0000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (42 downto 0) := "0000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (42 downto 0) := "0000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (42 downto 0) := "0000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (42 downto 0) := "0000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (42 downto 0) := "0000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (42 downto 0) := "0001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (42 downto 0) := "0010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (42 downto 0) := "0100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (42 downto 0) := "1000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv32_42C80000 : STD_LOGIC_VECTOR (31 downto 0) := "01000010110010000000000000000000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (42 downto 0) := "0000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_224 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_257_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_374 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln96_fu_263_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln96_reg_379 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln90_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln91_fu_275_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln91_reg_384 : STD_LOGIC_VECTOR (5 downto 0);
    signal y_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_reg_392 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln96_1_fu_291_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln96_1_reg_397 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln91_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Rx_M_real_addr11_reg_402 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rx_M_imag_addr_reg_407 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_fu_316_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln93_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_t_real_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal X_M_imag_load_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_17_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_16_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_imag_fu_365_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal x_0_reg_116 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_reg_127 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal p_r_M_imag_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_0_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln96_3_fu_304_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_1_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_2_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal tmp_fu_267_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln96_2_fu_295_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln96_fu_299_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_322_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln94_fu_330_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln94_fu_334_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln94_1_fu_345_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal bitcast_ln667_fu_356_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln667_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_177_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (42 downto 0);

    component music_faddfsub_32ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fdiv_32ns_3ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    music_faddfsub_32ibs_U40 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_173_p0,
        din1 => grp_fu_173_p1,
        opcode => grp_fu_173_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    music_faddfsub_32ibs_U41 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        opcode => grp_fu_177_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    music_fmul_32ns_3jbC_U42 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_183_p0,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    music_fmul_32ns_3jbC_U43 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        din1 => grp_fu_189_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);

    music_fmul_32ns_3jbC_U44 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_195_p0,
        din1 => grp_fu_195_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_195_p2);

    music_fmul_32ns_3jbC_U45 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_201_p2);

    music_fdiv_32ns_3ncg_U46 : component music_fdiv_32ns_3ncg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_239,
        din1 => ap_const_lv32_42C80000,
        ce => ap_const_logic_1,
        dout => grp_fu_207_p2);

    music_fdiv_32ns_3ncg_U47 : component music_fdiv_32ns_3ncg
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_245,
        din1 => ap_const_lv32_42C80000,
        ce => ap_const_logic_1,
        dout => grp_fu_213_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    l_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                l_0_reg_162 <= l_reg_415;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln91_fu_279_p2 = ap_const_lv1_0))) then 
                l_0_reg_162 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_r_M_imag_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_r_M_imag_reg_138 <= grp_fu_177_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln91_fu_279_p2 = ap_const_lv1_0))) then 
                p_r_M_imag_reg_138 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_r_M_real_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                p_r_M_real_reg_150 <= grp_fu_173_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln91_fu_279_p2 = ap_const_lv1_0))) then 
                p_r_M_real_reg_150 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln91_fu_279_p2 = ap_const_lv1_1))) then 
                x_0_reg_116 <= x_reg_374;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_0_reg_116 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                y_0_reg_127 <= y_reg_392;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln90_fu_251_p2 = ap_const_lv1_0))) then 
                y_0_reg_127 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln91_fu_279_p2 = ap_const_lv1_0))) then
                Rx_M_imag_addr_reg_407 <= zext_ln96_3_fu_304_p1(4 - 1 downto 0);
                Rx_M_real_addr11_reg_402 <= zext_ln96_3_fu_304_p1(4 - 1 downto 0);
                    zext_ln96_1_reg_397(2 downto 0) <= zext_ln96_1_fu_291_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                X_M_imag_load_reg_446 <= X_M_imag_q0;
                p_r_M_imag_16_reg_457 <= X_M_imag_q1;
                p_r_M_real_17_reg_451 <= X_M_real_q1;
                p_t_real_reg_440 <= X_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                l_reg_415 <= l_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_219 <= grp_fu_183_p2;
                reg_224 <= grp_fu_189_p2;
                reg_229 <= grp_fu_195_p2;
                reg_234 <= grp_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state14))) then
                reg_239 <= grp_fu_173_p2;
                reg_245 <= grp_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                x_reg_374 <= x_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                y_reg_392 <= y_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln90_fu_251_p2 = ap_const_lv1_0))) then
                    zext_ln91_reg_384(4 downto 2) <= zext_ln91_fu_275_p1(4 downto 2);
                    zext_ln96_reg_379(2 downto 0) <= zext_ln96_fu_263_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln96_reg_379(6 downto 3) <= "0000";
    zext_ln91_reg_384(1 downto 0) <= "00";
    zext_ln91_reg_384(5) <= '0';
    zext_ln96_1_reg_397(6 downto 3) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln90_fu_251_p2, ap_CS_fsm_state3, icmp_ln91_fu_279_p2, ap_CS_fsm_state4, icmp_ln93_fu_310_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln90_fu_251_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln91_fu_279_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln93_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Rx_M_imag_address0 <= Rx_M_imag_addr_reg_407;

    Rx_M_imag_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            Rx_M_imag_ce0 <= ap_const_logic_1;
        else 
            Rx_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Rx_M_imag_d0 <= grp_fu_213_p2;

    Rx_M_imag_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            Rx_M_imag_we0 <= ap_const_logic_1;
        else 
            Rx_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Rx_M_real_address0 <= Rx_M_real_addr11_reg_402;

    Rx_M_real_ce0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            Rx_M_real_ce0 <= ap_const_logic_1;
        else 
            Rx_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Rx_M_real_d0 <= grp_fu_207_p2;

    Rx_M_real_we0_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            Rx_M_real_we0 <= ap_const_logic_1;
        else 
            Rx_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    X_M_imag_address0 <= zext_ln94_2_fu_350_p1(6 - 1 downto 0);
    X_M_imag_address1 <= zext_ln94_1_fu_339_p1(6 - 1 downto 0);

    X_M_imag_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_M_imag_ce0 <= ap_const_logic_1;
        else 
            X_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_M_imag_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_M_imag_ce1 <= ap_const_logic_1;
        else 
            X_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_M_real_address0 <= zext_ln94_2_fu_350_p1(6 - 1 downto 0);
    X_M_real_address1 <= zext_ln94_1_fu_339_p1(6 - 1 downto 0);

    X_M_real_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_M_real_ce0 <= ap_const_logic_1;
        else 
            X_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_M_real_ce1_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_M_real_ce1 <= ap_const_logic_1;
        else 
            X_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln94_1_fu_345_p2 <= std_logic_vector(unsigned(zext_ln96_1_reg_397) + unsigned(zext_ln94_fu_330_p1));
    add_ln94_fu_334_p2 <= std_logic_vector(unsigned(zext_ln96_reg_379) + unsigned(zext_ln94_fu_330_p1));
    add_ln96_fu_299_p2 <= std_logic_vector(unsigned(zext_ln91_reg_384) + unsigned(zext_ln96_2_fu_295_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln90_fu_251_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln90_fu_251_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln90_fu_251_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln90_fu_251_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln667_fu_356_p1 <= X_M_imag_load_reg_446;

    grp_fu_173_opcode_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_173_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            grp_fu_173_opcode <= ap_const_lv2_0;
        else 
            grp_fu_173_opcode <= "XX";
        end if; 
    end process;


    grp_fu_173_p0_assign_proc : process(reg_219, p_r_M_real_reg_150, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_173_p0 <= p_r_M_real_reg_150;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_173_p0 <= reg_219;
        else 
            grp_fu_173_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_173_p1_assign_proc : process(reg_224, reg_239, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_173_p1 <= reg_239;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_173_p1 <= reg_224;
        else 
            grp_fu_173_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_opcode_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_177_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_177_opcode <= ap_const_lv2_0;
        else 
            grp_fu_177_opcode <= "XX";
        end if; 
    end process;


    grp_fu_177_p0_assign_proc : process(reg_229, p_r_M_imag_reg_138, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_177_p0 <= p_r_M_imag_reg_138;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_177_p0 <= reg_229;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(reg_234, reg_245, ap_CS_fsm_state10, ap_CS_fsm_state15, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_177_p1 <= reg_245;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            grp_fu_177_p1 <= reg_234;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p0_assign_proc : process(ap_CS_fsm_state4, p_r_M_real_17_reg_451, ap_CS_fsm_state6, p_r_M_real_reg_150)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_183_p0 <= p_r_M_real_17_reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_183_p0 <= p_r_M_real_reg_150;
        else 
            grp_fu_183_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_183_p1_assign_proc : process(ap_CS_fsm_state4, p_t_real_reg_440, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_183_p1 <= p_t_real_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_183_p1 <= ap_const_lv32_41200000;
        else 
            grp_fu_183_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p0_assign_proc : process(ap_CS_fsm_state4, p_r_M_imag_16_reg_457, ap_CS_fsm_state6, p_r_M_imag_reg_138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_189_p0 <= p_r_M_imag_16_reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_189_p0 <= p_r_M_imag_reg_138;
        else 
            grp_fu_189_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_189_p1_assign_proc : process(ap_CS_fsm_state4, p_t_imag_fu_365_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_189_p1 <= p_t_imag_fu_365_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_189_p1 <= ap_const_lv32_0;
        else 
            grp_fu_189_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_195_p0_assign_proc : process(ap_CS_fsm_state4, p_r_M_imag_16_reg_457, ap_CS_fsm_state6, p_r_M_imag_reg_138)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_195_p0 <= p_r_M_imag_16_reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_195_p0 <= p_r_M_imag_reg_138;
        else 
            grp_fu_195_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_195_p1_assign_proc : process(ap_CS_fsm_state4, p_t_real_reg_440, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_195_p1 <= p_t_real_reg_440;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_195_p1 <= ap_const_lv32_41200000;
        else 
            grp_fu_195_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p0_assign_proc : process(ap_CS_fsm_state4, p_r_M_real_17_reg_451, ap_CS_fsm_state6, p_r_M_real_reg_150)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_201_p0 <= p_r_M_real_17_reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_201_p0 <= p_r_M_real_reg_150;
        else 
            grp_fu_201_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p1_assign_proc : process(ap_CS_fsm_state4, p_t_imag_fu_365_p1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_201_p1 <= p_t_imag_fu_365_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_201_p1 <= ap_const_lv32_0;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln90_fu_251_p2 <= "1" when (x_0_reg_116 = ap_const_lv3_4) else "0";
    icmp_ln91_fu_279_p2 <= "1" when (y_0_reg_127 = ap_const_lv3_4) else "0";
    icmp_ln93_fu_310_p2 <= "1" when (l_0_reg_162 = ap_const_lv4_A) else "0";
    l_fu_316_p2 <= std_logic_vector(unsigned(l_0_reg_162) + unsigned(ap_const_lv4_1));
    p_t_imag_fu_365_p1 <= xor_ln667_fu_359_p2;
    tmp_fu_267_p3 <= (x_0_reg_116 & ap_const_lv2_0);
    tmp_s_fu_322_p3 <= (l_0_reg_162 & ap_const_lv2_0);
    x_fu_257_p2 <= std_logic_vector(unsigned(x_0_reg_116) + unsigned(ap_const_lv3_1));
    xor_ln667_fu_359_p2 <= (bitcast_ln667_fu_356_p1 xor ap_const_lv32_80000000);
    y_fu_285_p2 <= std_logic_vector(unsigned(y_0_reg_127) + unsigned(ap_const_lv3_1));
    zext_ln91_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_267_p3),6));
    zext_ln94_1_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_fu_334_p2),64));
    zext_ln94_2_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln94_1_fu_345_p2),64));
    zext_ln94_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_322_p3),7));
    zext_ln96_1_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_127),7));
    zext_ln96_2_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_127),6));
    zext_ln96_3_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_fu_299_p2),64));
    zext_ln96_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_0_reg_116),7));
end behav;
