-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity music is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    X_ce0 : OUT STD_LOGIC;
    X_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    DOA_src : IN STD_LOGIC_VECTOR (31 downto 0);
    DOA_interfer : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of music is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "music,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.195200,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=313,HLS_SYN_DSP=398,HLS_SYN_FF=73280,HLS_SYN_LUT=84152,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state163 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state164 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state166 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state167 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state168 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state169 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state170 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state171 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state172 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state173 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state174 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state175 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state176 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state177 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state178 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state179 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state180 : STD_LOGIC_VECTOR (189 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state181 : STD_LOGIC_VECTOR (189 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state182 : STD_LOGIC_VECTOR (189 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state183 : STD_LOGIC_VECTOR (189 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state184 : STD_LOGIC_VECTOR (189 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state185 : STD_LOGIC_VECTOR (189 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state186 : STD_LOGIC_VECTOR (189 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state187 : STD_LOGIC_VECTOR (189 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state188 : STD_LOGIC_VECTOR (189 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state189 : STD_LOGIC_VECTOR (189 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state190 : STD_LOGIC_VECTOR (189 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_AC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101100";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv32_BC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111100";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110010";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv64_401921FB4D12D84A : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011001001000011111101101001101000100101101100001001010";
    constant ap_const_lv64_400921FB4D12D84A : STD_LOGIC_VECTOR (63 downto 0) := "0100000000001001001000011111101101001101000100101101100001001010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv64_4066800000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001100110100000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4075400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001110101010000000000000000000000000000000000000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv11_169 : STD_LOGIC_VECTOR (10 downto 0) := "00101101001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv16_2C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000101100";
    constant ap_const_lv60_0 : STD_LOGIC_VECTOR (59 downto 0) := "000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_169 : STD_LOGIC_VECTOR (8 downto 0) := "101101001";
    constant ap_const_lv32_BEC00000 : STD_LOGIC_VECTOR (31 downto 0) := "10111110110000000000000000000000";
    constant ap_const_lv32_BE000000 : STD_LOGIC_VECTOR (31 downto 0) := "10111110000000000000000000000000";
    constant ap_const_lv32_3E000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000000000000000000000000";
    constant ap_const_lv32_3EC00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111110110000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv17_169 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101101001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (189 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal fc_ce0 : STD_LOGIC;
    signal fc_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal theta_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal theta_ce0 : STD_LOGIC;
    signal theta_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1588 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_1576_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1594 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_fu_1582_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1600 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_1444_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_1606 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_1444_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1444_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_1464_ap_ready : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1464_ap_done : STD_LOGIC;
    signal ap_block_state128_on_subcall_done : BOOLEAN;
    signal grp_fu_1525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal ap_CS_fsm_state173 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state173 : signal is "none";
    signal grp_fu_1529_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1617 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1503_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal ap_CS_fsm_state178 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state178 : signal is "none";
    signal ap_CS_fsm_state189 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state189 : signal is "none";
    signal grp_fu_1507_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1640 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_theta_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1648 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal ap_CS_fsm_state169 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state169 : signal is "none";
    signal a_theta_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_1656 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln185_fu_1660_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln187_fu_1678_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln187_reg_2959 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln1027_fu_1708_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1027_reg_2964 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln187_1_fu_1714_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln187_1_reg_2969 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln1027_1_fu_1724_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1027_1_reg_2974 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln187_2_fu_1729_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln188_fu_1766_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln188_reg_2993 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln188_1_fu_1772_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal add_ln189_fu_1804_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln189_reg_3009 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln189_1_fu_1810_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln190_fu_1842_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln190_reg_3025 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln190_1_fu_1848_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal add_ln191_fu_1880_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln191_reg_3041 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal xor_ln191_fu_1886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln192_fu_1912_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln192_reg_3054 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln192_1_fu_1918_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln193_fu_1950_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln193_reg_3070 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln193_1_fu_1956_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal add_ln194_fu_1988_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal add_ln195_2_fu_2006_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln195_2_reg_3094 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln195_fu_2012_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln195_reg_3099 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln195_1_fu_2018_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal l_fu_2058_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_reg_3118 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln221_fu_2072_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln221_reg_3123 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln218_fu_2052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln219_fu_2076_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln219_reg_3128 : STD_LOGIC_VECTOR (14 downto 0);
    signal n_1_fu_2086_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_1_reg_3184 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal zext_ln220_fu_2092_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln220_reg_3189 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln219_fu_2080_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_2102_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_3198 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal icmp_ln220_fu_2096_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_2153_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_3_reg_3211 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln225_2_fu_2208_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln225_2_reg_3216 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln224_fu_2147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln230_fu_2218_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln230_reg_3231 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal jj_fu_2230_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal jj_reg_3239 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln233_fu_2236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_reg_3244 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln230_fu_2224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_1_fu_2246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_1_reg_3252 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal zext_ln232_fu_2260_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln232_reg_3257 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln231_fu_2240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_2270_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal n_reg_3265 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln232_fu_2264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln233_1_fu_2296_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln233_1_reg_3280 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_eig_decompose_fu_1410_ap_ready : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_ap_done : STD_LOGIC;
    signal eigval_0_reg_3325 : STD_LOGIC_VECTOR (31 downto 0);
    signal eigval_1_reg_3330 : STD_LOGIC_VECTOR (31 downto 0);
    signal eigval_2_reg_3335 : STD_LOGIC_VECTOR (31 downto 0);
    signal eigval_3_reg_3340 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_0_reg_3345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_sort_eigval_fu_1491_ap_ready : STD_LOGIC;
    signal grp_sort_eigval_fu_1491_ap_done : STD_LOGIC;
    signal sort_index_1_reg_3350 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_2_reg_3355 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_3_reg_3360 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_fu_2420_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_reg_3368 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal zext_ln242_fu_2434_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln242_reg_3373 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln239_fu_2414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Un_M_real_addr_1_reg_3378 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_real_addr_2_reg_3383 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_imag_addr_1_reg_3388 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_imag_addr_2_reg_3393 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_fu_2474_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_1_reg_3406 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal icmp_ln240_fu_2468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_fu_2509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_reg_3421 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln243_fu_2515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln243_reg_3425 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal tmp_3_reg_3434 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal add_ln248_fu_2521_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln248_reg_3439 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal x_1_fu_2533_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_1_reg_3447 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln250_fu_2539_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln250_reg_3452 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln248_fu_2527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_fu_2549_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_reg_3460 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal add_ln250_fu_2564_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln250_reg_3465 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln249_fu_2543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_2570_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_3485 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_7_reg_3490 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_1464_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_2595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_3503 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal icmp_ln255_fu_2589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln257_1_fu_2639_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln257_1_reg_3528 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal Un_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_reg_3533 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_reg_3539 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_8_reg_3545 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_8_reg_3551 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_4_fu_2649_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_3560 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal icmp_ln256_fu_2643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln257_fu_2689_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln257_reg_3585 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_t_real_reg_3590 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal Un_M_imag_load_2_reg_3596 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_real_4_reg_3601 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_imag_load_reg_3607 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_imag_fu_2703_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal p_t_imag_4_fu_2718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i4_reg_3624 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1545_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_108_reg_3629 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_i1_reg_3634 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_i1_reg_3639 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_writ_reg_3644 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1515_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_imag_writ_reg_3649 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln260_fu_2729_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln260_reg_3654 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal add_ln260_fu_2733_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln260_reg_3659 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_5_fu_2745_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_5_reg_3667 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln261_fu_2759_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln261_reg_3672 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln260_fu_2739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_2769_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_5_reg_3680 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal zext_ln267_fu_2775_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln267_reg_3685 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln261_fu_2763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal AUU_M_real_addr_2_reg_3690 : STD_LOGIC_VECTOR (10 downto 0);
    signal AUU_M_imag_addr_2_reg_3695 : STD_LOGIC_VECTOR (10 downto 0);
    signal k_1_fu_2800_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_1_reg_3703 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal add_ln265_fu_2822_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln265_reg_3708 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln264_fu_2794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_r_M_imag_11_fu_2853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal UU_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal UU_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state166 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state166 : signal is "none";
    signal trunc_ln270_fu_2859_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln270_reg_3761 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state167 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state167 : signal is "none";
    signal add_ln270_fu_2863_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln270_reg_3766 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_6_fu_2875_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_6_reg_3774 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln274_fu_2881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln274_reg_3779 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln270_fu_2869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln273_fu_2893_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln273_reg_3785 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_fu_2903_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_3793 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state168 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state168 : signal is "none";
    signal icmp_ln273_fu_2897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_M_real_addr_1_reg_3818 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_M_imag_addr_1_reg_3823 : STD_LOGIC_VECTOR (8 downto 0);
    signal AUU_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_10_reg_3828 : STD_LOGIC_VECTOR (31 downto 0);
    signal AUU_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_10_reg_3834 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_t_imag_5_fu_2945_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state170 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state170 : signal is "none";
    signal ap_CS_fsm_state183 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state183 : signal is "none";
    signal w_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_M_real_load_reg_3856 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state184 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state184 : signal is "none";
    signal w_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_M_imag_load_reg_3861 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_Buffer_M_real_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFT_Buffer_M_real_ce0 : STD_LOGIC;
    signal FFT_Buffer_M_real_we0 : STD_LOGIC;
    signal FFT_Buffer_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_Buffer_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_Buffer_M_imag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal FFT_Buffer_M_imag_ce0 : STD_LOGIC;
    signal FFT_Buffer_M_imag_we0 : STD_LOGIC;
    signal FFT_Buffer_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal FFT_Buffer_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xj_f_M_real_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Xj_f_M_real_ce0 : STD_LOGIC;
    signal Xj_f_M_real_we0 : STD_LOGIC;
    signal Xj_f_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xj_f_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xj_f_M_imag_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal Xj_f_M_imag_ce0 : STD_LOGIC;
    signal Xj_f_M_imag_we0 : STD_LOGIC;
    signal Xj_f_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Xj_f_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Autocorr_Buffer_M_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Autocorr_Buffer_M_r_ce0 : STD_LOGIC;
    signal Autocorr_Buffer_M_r_we0 : STD_LOGIC;
    signal Autocorr_Buffer_M_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Autocorr_Buffer_M_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Autocorr_Buffer_M_r_ce1 : STD_LOGIC;
    signal Autocorr_Buffer_M_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Autocorr_Buffer_M_i_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Autocorr_Buffer_M_i_ce0 : STD_LOGIC;
    signal Autocorr_Buffer_M_i_we0 : STD_LOGIC;
    signal Autocorr_Buffer_M_i_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Autocorr_Buffer_M_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Autocorr_Buffer_M_i_ce1 : STD_LOGIC;
    signal Autocorr_Buffer_M_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Rx_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rx_M_real_ce0 : STD_LOGIC;
    signal Rx_M_real_we0 : STD_LOGIC;
    signal Rx_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Rx_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Rx_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal Rx_M_imag_ce0 : STD_LOGIC;
    signal Rx_M_imag_we0 : STD_LOGIC;
    signal Rx_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Rx_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_M_real_ce0 : STD_LOGIC;
    signal U_M_real_we0 : STD_LOGIC;
    signal U_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_M_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_M_imag_ce0 : STD_LOGIC;
    signal U_M_imag_we0 : STD_LOGIC;
    signal U_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_M_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_real_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_real_ce0 : STD_LOGIC;
    signal Un_M_real_we0 : STD_LOGIC;
    signal Un_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_real_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_real_ce1 : STD_LOGIC;
    signal Un_M_imag_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_imag_ce0 : STD_LOGIC;
    signal Un_M_imag_we0 : STD_LOGIC;
    signal Un_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Un_M_imag_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Un_M_imag_ce1 : STD_LOGIC;
    signal UU_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal UU_M_real_ce0 : STD_LOGIC;
    signal UU_M_real_we0 : STD_LOGIC;
    signal UU_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal UU_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal UU_M_imag_ce0 : STD_LOGIC;
    signal UU_M_imag_we0 : STD_LOGIC;
    signal UU_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AUU_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal AUU_M_real_ce0 : STD_LOGIC;
    signal AUU_M_real_we0 : STD_LOGIC;
    signal AUU_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal AUU_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal AUU_M_imag_ce0 : STD_LOGIC;
    signal AUU_M_imag_we0 : STD_LOGIC;
    signal AUU_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_M_real_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_M_real_ce0 : STD_LOGIC;
    signal w_M_real_we0 : STD_LOGIC;
    signal w_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_M_imag_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal w_M_imag_ce0 : STD_LOGIC;
    signal w_M_imag_we0 : STD_LOGIC;
    signal w_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_theta_M_real_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_theta_M_real_ce0 : STD_LOGIC;
    signal a_theta_M_real_we0 : STD_LOGIC;
    signal a_theta_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_theta_M_imag_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal a_theta_M_imag_ce0 : STD_LOGIC;
    signal a_theta_M_imag_we0 : STD_LOGIC;
    signal a_theta_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eig_decompose_fu_1410_ap_start : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_ap_idle : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_Rx_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_eig_decompose_fu_1410_Rx_M_real_ce0 : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_Rx_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_eig_decompose_fu_1410_Rx_M_imag_ce0 : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_U_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_eig_decompose_fu_1410_U_M_real_ce0 : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_U_M_real_we0 : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_U_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eig_decompose_fu_1410_U_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_eig_decompose_fu_1410_U_M_imag_ce0 : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_U_M_imag_we0 : STD_LOGIC;
    signal grp_eig_decompose_fu_1410_U_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eig_decompose_fu_1410_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eig_decompose_fu_1410_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eig_decompose_fu_1410_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_eig_decompose_fu_1410_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_fu_1430_ap_start : STD_LOGIC;
    signal grp_fft_fu_1430_ap_done : STD_LOGIC;
    signal grp_fft_fu_1430_ap_idle : STD_LOGIC;
    signal grp_fft_fu_1430_ap_ready : STD_LOGIC;
    signal grp_fft_fu_1430_x_M_real_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_fu_1430_x_M_real_ce0 : STD_LOGIC;
    signal grp_fft_fu_1430_x_M_real_we0 : STD_LOGIC;
    signal grp_fft_fu_1430_x_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_fu_1430_x_M_imag_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_fu_1430_x_M_imag_ce0 : STD_LOGIC;
    signal grp_fft_fu_1430_x_M_imag_we0 : STD_LOGIC;
    signal grp_fft_fu_1430_x_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sin_or_cos_double_s_fu_1444_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1444_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1444_do_cos : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1464_ap_start : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1464_ap_idle : STD_LOGIC;
    signal grp_sin_or_cos_double_s_fu_1464_do_cos : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_ap_start : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_ap_done : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_ap_idle : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_ap_ready : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_X_M_real_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Autocorrelation_fu_1483_X_M_real_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_X_M_real_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Autocorrelation_fu_1483_X_M_real_ce1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_X_M_imag_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Autocorrelation_fu_1483_X_M_imag_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_X_M_imag_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_Autocorrelation_fu_1483_X_M_imag_ce1 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_Rx_M_real_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Autocorrelation_fu_1483_Rx_M_real_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_Rx_M_real_we0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_Rx_M_real_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Autocorrelation_fu_1483_Rx_M_imag_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Autocorrelation_fu_1483_Rx_M_imag_ce0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_Rx_M_imag_we0 : STD_LOGIC;
    signal grp_Autocorrelation_fu_1483_Rx_M_imag_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sort_eigval_fu_1491_ap_start : STD_LOGIC;
    signal grp_sort_eigval_fu_1491_ap_idle : STD_LOGIC;
    signal grp_sort_eigval_fu_1491_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sort_eigval_fu_1491_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sort_eigval_fu_1491_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_sort_eigval_fu_1491_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln185_reg_884 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln185_fu_1672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln187_reg_895 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln187_fu_1748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln187_1_fu_1754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln187_2_fu_1760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln187_1_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln187_2_reg_919 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln188_reg_930 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln188_fu_1792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln188_1_fu_1798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln188_1_reg_942 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln189_reg_953 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln189_fu_1830_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln189_1_fu_1836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln189_1_reg_965 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln190_reg_976 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln190_fu_1868_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln190_1_fu_1874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln190_1_reg_988 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln191_reg_999 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_fu_1906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln191_1_reg_1011 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln192_reg_1022 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln192_fu_1938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln192_1_fu_1944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln192_1_reg_1034 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln193_reg_1045 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln193_fu_1976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_1_fu_1982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln193_1_reg_1057 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln194_reg_1068 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln194_fu_2000_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln195_reg_1079 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln195_fu_2040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln195_1_fu_2046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_reg_1091 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_ln195_1_reg_1103 : STD_LOGIC_VECTOR (8 downto 0);
    signal l_0_reg_1114 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_0_reg_1125 : STD_LOGIC_VECTOR (2 downto 0);
    signal j44_0_reg_1136 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal j45_0_reg_1148 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal jj_0_reg_1159 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_mul11_reg_1170 : STD_LOGIC_VECTOR (15 downto 0);
    signal l46_0_reg_1182 : STD_LOGIC_VECTOR (3 downto 0);
    signal n47_0_reg_1193 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal x_0_reg_1204 : STD_LOGIC_VECTOR (2 downto 0);
    signal y_0_reg_1215 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal x48_0_reg_1226 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul5_reg_1237 : STD_LOGIC_VECTOR (10 downto 0);
    signal y49_0_reg_1249 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal i50_0_reg_1260 : STD_LOGIC_VECTOR (2 downto 0);
    signal j51_0_reg_1272 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal i52_0_reg_1283 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul7_reg_1294 : STD_LOGIC_VECTOR (16 downto 0);
    signal j53_0_reg_1305 : STD_LOGIC_VECTOR (2 downto 0);
    signal complex_M_imag_read_reg_1316 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_read_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_0_reg_1342 : STD_LOGIC_VECTOR (2 downto 0);
    signal i54_0_reg_1353 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state190 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state190 : signal is "none";
    signal phi_mul9_reg_1364 : STD_LOGIC_VECTOR (16 downto 0);
    signal complex_M_imag_read_1_reg_1375 : STD_LOGIC_VECTOR (31 downto 0);
    signal complex_M_real_read_1_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal k55_0_reg_1399 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_eig_decompose_fu_1410_ap_start_reg : STD_LOGIC := '0';
    signal grp_fft_fu_1430_ap_start_reg : STD_LOGIC := '0';
    signal grp_sin_or_cos_double_s_fu_1444_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal grp_sin_or_cos_double_s_fu_1464_ap_start_reg : STD_LOGIC := '0';
    signal grp_Autocorrelation_fu_1483_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_sort_eigval_fu_1491_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln185_fu_1666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_10_fu_1742_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_3_fu_1786_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_4_fu_1824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_5_fu_1862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_6_fu_1900_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_7_fu_1932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_8_fu_1970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln194_fu_1994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1027_12_fu_2034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln221_1_fu_2136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln221_1_fu_2141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_fu_2159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln225_3_fu_2213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_3_fu_2290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln233_4_fu_2301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_1_fu_2446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_fu_2458_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln242_3_fu_2489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_fu_2555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln250_2_fu_2584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_fu_2609_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_fu_2621_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_3_fu_2667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_2679_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln257_4_fu_2724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln267_2_fu_2788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_3_fu_2832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_2_fu_2838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln274_2_fu_2918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln274_3_fu_2929_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal eigval_0_1_fu_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal eigval_1_1_fu_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal eigval_2_1_fu_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal eigval_3_1_fu_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_0_1_fu_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_1_1_fu_284 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_2_1_fu_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_index_3_1_fu_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1561_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1503_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1503_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal ap_CS_fsm_state174 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state174 : signal is "none";
    signal ap_CS_fsm_state179 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state179 : signal is "none";
    signal ap_CS_fsm_state185 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state185 : signal is "none";
    signal grp_fu_1507_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1507_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1525_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1525_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1529_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1533_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1537_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1537_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1571_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1576_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal grp_fu_1582_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal tmp_35_fu_1684_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_36_fu_1696_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1027_fu_1692_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1027_2_fu_1704_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1027_9_fu_1720_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_37_fu_1735_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_38_fu_1778_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_39_fu_1816_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_40_fu_1854_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_41_fu_1892_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_42_fu_1924_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_43_fu_1962_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1027_11_fu_2024_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1027_2_fu_2028_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln_fu_2064_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln221_fu_2108_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln221_fu_2114_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln221_fu_2118_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_30_fu_2123_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln221_1_fu_2131_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_34_fu_2165_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_44_fu_2177_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln225_2_fu_2185_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln225_1_fu_2173_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln225_fu_2189_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln225_1_fu_2195_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_57_cast_fu_2200_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_29_fu_2252_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln233_2_fu_2280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln233_fu_2284_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln233_1_fu_2276_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_fu_2426_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_fu_2438_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln244_fu_2452_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln242_2_fu_2480_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln242_fu_2484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_2499_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_2499_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln250_1_fu_2560_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_45_fu_2601_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln257_fu_2615_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_fu_2631_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_fu_2659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln257_1_fu_2673_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln257_2_fu_2655_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln667_fu_2694_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln667_fu_2697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln667_2_fu_2709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln667_1_fu_2712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_fu_2751_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln267_1_fu_2779_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln267_fu_2783_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_52_fu_2810_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln265_1_fu_2818_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln265_fu_2806_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln265_1_fu_2827_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln667_6_fu_2843_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln667_3_fu_2847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_2885_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln274_1_fu_2909_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_fu_2913_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln274_1_fu_2924_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln667_4_fu_2935_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln667_2_fu_2939_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1503_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1561_ce : STD_LOGIC;
    signal grp_fu_1566_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (189 downto 0);

    component eig_decompose IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Rx_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Rx_M_real_ce0 : OUT STD_LOGIC;
        Rx_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Rx_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Rx_M_imag_ce0 : OUT STD_LOGIC;
        Rx_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_M_real_ce0 : OUT STD_LOGIC;
        U_M_real_we0 : OUT STD_LOGIC;
        U_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        U_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        U_M_imag_ce0 : OUT STD_LOGIC;
        U_M_imag_we0 : OUT STD_LOGIC;
        U_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        U_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_M_real_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        x_M_real_ce0 : OUT STD_LOGIC;
        x_M_real_we0 : OUT STD_LOGIC;
        x_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        x_M_imag_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        x_M_imag_ce0 : OUT STD_LOGIC;
        x_M_imag_we0 : OUT STD_LOGIC;
        x_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sin_or_cos_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        do_cos : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Autocorrelation IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_M_real_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        X_M_real_ce0 : OUT STD_LOGIC;
        X_M_real_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_M_real_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        X_M_real_ce1 : OUT STD_LOGIC;
        X_M_real_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_M_imag_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        X_M_imag_ce0 : OUT STD_LOGIC;
        X_M_imag_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_M_imag_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        X_M_imag_ce1 : OUT STD_LOGIC;
        X_M_imag_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Rx_M_real_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Rx_M_real_ce0 : OUT STD_LOGIC;
        Rx_M_real_we0 : OUT STD_LOGIC;
        Rx_M_real_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Rx_M_imag_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        Rx_M_imag_ce0 : OUT STD_LOGIC;
        Rx_M_imag_we0 : OUT STD_LOGIC;
        Rx_M_imag_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sort_eigval IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        eigval_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        eigval_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sort_index_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sort_index_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sort_index_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        sort_index_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_faddfsub_32ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fadd_32ns_3ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fsub_32ns_3rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fmul_32ns_3jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fptrunc_64nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fpext_32ns_WhU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component music_dmul_64ns_6Xh4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component music_ddiv_64ns_6lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component music_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_fc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_theta IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_FFT_Buffer_QgW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_Xj_f_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_Autocorr_BuShg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component eig_decompose_Q_twdI IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_Un_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_AUU_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_w_M_real IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    fc_U : component music_fc
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fc_address0,
        ce0 => fc_ce0,
        q0 => fc_q0);

    theta_U : component music_theta
    generic map (
        DataWidth => 32,
        AddressRange => 361,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => theta_address0,
        ce0 => theta_ce0,
        q0 => theta_q0);

    FFT_Buffer_M_real_U : component music_FFT_Buffer_QgW
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FFT_Buffer_M_real_address0,
        ce0 => FFT_Buffer_M_real_ce0,
        we0 => FFT_Buffer_M_real_we0,
        d0 => FFT_Buffer_M_real_d0,
        q0 => FFT_Buffer_M_real_q0);

    FFT_Buffer_M_imag_U : component music_FFT_Buffer_QgW
    generic map (
        DataWidth => 32,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => FFT_Buffer_M_imag_address0,
        ce0 => FFT_Buffer_M_imag_ce0,
        we0 => FFT_Buffer_M_imag_we0,
        d0 => FFT_Buffer_M_imag_d0,
        q0 => FFT_Buffer_M_imag_q0);

    Xj_f_M_real_U : component music_Xj_f_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 40960,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Xj_f_M_real_address0,
        ce0 => Xj_f_M_real_ce0,
        we0 => Xj_f_M_real_we0,
        d0 => Xj_f_M_real_d0,
        q0 => Xj_f_M_real_q0);

    Xj_f_M_imag_U : component music_Xj_f_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 40960,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Xj_f_M_imag_address0,
        ce0 => Xj_f_M_imag_ce0,
        we0 => Xj_f_M_imag_we0,
        d0 => Xj_f_M_imag_d0,
        q0 => Xj_f_M_imag_q0);

    Autocorr_Buffer_M_r_U : component music_Autocorr_BuShg
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Autocorr_Buffer_M_r_address0,
        ce0 => Autocorr_Buffer_M_r_ce0,
        we0 => Autocorr_Buffer_M_r_we0,
        d0 => Autocorr_Buffer_M_r_d0,
        q0 => Autocorr_Buffer_M_r_q0,
        address1 => grp_Autocorrelation_fu_1483_X_M_real_address1,
        ce1 => Autocorr_Buffer_M_r_ce1,
        q1 => Autocorr_Buffer_M_r_q1);

    Autocorr_Buffer_M_i_U : component music_Autocorr_BuShg
    generic map (
        DataWidth => 32,
        AddressRange => 40,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Autocorr_Buffer_M_i_address0,
        ce0 => Autocorr_Buffer_M_i_ce0,
        we0 => Autocorr_Buffer_M_i_we0,
        d0 => Autocorr_Buffer_M_i_d0,
        q0 => Autocorr_Buffer_M_i_q0,
        address1 => grp_Autocorrelation_fu_1483_X_M_imag_address1,
        ce1 => Autocorr_Buffer_M_i_ce1,
        q1 => Autocorr_Buffer_M_i_q1);

    Rx_M_real_U : component eig_decompose_Q_twdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rx_M_real_address0,
        ce0 => Rx_M_real_ce0,
        we0 => Rx_M_real_we0,
        d0 => Rx_M_real_d0,
        q0 => Rx_M_real_q0);

    Rx_M_imag_U : component eig_decompose_Q_twdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rx_M_imag_address0,
        ce0 => Rx_M_imag_ce0,
        we0 => Rx_M_imag_we0,
        d0 => Rx_M_imag_d0,
        q0 => Rx_M_imag_q0);

    U_M_real_U : component eig_decompose_Q_twdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_M_real_address0,
        ce0 => U_M_real_ce0,
        we0 => U_M_real_we0,
        d0 => U_M_real_d0,
        q0 => U_M_real_q0);

    U_M_imag_U : component eig_decompose_Q_twdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_M_imag_address0,
        ce0 => U_M_imag_ce0,
        we0 => U_M_imag_we0,
        d0 => U_M_imag_d0,
        q0 => U_M_imag_q0);

    Un_M_real_U : component music_Un_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Un_M_real_address0,
        ce0 => Un_M_real_ce0,
        we0 => Un_M_real_we0,
        d0 => Un_M_real_d0,
        q0 => Un_M_real_q0,
        address1 => Un_M_real_address1,
        ce1 => Un_M_real_ce1,
        q1 => Un_M_real_q1);

    Un_M_imag_U : component music_Un_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Un_M_imag_address0,
        ce0 => Un_M_imag_ce0,
        we0 => Un_M_imag_we0,
        d0 => Un_M_imag_d0,
        q0 => Un_M_imag_q0,
        address1 => Un_M_imag_address1,
        ce1 => Un_M_imag_ce1,
        q1 => Un_M_imag_q1);

    UU_M_real_U : component eig_decompose_Q_twdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => UU_M_real_address0,
        ce0 => UU_M_real_ce0,
        we0 => UU_M_real_we0,
        d0 => UU_M_real_d0,
        q0 => UU_M_real_q0);

    UU_M_imag_U : component eig_decompose_Q_twdI
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => UU_M_imag_address0,
        ce0 => UU_M_imag_ce0,
        we0 => UU_M_imag_we0,
        d0 => UU_M_imag_d0,
        q0 => UU_M_imag_q0);

    AUU_M_real_U : component music_AUU_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 1444,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => AUU_M_real_address0,
        ce0 => AUU_M_real_ce0,
        we0 => AUU_M_real_we0,
        d0 => AUU_M_real_d0,
        q0 => AUU_M_real_q0);

    AUU_M_imag_U : component music_AUU_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 1444,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => AUU_M_imag_address0,
        ce0 => AUU_M_imag_ce0,
        we0 => AUU_M_imag_we0,
        d0 => AUU_M_imag_d0,
        q0 => AUU_M_imag_q0);

    w_M_real_U : component music_w_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 361,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_real_address0,
        ce0 => w_M_real_ce0,
        we0 => w_M_real_we0,
        d0 => w_M_real_d0,
        q0 => w_M_real_q0);

    w_M_imag_U : component music_w_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 361,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_M_imag_address0,
        ce0 => w_M_imag_ce0,
        we0 => w_M_imag_we0,
        d0 => w_M_imag_d0,
        q0 => w_M_imag_q0);

    a_theta_M_real_U : component music_AUU_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 1444,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_theta_M_real_address0,
        ce0 => a_theta_M_real_ce0,
        we0 => a_theta_M_real_we0,
        d0 => a_theta_M_real_d0,
        q0 => a_theta_M_real_q0);

    a_theta_M_imag_U : component music_AUU_M_real
    generic map (
        DataWidth => 32,
        AddressRange => 1444,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_theta_M_imag_address0,
        ce0 => a_theta_M_imag_ce0,
        we0 => a_theta_M_imag_we0,
        d0 => a_theta_M_imag_d0,
        q0 => a_theta_M_imag_q0);

    grp_eig_decompose_fu_1410 : component eig_decompose
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_eig_decompose_fu_1410_ap_start,
        ap_done => grp_eig_decompose_fu_1410_ap_done,
        ap_idle => grp_eig_decompose_fu_1410_ap_idle,
        ap_ready => grp_eig_decompose_fu_1410_ap_ready,
        Rx_M_real_address0 => grp_eig_decompose_fu_1410_Rx_M_real_address0,
        Rx_M_real_ce0 => grp_eig_decompose_fu_1410_Rx_M_real_ce0,
        Rx_M_real_q0 => Rx_M_real_q0,
        Rx_M_imag_address0 => grp_eig_decompose_fu_1410_Rx_M_imag_address0,
        Rx_M_imag_ce0 => grp_eig_decompose_fu_1410_Rx_M_imag_ce0,
        Rx_M_imag_q0 => Rx_M_imag_q0,
        U_M_real_address0 => grp_eig_decompose_fu_1410_U_M_real_address0,
        U_M_real_ce0 => grp_eig_decompose_fu_1410_U_M_real_ce0,
        U_M_real_we0 => grp_eig_decompose_fu_1410_U_M_real_we0,
        U_M_real_d0 => grp_eig_decompose_fu_1410_U_M_real_d0,
        U_M_real_q0 => U_M_real_q0,
        U_M_imag_address0 => grp_eig_decompose_fu_1410_U_M_imag_address0,
        U_M_imag_ce0 => grp_eig_decompose_fu_1410_U_M_imag_ce0,
        U_M_imag_we0 => grp_eig_decompose_fu_1410_U_M_imag_we0,
        U_M_imag_d0 => grp_eig_decompose_fu_1410_U_M_imag_d0,
        U_M_imag_q0 => U_M_imag_q0,
        eigval_0_read => eigval_0_1_fu_264,
        eigval_1_read => eigval_1_1_fu_268,
        eigval_2_read => eigval_2_1_fu_272,
        eigval_3_read => eigval_3_1_fu_276,
        ap_return_0 => grp_eig_decompose_fu_1410_ap_return_0,
        ap_return_1 => grp_eig_decompose_fu_1410_ap_return_1,
        ap_return_2 => grp_eig_decompose_fu_1410_ap_return_2,
        ap_return_3 => grp_eig_decompose_fu_1410_ap_return_3);

    grp_fft_fu_1430 : component fft
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_fu_1430_ap_start,
        ap_done => grp_fft_fu_1430_ap_done,
        ap_idle => grp_fft_fu_1430_ap_idle,
        ap_ready => grp_fft_fu_1430_ap_ready,
        x_M_real_address0 => grp_fft_fu_1430_x_M_real_address0,
        x_M_real_ce0 => grp_fft_fu_1430_x_M_real_ce0,
        x_M_real_we0 => grp_fft_fu_1430_x_M_real_we0,
        x_M_real_d0 => grp_fft_fu_1430_x_M_real_d0,
        x_M_real_q0 => FFT_Buffer_M_real_q0,
        x_M_imag_address0 => grp_fft_fu_1430_x_M_imag_address0,
        x_M_imag_ce0 => grp_fft_fu_1430_x_M_imag_ce0,
        x_M_imag_we0 => grp_fft_fu_1430_x_M_imag_we0,
        x_M_imag_d0 => grp_fft_fu_1430_x_M_imag_d0,
        x_M_imag_q0 => FFT_Buffer_M_imag_q0);

    grp_sin_or_cos_double_s_fu_1444 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_1444_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_1444_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_1444_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_1444_ap_ready,
        t_in => reg_1600,
        do_cos => grp_sin_or_cos_double_s_fu_1444_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_1444_ap_return);

    grp_sin_or_cos_double_s_fu_1464 : component sin_or_cos_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sin_or_cos_double_s_fu_1464_ap_start,
        ap_done => grp_sin_or_cos_double_s_fu_1464_ap_done,
        ap_idle => grp_sin_or_cos_double_s_fu_1464_ap_idle,
        ap_ready => grp_sin_or_cos_double_s_fu_1464_ap_ready,
        t_in => reg_1600,
        do_cos => grp_sin_or_cos_double_s_fu_1464_do_cos,
        ap_return => grp_sin_or_cos_double_s_fu_1464_ap_return);

    grp_Autocorrelation_fu_1483 : component Autocorrelation
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Autocorrelation_fu_1483_ap_start,
        ap_done => grp_Autocorrelation_fu_1483_ap_done,
        ap_idle => grp_Autocorrelation_fu_1483_ap_idle,
        ap_ready => grp_Autocorrelation_fu_1483_ap_ready,
        X_M_real_address0 => grp_Autocorrelation_fu_1483_X_M_real_address0,
        X_M_real_ce0 => grp_Autocorrelation_fu_1483_X_M_real_ce0,
        X_M_real_q0 => Autocorr_Buffer_M_r_q0,
        X_M_real_address1 => grp_Autocorrelation_fu_1483_X_M_real_address1,
        X_M_real_ce1 => grp_Autocorrelation_fu_1483_X_M_real_ce1,
        X_M_real_q1 => Autocorr_Buffer_M_r_q1,
        X_M_imag_address0 => grp_Autocorrelation_fu_1483_X_M_imag_address0,
        X_M_imag_ce0 => grp_Autocorrelation_fu_1483_X_M_imag_ce0,
        X_M_imag_q0 => Autocorr_Buffer_M_i_q0,
        X_M_imag_address1 => grp_Autocorrelation_fu_1483_X_M_imag_address1,
        X_M_imag_ce1 => grp_Autocorrelation_fu_1483_X_M_imag_ce1,
        X_M_imag_q1 => Autocorr_Buffer_M_i_q1,
        Rx_M_real_address0 => grp_Autocorrelation_fu_1483_Rx_M_real_address0,
        Rx_M_real_ce0 => grp_Autocorrelation_fu_1483_Rx_M_real_ce0,
        Rx_M_real_we0 => grp_Autocorrelation_fu_1483_Rx_M_real_we0,
        Rx_M_real_d0 => grp_Autocorrelation_fu_1483_Rx_M_real_d0,
        Rx_M_imag_address0 => grp_Autocorrelation_fu_1483_Rx_M_imag_address0,
        Rx_M_imag_ce0 => grp_Autocorrelation_fu_1483_Rx_M_imag_ce0,
        Rx_M_imag_we0 => grp_Autocorrelation_fu_1483_Rx_M_imag_we0,
        Rx_M_imag_d0 => grp_Autocorrelation_fu_1483_Rx_M_imag_d0);

    grp_sort_eigval_fu_1491 : component sort_eigval
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sort_eigval_fu_1491_ap_start,
        ap_done => grp_sort_eigval_fu_1491_ap_done,
        ap_idle => grp_sort_eigval_fu_1491_ap_idle,
        ap_ready => grp_sort_eigval_fu_1491_ap_ready,
        eigval_0_read => eigval_0_reg_3325,
        eigval_1_read => eigval_1_reg_3330,
        eigval_2_read => eigval_2_reg_3335,
        eigval_3_read => eigval_3_reg_3340,
        sort_index_0_read => sort_index_0_1_fu_280,
        sort_index_1_read => sort_index_1_1_fu_284,
        sort_index_2_read => sort_index_2_1_fu_288,
        sort_index_3_read => sort_index_3_1_fu_292,
        ap_return_0 => grp_sort_eigval_fu_1491_ap_return_0,
        ap_return_1 => grp_sort_eigval_fu_1491_ap_return_1,
        ap_return_2 => grp_sort_eigval_fu_1491_ap_return_2,
        ap_return_3 => grp_sort_eigval_fu_1491_ap_return_3);

    music_faddfsub_32ibs_U226 : component music_faddfsub_32ibs
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1503_p0,
        din1 => grp_fu_1503_p1,
        opcode => grp_fu_1503_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_1503_p2);

    music_fadd_32ns_3ocq_U227 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1507_p0,
        din1 => grp_fu_1507_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1507_p2);

    music_fsub_32ns_3rcU_U228 : component music_fsub_32ns_3rcU
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i4_reg_3624,
        din1 => tmp_i_i1_108_reg_3629,
        ce => ap_const_logic_1,
        dout => grp_fu_1511_p2);

    music_fadd_32ns_3ocq_U229 : component music_fadd_32ns_3ocq
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_i_i1_reg_3634,
        din1 => tmp_2_i_i1_reg_3639,
        ce => ap_const_logic_1,
        dout => grp_fu_1515_p2);

    music_fmul_32ns_3jbC_U230 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1525_p0,
        din1 => grp_fu_1525_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1525_p2);

    music_fmul_32ns_3jbC_U231 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1529_p0,
        din1 => grp_fu_1529_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1529_p2);

    music_fmul_32ns_3jbC_U232 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1533_p0,
        din1 => grp_fu_1533_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1533_p2);

    music_fmul_32ns_3jbC_U233 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1537_p0,
        din1 => grp_fu_1537_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1537_p2);

    music_fmul_32ns_3jbC_U234 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_8_reg_3545,
        din1 => p_t_real_4_reg_3601,
        ce => ap_const_logic_1,
        dout => grp_fu_1541_p2);

    music_fmul_32ns_3jbC_U235 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_8_reg_3551,
        din1 => p_t_imag_4_fu_2718_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1545_p2);

    music_fmul_32ns_3jbC_U236 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_8_reg_3551,
        din1 => p_t_real_4_reg_3601,
        ce => ap_const_logic_1,
        dout => grp_fu_1549_p2);

    music_fmul_32ns_3jbC_U237 : component music_fmul_32ns_3jbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_8_reg_3545,
        din1 => p_t_imag_4_fu_2718_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1553_p2);

    music_fptrunc_64nkbM_U238 : component music_fptrunc_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_sin_or_cos_double_s_fu_1444_ap_return,
        ce => grp_fu_1561_ce,
        dout => grp_fu_1561_p1);

    music_fptrunc_64nkbM_U239 : component music_fptrunc_64nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_sin_or_cos_double_s_fu_1464_ap_return,
        ce => grp_fu_1566_ce,
        dout => grp_fu_1566_p1);

    music_fpext_32ns_WhU_U240 : component music_fpext_32ns_WhU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1571_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_1571_p1);

    music_dmul_64ns_6Xh4_U241 : component music_dmul_64ns_6Xh4
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1576_p0,
        din1 => grp_fu_1576_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1576_p2);

    music_ddiv_64ns_6lbW_U242 : component music_ddiv_64ns_6lbW
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1582_p0,
        din1 => grp_fu_1582_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1582_p2);

    music_mux_42_32_1_1_U243 : component music_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => sort_index_0_reg_3345,
        din1 => sort_index_1_reg_3350,
        din2 => sort_index_2_reg_3355,
        din3 => sort_index_3_reg_3360,
        din4 => tmp_fu_2499_p5,
        dout => tmp_fu_2499_p6);

    music_mux_42_32_1_1_U244 : component music_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_BEC00000,
        din1 => ap_const_lv32_BE000000,
        din2 => ap_const_lv32_3E000000,
        din3 => ap_const_lv32_3EC00000,
        din4 => trunc_ln250_reg_3452,
        dout => tmp_9_fu_2570_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Autocorrelation_fu_1483_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Autocorrelation_fu_1483_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln231_fu_2240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                    grp_Autocorrelation_fu_1483_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Autocorrelation_fu_1483_ap_ready = ap_const_logic_1)) then 
                    grp_Autocorrelation_fu_1483_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_eig_decompose_fu_1410_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_eig_decompose_fu_1410_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    grp_eig_decompose_fu_1410_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_eig_decompose_fu_1410_ap_ready = ap_const_logic_1)) then 
                    grp_eig_decompose_fu_1410_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_fu_1430_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_fu_1430_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln220_fu_2096_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    grp_fft_fu_1430_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_fu_1430_ap_ready = ap_const_logic_1)) then 
                    grp_fft_fu_1430_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_1444_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_1444_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                    grp_sin_or_cos_double_s_fu_1444_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_1444_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_1444_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sin_or_cos_double_s_fu_1464_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sin_or_cos_double_s_fu_1464_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
                    grp_sin_or_cos_double_s_fu_1464_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sin_or_cos_double_s_fu_1464_ap_ready = ap_const_logic_1)) then 
                    grp_sin_or_cos_double_s_fu_1464_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sort_eigval_fu_1491_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sort_eigval_fu_1491_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_eig_decompose_fu_1410_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
                    grp_sort_eigval_fu_1491_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sort_eigval_fu_1491_ap_ready = ap_const_logic_1)) then 
                    grp_sort_eigval_fu_1491_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    complex_M_imag_read_1_reg_1375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state183)) then 
                complex_M_imag_read_1_reg_1375 <= grp_fu_1507_p2;
            elsif (((icmp_ln270_fu_2869_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
                complex_M_imag_read_1_reg_1375 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    complex_M_imag_read_reg_1316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
                complex_M_imag_read_reg_1316 <= grp_fu_1507_p2;
            elsif (((icmp_ln261_fu_2763_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state150))) then 
                complex_M_imag_read_reg_1316 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    complex_M_real_read_1_reg_1387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state183)) then 
                complex_M_real_read_1_reg_1387 <= grp_fu_1503_p2;
            elsif (((icmp_ln270_fu_2869_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
                complex_M_real_read_1_reg_1387 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    complex_M_real_read_reg_1329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
                complex_M_real_read_reg_1329 <= grp_fu_1503_p2;
            elsif (((icmp_ln261_fu_2763_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state150))) then 
                complex_M_real_read_reg_1329 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i50_0_reg_1260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_2527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i50_0_reg_1260 <= ap_const_lv3_0;
            elsif (((icmp_ln256_fu_2643_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then 
                i50_0_reg_1260 <= i_reg_3503;
            end if; 
        end if;
    end process;

    i52_0_reg_1283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_2589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
                i52_0_reg_1283 <= ap_const_lv9_0;
            elsif (((icmp_ln261_fu_2763_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state150))) then 
                i52_0_reg_1283 <= i_5_reg_3667;
            end if; 
        end if;
    end process;

    i54_0_reg_1353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln260_fu_2739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then 
                i54_0_reg_1353 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
                i54_0_reg_1353 <= i_6_reg_3774;
            end if; 
        end if;
    end process;

    j44_0_reg_1136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_fu_2080_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                j44_0_reg_1136 <= ap_const_lv11_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j44_0_reg_1136 <= j_reg_3198;
            end if; 
        end if;
    end process;

    j45_0_reg_1148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                j45_0_reg_1148 <= j_3_reg_3211;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_fft_fu_1430_ap_done = ap_const_logic_1))) then 
                j45_0_reg_1148 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j51_0_reg_1272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
                j51_0_reg_1272 <= j_4_reg_3560;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
                j51_0_reg_1272 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j53_0_reg_1305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln264_fu_2794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state151))) then 
                j53_0_reg_1305 <= j_5_reg_3680;
            elsif (((icmp_ln260_fu_2739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state149))) then 
                j53_0_reg_1305 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    jj_0_reg_1159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_2869_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
                jj_0_reg_1159 <= jj_reg_3239;
            elsif (((icmp_ln218_fu_2052_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                jj_0_reg_1159 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    k55_0_reg_1399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state183)) then 
                k55_0_reg_1399 <= k_reg_3793;
            elsif (((icmp_ln270_fu_2869_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
                k55_0_reg_1399 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_0_reg_1342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state166)) then 
                k_0_reg_1342 <= k_1_reg_3703;
            elsif (((icmp_ln261_fu_2763_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state150))) then 
                k_0_reg_1342 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    l46_0_reg_1182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                l46_0_reg_1182 <= l_1_reg_3252;
            elsif (((icmp_ln230_fu_2224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                l46_0_reg_1182 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    l_0_reg_1114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_1_fu_2046_p2 = ap_const_lv1_1) and (icmp_ln195_fu_2040_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                l_0_reg_1114 <= ap_const_lv4_0;
            elsif (((icmp_ln219_fu_2080_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                l_0_reg_1114 <= l_reg_3118;
            end if; 
        end if;
    end process;

    n47_0_reg_1193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln231_fu_2240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
                n47_0_reg_1193 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                n47_0_reg_1193 <= n_reg_3265;
            end if; 
        end if;
    end process;

    n_0_reg_1125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln224_fu_2147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                n_0_reg_1125 <= n_1_reg_3184;
            elsif (((icmp_ln218_fu_2052_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                n_0_reg_1125 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln185_reg_884_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_1672_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln185_reg_884 <= add_ln185_fu_1660_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_ln185_reg_884 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    phi_ln187_1_reg_907_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln187_fu_1748_p2 = ap_const_lv1_1) and (icmp_ln187_1_fu_1754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln187_1_reg_907 <= add_ln187_1_reg_2969;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                phi_ln187_1_reg_907 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln187_2_reg_919_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln187_fu_1748_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln187_2_reg_919 <= add_ln187_2_fu_1729_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_ln187_2_reg_919 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln187_reg_895_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln185_fu_1672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln187_reg_895 <= ap_const_lv10_0;
            elsif (((icmp_ln187_1_fu_1754_p2 = ap_const_lv1_1) and (icmp_ln187_fu_1748_p2 = ap_const_lv1_1) and (icmp_ln187_2_fu_1760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln187_reg_895 <= add_ln187_reg_2959;
            end if; 
        end if;
    end process;

    phi_ln188_1_reg_942_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_fu_1792_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln188_1_reg_942 <= add_ln188_1_fu_1772_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                phi_ln188_1_reg_942 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln188_reg_930_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln187_2_fu_1760_p2 = ap_const_lv1_1) and (icmp_ln187_1_fu_1754_p2 = ap_const_lv1_1) and (icmp_ln187_fu_1748_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_ln188_reg_930 <= ap_const_lv4_0;
            elsif (((icmp_ln188_fu_1792_p2 = ap_const_lv1_1) and (icmp_ln188_1_fu_1798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln188_reg_930 <= add_ln188_reg_2993;
            end if; 
        end if;
    end process;

    phi_ln189_1_reg_965_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_fu_1830_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_ln189_1_reg_965 <= add_ln189_1_fu_1810_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln189_1_reg_965 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln189_reg_953_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln188_1_fu_1798_p2 = ap_const_lv1_1) and (icmp_ln188_fu_1792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                phi_ln189_reg_953 <= ap_const_lv2_0;
            elsif (((icmp_ln189_fu_1830_p2 = ap_const_lv1_1) and (icmp_ln189_1_fu_1836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_ln189_reg_953 <= add_ln189_reg_3009;
            end if; 
        end if;
    end process;

    phi_ln190_1_reg_988_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln190_fu_1868_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_ln190_1_reg_988 <= add_ln190_1_fu_1848_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                phi_ln190_1_reg_988 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln190_reg_976_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln189_1_fu_1836_p2 = ap_const_lv1_1) and (icmp_ln189_fu_1830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                phi_ln190_reg_976 <= ap_const_lv2_0;
            elsif (((icmp_ln190_fu_1868_p2 = ap_const_lv1_1) and (icmp_ln190_1_fu_1874_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_ln190_reg_976 <= add_ln190_reg_3025;
            end if; 
        end if;
    end process;

    phi_ln191_1_reg_1011_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                phi_ln191_1_reg_1011 <= xor_ln191_fu_1886_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_ln191_1_reg_1011 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    phi_ln191_reg_999_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln190_1_fu_1874_p2 = ap_const_lv1_1) and (icmp_ln190_fu_1868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                phi_ln191_reg_999 <= ap_const_lv2_0;
            elsif (((ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 = ap_const_lv1_1) and (icmp_ln191_fu_1906_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                phi_ln191_reg_999 <= add_ln191_reg_3041;
            end if; 
        end if;
    end process;

    phi_ln192_1_reg_1034_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_fu_1938_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                phi_ln192_1_reg_1034 <= add_ln192_1_fu_1918_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                phi_ln192_1_reg_1034 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln192_reg_1022_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln191_fu_1906_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                phi_ln192_reg_1022 <= ap_const_lv2_0;
            elsif (((icmp_ln192_fu_1938_p2 = ap_const_lv1_1) and (icmp_ln192_1_fu_1944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                phi_ln192_reg_1022 <= add_ln192_reg_3054;
            end if; 
        end if;
    end process;

    phi_ln193_1_reg_1057_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_fu_1976_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                phi_ln193_1_reg_1057 <= add_ln193_1_fu_1956_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                phi_ln193_1_reg_1057 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_ln193_reg_1045_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln192_1_fu_1944_p2 = ap_const_lv1_1) and (icmp_ln192_fu_1938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                phi_ln193_reg_1045 <= ap_const_lv9_0;
            elsif (((icmp_ln193_fu_1976_p2 = ap_const_lv1_1) and (icmp_ln193_1_fu_1982_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                phi_ln193_reg_1045 <= add_ln193_reg_3070;
            end if; 
        end if;
    end process;

    phi_ln194_reg_1068_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln193_1_fu_1982_p2 = ap_const_lv1_1) and (icmp_ln193_fu_1976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                phi_ln194_reg_1068 <= ap_const_lv9_0;
            elsif (((icmp_ln194_fu_2000_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_ln194_reg_1068 <= add_ln194_fu_1988_p2;
            end if; 
        end if;
    end process;

    phi_ln195_1_reg_1103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln195_fu_2040_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_ln195_1_reg_1103 <= add_ln195_1_fu_2018_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                phi_ln195_1_reg_1103 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_ln195_reg_1079_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_2000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_ln195_reg_1079 <= ap_const_lv2_0;
            elsif (((icmp_ln195_fu_2040_p2 = ap_const_lv1_1) and (icmp_ln195_1_fu_2046_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_ln195_reg_1079 <= add_ln195_reg_3099;
            end if; 
        end if;
    end process;

    phi_mul11_reg_1170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_2869_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state167))) then 
                phi_mul11_reg_1170 <= add_ln230_reg_3231;
            elsif (((icmp_ln218_fu_2052_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                phi_mul11_reg_1170 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_mul5_reg_1237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln249_fu_2543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                phi_mul5_reg_1237 <= add_ln248_reg_3439;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                phi_mul5_reg_1237 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_mul7_reg_1294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln255_fu_2589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then 
                phi_mul7_reg_1294 <= ap_const_lv17_0;
            elsif (((icmp_ln261_fu_2763_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state150))) then 
                phi_mul7_reg_1294 <= add_ln260_reg_3659;
            end if; 
        end if;
    end process;

    phi_mul9_reg_1364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln260_fu_2739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then 
                phi_mul9_reg_1364 <= ap_const_lv17_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
                phi_mul9_reg_1364 <= add_ln270_reg_3766;
            end if; 
        end if;
    end process;

    phi_mul_reg_1091_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln194_fu_2000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                phi_mul_reg_1091 <= ap_const_lv11_0;
            elsif (((icmp_ln195_fu_2040_p2 = ap_const_lv1_1) and (icmp_ln195_1_fu_2046_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_mul_reg_1091 <= add_ln195_2_reg_3094;
            end if; 
        end if;
    end process;

    x48_0_reg_1226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln249_fu_2543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                x48_0_reg_1226 <= x_1_reg_3447;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                x48_0_reg_1226 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    x_0_reg_1204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_fu_2468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                x_0_reg_1204 <= x_reg_3368;
            elsif (((grp_sort_eigval_fu_1491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                x_0_reg_1204 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    y49_0_reg_1249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_2527_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                y49_0_reg_1249 <= ap_const_lv9_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
                y49_0_reg_1249 <= y_reg_3460;
            end if; 
        end if;
    end process;

    y_0_reg_1215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln239_fu_2414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                y_0_reg_1215 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                y_0_reg_1215 <= y_1_reg_3406;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln261_fu_2763_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state150))) then
                AUU_M_imag_addr_2_reg_3695 <= zext_ln267_2_fu_2788_p1(11 - 1 downto 0);
                AUU_M_real_addr_2_reg_3690 <= zext_ln267_2_fu_2788_p1(11 - 1 downto 0);
                    zext_ln267_reg_3685(2 downto 0) <= zext_ln267_fu_2775_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln239_fu_2414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    Un_M_imag_addr_1_reg_3388(2 downto 1) <= zext_ln242_1_fu_2446_p1(3 - 1 downto 0)(2 downto 1);
                    Un_M_imag_addr_2_reg_3393(2 downto 1) <= tmp_33_fu_2458_p3(3 - 1 downto 0)(2 downto 1);
                    Un_M_real_addr_1_reg_3378(2 downto 1) <= zext_ln242_1_fu_2446_p1(3 - 1 downto 0)(2 downto 1);
                    Un_M_real_addr_2_reg_3383(2 downto 1) <= tmp_33_fu_2458_p3(3 - 1 downto 0)(2 downto 1);
                    zext_ln242_reg_3373(4 downto 2) <= zext_ln242_fu_2434_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state133)) then
                Un_M_imag_load_2_reg_3596 <= Un_M_imag_q1;
                Un_M_imag_load_reg_3607 <= Un_M_imag_q0;
                p_t_real_4_reg_3601 <= Un_M_real_q0;
                p_t_real_reg_3590 <= Un_M_real_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln1027_1_reg_2974 <= add_ln1027_1_fu_1724_p2;
                add_ln187_1_reg_2969 <= add_ln187_1_fu_1714_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    add_ln1027_reg_2964(35 downto 1) <= add_ln1027_fu_1708_p2(35 downto 1);
                add_ln187_reg_2959 <= add_ln187_fu_1678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln188_reg_2993 <= add_ln188_fu_1766_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln189_reg_3009 <= add_ln189_fu_1804_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln190_reg_3025 <= add_ln190_fu_1842_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln191_reg_3041 <= add_ln191_fu_1880_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln192_reg_3054 <= add_ln192_fu_1912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln193_reg_3070 <= add_ln193_fu_1950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln195_2_reg_3094 <= add_ln195_2_fu_2006_p2;
                add_ln195_reg_3099 <= add_ln195_fu_2012_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln224_fu_2147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                add_ln225_2_reg_3216 <= add_ln225_2_fu_2208_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln230_reg_3231 <= add_ln230_fu_2218_p2;
                jj_reg_3239 <= jj_fu_2230_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln232_fu_2264_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                add_ln233_1_reg_3280 <= add_ln233_1_fu_2296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                add_ln248_reg_3439 <= add_ln248_fu_2521_p2;
                x_1_reg_3447 <= x_1_fu_2533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln249_fu_2543_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                add_ln250_reg_3465 <= add_ln250_fu_2564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln256_fu_2643_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                add_ln257_reg_3585 <= add_ln257_fu_2689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state149)) then
                add_ln260_reg_3659 <= add_ln260_fu_2733_p2;
                i_5_reg_3667 <= i_5_fu_2745_p2;
                trunc_ln260_reg_3654 <= trunc_ln260_fu_2729_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln264_fu_2794_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state151))) then
                add_ln265_reg_3708 <= add_ln265_fu_2822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state167)) then
                add_ln270_reg_3766 <= add_ln270_fu_2863_p2;
                i_6_reg_3774 <= i_6_fu_2875_p2;
                trunc_ln270_reg_3761 <= trunc_ln270_fu_2859_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state142)) then
                complex_M_imag_writ_reg_3649 <= grp_fu_1515_p2;
                complex_M_real_writ_reg_3644 <= grp_fu_1511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_eig_decompose_fu_1410_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                eigval_0_1_fu_264 <= grp_eig_decompose_fu_1410_ap_return_0;
                eigval_0_reg_3325 <= grp_eig_decompose_fu_1410_ap_return_0;
                eigval_1_1_fu_268 <= grp_eig_decompose_fu_1410_ap_return_1;
                eigval_1_reg_3330 <= grp_eig_decompose_fu_1410_ap_return_1;
                eigval_2_1_fu_272 <= grp_eig_decompose_fu_1410_ap_return_2;
                eigval_2_reg_3335 <= grp_eig_decompose_fu_1410_ap_return_2;
                eigval_3_1_fu_276 <= grp_eig_decompose_fu_1410_ap_return_3;
                eigval_3_reg_3340 <= grp_eig_decompose_fu_1410_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state130)) then
                i_reg_3503 <= i_fu_2595_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                icmp_ln241_reg_3421 <= icmp_ln241_fu_2509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln241_fu_2509_p2 = ap_const_lv1_0) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                icmp_ln243_reg_3425 <= icmp_ln243_fu_2515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                j_3_reg_3211 <= j_3_fu_2153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state132)) then
                j_4_reg_3560 <= j_4_fu_2649_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state150)) then
                j_5_reg_3680 <= j_5_fu_2769_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                j_reg_3198 <= j_fu_2102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state151)) then
                k_1_reg_3703 <= k_1_fu_2800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state168)) then
                k_reg_3793 <= k_fu_2903_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                l_1_reg_3252 <= l_1_fu_2246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                l_reg_3118 <= l_fu_2058_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                n_1_reg_3184 <= n_1_fu_2086_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                n_reg_3265 <= n_fu_2270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state169)) then
                p_r_M_imag_10_reg_3834 <= AUU_M_imag_q0;
                p_r_M_real_10_reg_3828 <= AUU_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state131)) then
                p_r_M_imag_8_reg_3551 <= Un_M_imag_q1;
                p_r_M_imag_reg_3539 <= Un_M_imag_q0;
                p_r_M_real_8_reg_3545 <= Un_M_real_q1;
                p_r_M_real_reg_3533 <= Un_M_real_q0;
                    zext_ln257_1_reg_3528(4 downto 2) <= zext_ln257_1_fu_2639_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state40))) then
                reg_1588 <= grp_fu_1571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state55))) then
                reg_1594 <= grp_fu_1576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state87))) then
                reg_1600 <= grp_fu_1582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state128_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state128)) or ((grp_sin_or_cos_double_s_fu_1444_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89)))) then
                reg_1606 <= grp_sin_or_cos_double_s_fu_1444_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state173) or (ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state137))) then
                reg_1612 <= grp_fu_1525_p2;
                reg_1617 <= grp_fu_1529_p2;
                reg_1622 <= grp_fu_1533_p2;
                reg_1627 <= grp_fu_1537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state189) or (ap_const_logic_1 = ap_CS_fsm_state178) or (ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state147) or (ap_const_logic_1 = ap_CS_fsm_state142))) then
                reg_1632 <= grp_fu_1503_p2;
                reg_1640 <= grp_fu_1507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state169) or (ap_const_logic_1 = ap_CS_fsm_state152))) then
                reg_1648 <= a_theta_M_real_q0;
                reg_1656 <= a_theta_M_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_sort_eigval_fu_1491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                sort_index_0_1_fu_280 <= grp_sort_eigval_fu_1491_ap_return_0;
                sort_index_0_reg_3345 <= grp_sort_eigval_fu_1491_ap_return_0;
                sort_index_1_1_fu_284 <= grp_sort_eigval_fu_1491_ap_return_1;
                sort_index_1_reg_3350 <= grp_sort_eigval_fu_1491_ap_return_1;
                sort_index_2_1_fu_288 <= grp_sort_eigval_fu_1491_ap_return_2;
                sort_index_2_reg_3355 <= grp_sort_eigval_fu_1491_ap_return_2;
                sort_index_3_1_fu_292 <= grp_sort_eigval_fu_1491_ap_return_3;
                sort_index_3_reg_3360 <= grp_sort_eigval_fu_1491_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state137)) then
                tmp_1_i_i1_reg_3634 <= grp_fu_1549_p2;
                tmp_2_i_i1_reg_3639 <= grp_fu_1553_p2;
                tmp_i_i1_108_reg_3629 <= grp_fu_1545_p2;
                tmp_i_i4_reg_3624 <= grp_fu_1541_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                tmp_3_reg_3434 <= grp_fu_1576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                tmp_6_reg_3485 <= grp_fu_1571_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                tmp_7_reg_3490 <= grp_fu_1576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln248_fu_2527_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                trunc_ln250_reg_3452 <= trunc_ln250_fu_2539_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln273_fu_2897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state168))) then
                w_M_imag_addr_1_reg_3823 <= zext_ln274_reg_3779(9 - 1 downto 0);
                w_M_real_addr_1_reg_3818 <= zext_ln274_reg_3779(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state184)) then
                w_M_imag_load_reg_3861 <= w_M_imag_q0;
                w_M_real_load_reg_3856 <= w_M_real_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                x_reg_3368 <= x_fu_2420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                y_1_reg_3406 <= y_1_fu_2474_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                y_reg_3460 <= y_fu_2549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln218_fu_2052_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    zext_ln219_reg_3128(3 downto 0) <= zext_ln219_fu_2076_p1(3 downto 0);
                    zext_ln221_reg_3123(13 downto 10) <= zext_ln221_fu_2072_p1(13 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln219_fu_2080_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    zext_ln220_reg_3189(2 downto 0) <= zext_ln220_fu_2092_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln231_fu_2240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    zext_ln232_reg_3257(5 downto 2) <= zext_ln232_fu_2260_p1(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln230_fu_2224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    zext_ln233_reg_3244(10 downto 0) <= zext_ln233_fu_2236_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln260_fu_2739_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state149))) then
                    zext_ln261_reg_3672(10 downto 2) <= zext_ln261_fu_2759_p1(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln270_fu_2869_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state167))) then
                    zext_ln273_reg_3785(10 downto 2) <= zext_ln273_fu_2893_p1(10 downto 2);
                    zext_ln274_reg_3779(8 downto 0) <= zext_ln274_fu_2881_p1(8 downto 0);
            end if;
        end if;
    end process;
    add_ln1027_reg_2964(0) <= '0';
    zext_ln221_reg_3123(9 downto 0) <= "0000000000";
    zext_ln221_reg_3123(14) <= '0';
    zext_ln219_reg_3128(14 downto 4) <= "00000000000";
    zext_ln220_reg_3189(16 downto 3) <= "00000000000000";
    zext_ln233_reg_3244(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln232_reg_3257(1 downto 0) <= "00";
    zext_ln232_reg_3257(6) <= '0';
    zext_ln242_reg_3373(1 downto 0) <= "00";
    zext_ln242_reg_3373(5) <= '0';
    Un_M_real_addr_1_reg_3378(0) <= '0';
    Un_M_real_addr_2_reg_3383(0) <= '1';
    Un_M_imag_addr_1_reg_3388(0) <= '0';
    Un_M_imag_addr_2_reg_3393(0) <= '1';
    zext_ln257_1_reg_3528(1 downto 0) <= "00";
    zext_ln257_1_reg_3528(5) <= '0';
    zext_ln261_reg_3672(1 downto 0) <= "00";
    zext_ln261_reg_3672(11) <= '0';
    zext_ln267_reg_3685(5 downto 3) <= "000";
    zext_ln274_reg_3779(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln273_reg_3785(1 downto 0) <= "00";
    zext_ln273_reg_3785(11) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state89, grp_sin_or_cos_double_s_fu_1444_ap_done, ap_CS_fsm_state128, ap_block_state128_on_subcall_done, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, icmp_ln218_fu_2052_p2, ap_CS_fsm_state22, icmp_ln219_fu_2080_p2, ap_CS_fsm_state23, icmp_ln220_fu_2096_p2, ap_CS_fsm_state26, icmp_ln224_fu_2147_p2, ap_CS_fsm_state28, icmp_ln230_fu_2224_p2, ap_CS_fsm_state29, icmp_ln231_fu_2240_p2, ap_CS_fsm_state30, icmp_ln232_fu_2264_p2, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_ap_done, ap_CS_fsm_state35, grp_sort_eigval_fu_1491_ap_done, ap_CS_fsm_state36, icmp_ln239_fu_2414_p2, ap_CS_fsm_state37, icmp_ln240_fu_2468_p2, ap_CS_fsm_state47, icmp_ln248_fu_2527_p2, ap_CS_fsm_state48, icmp_ln249_fu_2543_p2, ap_CS_fsm_state130, icmp_ln255_fu_2589_p2, ap_CS_fsm_state132, icmp_ln256_fu_2643_p2, ap_CS_fsm_state149, icmp_ln260_fu_2739_p2, ap_CS_fsm_state150, icmp_ln261_fu_2763_p2, ap_CS_fsm_state151, icmp_ln264_fu_2794_p2, ap_CS_fsm_state167, icmp_ln270_fu_2869_p2, ap_CS_fsm_state168, icmp_ln273_fu_2897_p2, grp_fft_fu_1430_ap_done, grp_Autocorrelation_fu_1483_ap_done, icmp_ln185_fu_1672_p2, icmp_ln187_fu_1748_p2, icmp_ln187_1_fu_1754_p2, icmp_ln187_2_fu_1760_p2, icmp_ln188_fu_1792_p2, icmp_ln188_1_fu_1798_p2, icmp_ln189_fu_1830_p2, icmp_ln189_1_fu_1836_p2, icmp_ln190_fu_1868_p2, icmp_ln190_1_fu_1874_p2, ap_phi_mux_phi_ln191_1_phi_fu_1015_p4, icmp_ln191_fu_1906_p2, icmp_ln192_fu_1938_p2, icmp_ln192_1_fu_1944_p2, icmp_ln193_fu_1976_p2, icmp_ln193_1_fu_1982_p2, icmp_ln194_fu_2000_p2, icmp_ln195_fu_2040_p2, icmp_ln195_1_fu_2046_p2, ap_CS_fsm_state25, ap_CS_fsm_state32)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln185_fu_1672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln187_2_fu_1760_p2 = ap_const_lv1_1) and (icmp_ln187_1_fu_1754_p2 = ap_const_lv1_1) and (icmp_ln187_fu_1748_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((icmp_ln187_1_fu_1754_p2 = ap_const_lv1_1) and (icmp_ln187_fu_1748_p2 = ap_const_lv1_1) and (icmp_ln187_2_fu_1760_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((icmp_ln187_fu_1748_p2 = ap_const_lv1_1) and (icmp_ln187_1_fu_1754_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln188_1_fu_1798_p2 = ap_const_lv1_1) and (icmp_ln188_fu_1792_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                elsif (((icmp_ln188_fu_1792_p2 = ap_const_lv1_1) and (icmp_ln188_1_fu_1798_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln189_1_fu_1836_p2 = ap_const_lv1_1) and (icmp_ln189_fu_1830_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                elsif (((icmp_ln189_fu_1830_p2 = ap_const_lv1_1) and (icmp_ln189_1_fu_1836_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((icmp_ln190_1_fu_1874_p2 = ap_const_lv1_1) and (icmp_ln190_fu_1868_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((icmp_ln190_fu_1868_p2 = ap_const_lv1_1) and (icmp_ln190_1_fu_1874_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((icmp_ln191_fu_1906_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                elsif (((ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 = ap_const_lv1_1) and (icmp_ln191_fu_1906_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln192_1_fu_1944_p2 = ap_const_lv1_1) and (icmp_ln192_fu_1938_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((icmp_ln192_fu_1938_p2 = ap_const_lv1_1) and (icmp_ln192_1_fu_1944_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((icmp_ln193_1_fu_1982_p2 = ap_const_lv1_1) and (icmp_ln193_fu_1976_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                elsif (((icmp_ln193_fu_1976_p2 = ap_const_lv1_1) and (icmp_ln193_1_fu_1982_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln194_fu_2000_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((icmp_ln195_1_fu_2046_p2 = ap_const_lv1_1) and (icmp_ln195_fu_2040_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((icmp_ln195_fu_2040_p2 = ap_const_lv1_1) and (icmp_ln195_1_fu_2046_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((icmp_ln218_fu_2052_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln219_fu_2080_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((icmp_ln220_fu_2096_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (grp_fft_fu_1430_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln224_fu_2147_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln230_fu_2224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln231_fu_2240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln232_fu_2264_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (grp_Autocorrelation_fu_1483_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((grp_eig_decompose_fu_1410_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((grp_sort_eigval_fu_1491_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((icmp_ln239_fu_2414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state37 => 
                if (((icmp_ln240_fu_2468_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln248_fu_2527_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                if (((icmp_ln249_fu_2543_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state49;
                end if;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                if (((grp_sin_or_cos_double_s_fu_1444_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state89))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                if (((ap_const_boolean_0 = ap_block_state128_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state128))) then
                    ap_NS_fsm <= ap_ST_fsm_state129;
                else
                    ap_NS_fsm <= ap_ST_fsm_state128;
                end if;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state130 => 
                if (((icmp_ln255_fu_2589_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state130))) then
                    ap_NS_fsm <= ap_ST_fsm_state149;
                else
                    ap_NS_fsm <= ap_ST_fsm_state131;
                end if;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                if (((icmp_ln256_fu_2643_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state132))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                else
                    ap_NS_fsm <= ap_ST_fsm_state133;
                end if;
            when ap_ST_fsm_state133 => 
                ap_NS_fsm <= ap_ST_fsm_state134;
            when ap_ST_fsm_state134 => 
                ap_NS_fsm <= ap_ST_fsm_state135;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                ap_NS_fsm <= ap_ST_fsm_state137;
            when ap_ST_fsm_state137 => 
                ap_NS_fsm <= ap_ST_fsm_state138;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state141 => 
                ap_NS_fsm <= ap_ST_fsm_state142;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state143;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                ap_NS_fsm <= ap_ST_fsm_state146;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state147;
            when ap_ST_fsm_state147 => 
                ap_NS_fsm <= ap_ST_fsm_state148;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state149 => 
                if (((icmp_ln260_fu_2739_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then
                    ap_NS_fsm <= ap_ST_fsm_state167;
                else
                    ap_NS_fsm <= ap_ST_fsm_state150;
                end if;
            when ap_ST_fsm_state150 => 
                if (((icmp_ln261_fu_2763_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state150))) then
                    ap_NS_fsm <= ap_ST_fsm_state149;
                else
                    ap_NS_fsm <= ap_ST_fsm_state151;
                end if;
            when ap_ST_fsm_state151 => 
                if (((icmp_ln264_fu_2794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state151))) then
                    ap_NS_fsm <= ap_ST_fsm_state150;
                else
                    ap_NS_fsm <= ap_ST_fsm_state152;
                end if;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state154 => 
                ap_NS_fsm <= ap_ST_fsm_state155;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state156;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                ap_NS_fsm <= ap_ST_fsm_state159;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state160;
            when ap_ST_fsm_state160 => 
                ap_NS_fsm <= ap_ST_fsm_state161;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_state163;
            when ap_ST_fsm_state163 => 
                ap_NS_fsm <= ap_ST_fsm_state164;
            when ap_ST_fsm_state164 => 
                ap_NS_fsm <= ap_ST_fsm_state165;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_state166;
            when ap_ST_fsm_state166 => 
                ap_NS_fsm <= ap_ST_fsm_state151;
            when ap_ST_fsm_state167 => 
                if (((icmp_ln270_fu_2869_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state167))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state168;
                end if;
            when ap_ST_fsm_state168 => 
                if (((icmp_ln273_fu_2897_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state168))) then
                    ap_NS_fsm <= ap_ST_fsm_state184;
                else
                    ap_NS_fsm <= ap_ST_fsm_state169;
                end if;
            when ap_ST_fsm_state169 => 
                ap_NS_fsm <= ap_ST_fsm_state170;
            when ap_ST_fsm_state170 => 
                ap_NS_fsm <= ap_ST_fsm_state171;
            when ap_ST_fsm_state171 => 
                ap_NS_fsm <= ap_ST_fsm_state172;
            when ap_ST_fsm_state172 => 
                ap_NS_fsm <= ap_ST_fsm_state173;
            when ap_ST_fsm_state173 => 
                ap_NS_fsm <= ap_ST_fsm_state174;
            when ap_ST_fsm_state174 => 
                ap_NS_fsm <= ap_ST_fsm_state175;
            when ap_ST_fsm_state175 => 
                ap_NS_fsm <= ap_ST_fsm_state176;
            when ap_ST_fsm_state176 => 
                ap_NS_fsm <= ap_ST_fsm_state177;
            when ap_ST_fsm_state177 => 
                ap_NS_fsm <= ap_ST_fsm_state178;
            when ap_ST_fsm_state178 => 
                ap_NS_fsm <= ap_ST_fsm_state179;
            when ap_ST_fsm_state179 => 
                ap_NS_fsm <= ap_ST_fsm_state180;
            when ap_ST_fsm_state180 => 
                ap_NS_fsm <= ap_ST_fsm_state181;
            when ap_ST_fsm_state181 => 
                ap_NS_fsm <= ap_ST_fsm_state182;
            when ap_ST_fsm_state182 => 
                ap_NS_fsm <= ap_ST_fsm_state183;
            when ap_ST_fsm_state183 => 
                ap_NS_fsm <= ap_ST_fsm_state168;
            when ap_ST_fsm_state184 => 
                ap_NS_fsm <= ap_ST_fsm_state185;
            when ap_ST_fsm_state185 => 
                ap_NS_fsm <= ap_ST_fsm_state186;
            when ap_ST_fsm_state186 => 
                ap_NS_fsm <= ap_ST_fsm_state187;
            when ap_ST_fsm_state187 => 
                ap_NS_fsm <= ap_ST_fsm_state188;
            when ap_ST_fsm_state188 => 
                ap_NS_fsm <= ap_ST_fsm_state189;
            when ap_ST_fsm_state189 => 
                ap_NS_fsm <= ap_ST_fsm_state190;
            when ap_ST_fsm_state190 => 
                ap_NS_fsm <= ap_ST_fsm_state167;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    AUU_M_imag_address0_assign_proc : process(ap_CS_fsm_state17, AUU_M_imag_addr_2_reg_3695, ap_CS_fsm_state151, ap_CS_fsm_state168, zext_ln1027_8_fu_1970_p1, zext_ln274_2_fu_2918_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            AUU_M_imag_address0 <= zext_ln274_2_fu_2918_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            AUU_M_imag_address0 <= AUU_M_imag_addr_2_reg_3695;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            AUU_M_imag_address0 <= zext_ln1027_8_fu_1970_p1(11 - 1 downto 0);
        else 
            AUU_M_imag_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    AUU_M_imag_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state151, ap_CS_fsm_state168)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            AUU_M_imag_ce0 <= ap_const_logic_1;
        else 
            AUU_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AUU_M_imag_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state151, complex_M_imag_read_reg_1316)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            AUU_M_imag_d0 <= complex_M_imag_read_reg_1316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            AUU_M_imag_d0 <= ap_const_lv32_0;
        else 
            AUU_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AUU_M_imag_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state151, icmp_ln264_fu_2794_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((icmp_ln264_fu_2794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state151)))) then 
            AUU_M_imag_we0 <= ap_const_logic_1;
        else 
            AUU_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    AUU_M_real_address0_assign_proc : process(ap_CS_fsm_state17, AUU_M_real_addr_2_reg_3690, ap_CS_fsm_state151, ap_CS_fsm_state168, zext_ln1027_8_fu_1970_p1, zext_ln274_2_fu_2918_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            AUU_M_real_address0 <= zext_ln274_2_fu_2918_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            AUU_M_real_address0 <= AUU_M_real_addr_2_reg_3690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            AUU_M_real_address0 <= zext_ln1027_8_fu_1970_p1(11 - 1 downto 0);
        else 
            AUU_M_real_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    AUU_M_real_ce0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state151, ap_CS_fsm_state168)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            AUU_M_real_ce0 <= ap_const_logic_1;
        else 
            AUU_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AUU_M_real_d0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state151, complex_M_real_read_reg_1329)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            AUU_M_real_d0 <= complex_M_real_read_reg_1329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            AUU_M_real_d0 <= ap_const_lv32_0;
        else 
            AUU_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    AUU_M_real_we0_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state151, icmp_ln264_fu_2794_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((icmp_ln264_fu_2794_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state151)))) then 
            AUU_M_real_we0 <= ap_const_logic_1;
        else 
            AUU_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Autocorr_Buffer_M_i_address0_assign_proc : process(ap_CS_fsm_state7, grp_Autocorrelation_fu_1483_X_M_imag_address0, ap_CS_fsm_state31, ap_CS_fsm_state32, zext_ln1027_3_fu_1786_p1, zext_ln233_4_fu_2301_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Autocorr_Buffer_M_i_address0 <= zext_ln233_4_fu_2301_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Autocorr_Buffer_M_i_address0 <= zext_ln1027_3_fu_1786_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Autocorr_Buffer_M_i_address0 <= grp_Autocorrelation_fu_1483_X_M_imag_address0;
        else 
            Autocorr_Buffer_M_i_address0 <= "XXXXXX";
        end if; 
    end process;


    Autocorr_Buffer_M_i_ce0_assign_proc : process(ap_CS_fsm_state7, grp_Autocorrelation_fu_1483_X_M_imag_ce0, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            Autocorr_Buffer_M_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Autocorr_Buffer_M_i_ce0 <= grp_Autocorrelation_fu_1483_X_M_imag_ce0;
        else 
            Autocorr_Buffer_M_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Autocorr_Buffer_M_i_ce1_assign_proc : process(grp_Autocorrelation_fu_1483_X_M_imag_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Autocorr_Buffer_M_i_ce1 <= grp_Autocorrelation_fu_1483_X_M_imag_ce1;
        else 
            Autocorr_Buffer_M_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Autocorr_Buffer_M_i_d0_assign_proc : process(ap_CS_fsm_state7, Xj_f_M_imag_q0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Autocorr_Buffer_M_i_d0 <= Xj_f_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Autocorr_Buffer_M_i_d0 <= ap_const_lv32_0;
        else 
            Autocorr_Buffer_M_i_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Autocorr_Buffer_M_i_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            Autocorr_Buffer_M_i_we0 <= ap_const_logic_1;
        else 
            Autocorr_Buffer_M_i_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Autocorr_Buffer_M_r_address0_assign_proc : process(ap_CS_fsm_state7, grp_Autocorrelation_fu_1483_X_M_real_address0, ap_CS_fsm_state31, ap_CS_fsm_state32, zext_ln1027_3_fu_1786_p1, zext_ln233_4_fu_2301_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Autocorr_Buffer_M_r_address0 <= zext_ln233_4_fu_2301_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Autocorr_Buffer_M_r_address0 <= zext_ln1027_3_fu_1786_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Autocorr_Buffer_M_r_address0 <= grp_Autocorrelation_fu_1483_X_M_real_address0;
        else 
            Autocorr_Buffer_M_r_address0 <= "XXXXXX";
        end if; 
    end process;


    Autocorr_Buffer_M_r_ce0_assign_proc : process(ap_CS_fsm_state7, grp_Autocorrelation_fu_1483_X_M_real_ce0, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            Autocorr_Buffer_M_r_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Autocorr_Buffer_M_r_ce0 <= grp_Autocorrelation_fu_1483_X_M_real_ce0;
        else 
            Autocorr_Buffer_M_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Autocorr_Buffer_M_r_ce1_assign_proc : process(grp_Autocorrelation_fu_1483_X_M_real_ce1, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Autocorr_Buffer_M_r_ce1 <= grp_Autocorrelation_fu_1483_X_M_real_ce1;
        else 
            Autocorr_Buffer_M_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Autocorr_Buffer_M_r_d0_assign_proc : process(ap_CS_fsm_state7, Xj_f_M_real_q0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            Autocorr_Buffer_M_r_d0 <= Xj_f_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Autocorr_Buffer_M_r_d0 <= ap_const_lv32_0;
        else 
            Autocorr_Buffer_M_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Autocorr_Buffer_M_r_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            Autocorr_Buffer_M_r_we0 <= ap_const_logic_1;
        else 
            Autocorr_Buffer_M_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_M_imag_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state26, grp_fft_fu_1430_x_M_imag_address0, ap_CS_fsm_state24, ap_CS_fsm_state25, zext_ln185_fu_1666_p1, zext_ln221_1_fu_2141_p1, zext_ln225_fu_2159_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            FFT_Buffer_M_imag_address0 <= zext_ln225_fu_2159_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            FFT_Buffer_M_imag_address0 <= zext_ln221_1_fu_2141_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_Buffer_M_imag_address0 <= zext_ln185_fu_1666_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_imag_address0 <= grp_fft_fu_1430_x_M_imag_address0;
        else 
            FFT_Buffer_M_imag_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFT_Buffer_M_imag_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state26, grp_fft_fu_1430_x_M_imag_ce0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            FFT_Buffer_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_imag_ce0 <= grp_fft_fu_1430_x_M_imag_ce0;
        else 
            FFT_Buffer_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_M_imag_d0_assign_proc : process(ap_CS_fsm_state2, grp_fft_fu_1430_x_M_imag_d0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            FFT_Buffer_M_imag_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_imag_d0 <= grp_fft_fu_1430_x_M_imag_d0;
        else 
            FFT_Buffer_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    FFT_Buffer_M_imag_we0_assign_proc : process(ap_CS_fsm_state2, grp_fft_fu_1430_x_M_imag_we0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            FFT_Buffer_M_imag_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_imag_we0 <= grp_fft_fu_1430_x_M_imag_we0;
        else 
            FFT_Buffer_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_M_real_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state26, grp_fft_fu_1430_x_M_real_address0, ap_CS_fsm_state24, ap_CS_fsm_state25, zext_ln185_fu_1666_p1, zext_ln221_1_fu_2141_p1, zext_ln225_fu_2159_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            FFT_Buffer_M_real_address0 <= zext_ln225_fu_2159_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            FFT_Buffer_M_real_address0 <= zext_ln221_1_fu_2141_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_Buffer_M_real_address0 <= zext_ln185_fu_1666_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_real_address0 <= grp_fft_fu_1430_x_M_real_address0;
        else 
            FFT_Buffer_M_real_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    FFT_Buffer_M_real_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state26, grp_fft_fu_1430_x_M_real_ce0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            FFT_Buffer_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_real_ce0 <= grp_fft_fu_1430_x_M_real_ce0;
        else 
            FFT_Buffer_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    FFT_Buffer_M_real_d0_assign_proc : process(X_q0, ap_CS_fsm_state2, grp_fft_fu_1430_x_M_real_d0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            FFT_Buffer_M_real_d0 <= X_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            FFT_Buffer_M_real_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_real_d0 <= grp_fft_fu_1430_x_M_real_d0;
        else 
            FFT_Buffer_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    FFT_Buffer_M_real_we0_assign_proc : process(ap_CS_fsm_state2, grp_fft_fu_1430_x_M_real_we0, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            FFT_Buffer_M_real_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            FFT_Buffer_M_real_we0 <= grp_fft_fu_1430_x_M_real_we0;
        else 
            FFT_Buffer_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Rx_M_imag_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_Rx_M_imag_address0, grp_Autocorrelation_fu_1483_Rx_M_imag_address0, ap_CS_fsm_state32, zext_ln1027_4_fu_1824_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_imag_address0 <= zext_ln1027_4_fu_1824_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_imag_address0 <= grp_Autocorrelation_fu_1483_Rx_M_imag_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Rx_M_imag_address0 <= grp_eig_decompose_fu_1410_Rx_M_imag_address0;
        else 
            Rx_M_imag_address0 <= "XXXX";
        end if; 
    end process;


    Rx_M_imag_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_Rx_M_imag_ce0, grp_Autocorrelation_fu_1483_Rx_M_imag_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_imag_ce0 <= grp_Autocorrelation_fu_1483_Rx_M_imag_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Rx_M_imag_ce0 <= grp_eig_decompose_fu_1410_Rx_M_imag_ce0;
        else 
            Rx_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Rx_M_imag_d0_assign_proc : process(ap_CS_fsm_state9, grp_Autocorrelation_fu_1483_Rx_M_imag_d0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_imag_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_imag_d0 <= grp_Autocorrelation_fu_1483_Rx_M_imag_d0;
        else 
            Rx_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Rx_M_imag_we0_assign_proc : process(ap_CS_fsm_state9, grp_Autocorrelation_fu_1483_Rx_M_imag_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_imag_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_imag_we0 <= grp_Autocorrelation_fu_1483_Rx_M_imag_we0;
        else 
            Rx_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Rx_M_real_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_Rx_M_real_address0, grp_Autocorrelation_fu_1483_Rx_M_real_address0, ap_CS_fsm_state32, zext_ln1027_4_fu_1824_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_real_address0 <= zext_ln1027_4_fu_1824_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_real_address0 <= grp_Autocorrelation_fu_1483_Rx_M_real_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Rx_M_real_address0 <= grp_eig_decompose_fu_1410_Rx_M_real_address0;
        else 
            Rx_M_real_address0 <= "XXXX";
        end if; 
    end process;


    Rx_M_real_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_Rx_M_real_ce0, grp_Autocorrelation_fu_1483_Rx_M_real_ce0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_real_ce0 <= grp_Autocorrelation_fu_1483_Rx_M_real_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            Rx_M_real_ce0 <= grp_eig_decompose_fu_1410_Rx_M_real_ce0;
        else 
            Rx_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Rx_M_real_d0_assign_proc : process(ap_CS_fsm_state9, grp_Autocorrelation_fu_1483_Rx_M_real_d0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_real_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_real_d0 <= grp_Autocorrelation_fu_1483_Rx_M_real_d0;
        else 
            Rx_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Rx_M_real_we0_assign_proc : process(ap_CS_fsm_state9, grp_Autocorrelation_fu_1483_Rx_M_real_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rx_M_real_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            Rx_M_real_we0 <= grp_Autocorrelation_fu_1483_Rx_M_real_we0;
        else 
            Rx_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UU_M_imag_address0_assign_proc : process(ap_CS_fsm_state152, ap_CS_fsm_state15, ap_CS_fsm_state148, zext_ln1027_7_fu_1932_p1, zext_ln257_4_fu_2724_p1, zext_ln265_2_fu_2838_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
            UU_M_imag_address0 <= zext_ln265_2_fu_2838_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            UU_M_imag_address0 <= zext_ln257_4_fu_2724_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            UU_M_imag_address0 <= zext_ln1027_7_fu_1932_p1(4 - 1 downto 0);
        else 
            UU_M_imag_address0 <= "XXXX";
        end if; 
    end process;


    UU_M_imag_ce0_assign_proc : process(ap_CS_fsm_state152, ap_CS_fsm_state15, ap_CS_fsm_state148)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state148))) then 
            UU_M_imag_ce0 <= ap_const_logic_1;
        else 
            UU_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UU_M_imag_d0_assign_proc : process(reg_1640, ap_CS_fsm_state15, ap_CS_fsm_state148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            UU_M_imag_d0 <= reg_1640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            UU_M_imag_d0 <= ap_const_lv32_0;
        else 
            UU_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UU_M_imag_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state148)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state148))) then 
            UU_M_imag_we0 <= ap_const_logic_1;
        else 
            UU_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    UU_M_real_address0_assign_proc : process(ap_CS_fsm_state152, ap_CS_fsm_state15, ap_CS_fsm_state148, zext_ln1027_7_fu_1932_p1, zext_ln257_4_fu_2724_p1, zext_ln265_2_fu_2838_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state152)) then 
            UU_M_real_address0 <= zext_ln265_2_fu_2838_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            UU_M_real_address0 <= zext_ln257_4_fu_2724_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            UU_M_real_address0 <= zext_ln1027_7_fu_1932_p1(4 - 1 downto 0);
        else 
            UU_M_real_address0 <= "XXXX";
        end if; 
    end process;


    UU_M_real_ce0_assign_proc : process(ap_CS_fsm_state152, ap_CS_fsm_state15, ap_CS_fsm_state148)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state148))) then 
            UU_M_real_ce0 <= ap_const_logic_1;
        else 
            UU_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    UU_M_real_d0_assign_proc : process(reg_1632, ap_CS_fsm_state15, ap_CS_fsm_state148)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state148)) then 
            UU_M_real_d0 <= reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            UU_M_real_d0 <= ap_const_lv32_0;
        else 
            UU_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    UU_M_real_we0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state148)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state148))) then 
            UU_M_real_we0 <= ap_const_logic_1;
        else 
            UU_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_M_imag_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, ap_CS_fsm_state37, icmp_ln240_fu_2468_p2, icmp_ln241_fu_2509_p2, icmp_ln243_fu_2515_p2, grp_eig_decompose_fu_1410_U_M_imag_address0, zext_ln1027_5_fu_1862_p1, zext_ln242_3_fu_2489_p1)
    begin
        if ((((icmp_ln243_fu_2515_p2 = ap_const_lv1_1) and (icmp_ln241_fu_2509_p2 = ap_const_lv1_0) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((icmp_ln241_fu_2509_p2 = ap_const_lv1_1) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            U_M_imag_address0 <= zext_ln242_3_fu_2489_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_M_imag_address0 <= zext_ln1027_5_fu_1862_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_imag_address0 <= grp_eig_decompose_fu_1410_U_M_imag_address0;
        else 
            U_M_imag_address0 <= "XXXX";
        end if; 
    end process;


    U_M_imag_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, ap_CS_fsm_state37, icmp_ln240_fu_2468_p2, icmp_ln241_fu_2509_p2, icmp_ln243_fu_2515_p2, grp_eig_decompose_fu_1410_U_M_imag_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln243_fu_2515_p2 = ap_const_lv1_1) and (icmp_ln241_fu_2509_p2 = ap_const_lv1_0) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((icmp_ln241_fu_2509_p2 = ap_const_lv1_1) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            U_M_imag_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_imag_ce0 <= grp_eig_decompose_fu_1410_U_M_imag_ce0;
        else 
            U_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_M_imag_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_U_M_imag_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_M_imag_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_imag_d0 <= grp_eig_decompose_fu_1410_U_M_imag_d0;
        else 
            U_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    U_M_imag_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_U_M_imag_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_M_imag_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_imag_we0 <= grp_eig_decompose_fu_1410_U_M_imag_we0;
        else 
            U_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_M_real_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, ap_CS_fsm_state37, icmp_ln240_fu_2468_p2, icmp_ln241_fu_2509_p2, icmp_ln243_fu_2515_p2, grp_eig_decompose_fu_1410_U_M_real_address0, zext_ln1027_5_fu_1862_p1, zext_ln242_3_fu_2489_p1)
    begin
        if ((((icmp_ln243_fu_2515_p2 = ap_const_lv1_1) and (icmp_ln241_fu_2509_p2 = ap_const_lv1_0) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((icmp_ln241_fu_2509_p2 = ap_const_lv1_1) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            U_M_real_address0 <= zext_ln242_3_fu_2489_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_M_real_address0 <= zext_ln1027_5_fu_1862_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_real_address0 <= grp_eig_decompose_fu_1410_U_M_real_address0;
        else 
            U_M_real_address0 <= "XXXX";
        end if; 
    end process;


    U_M_real_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, ap_CS_fsm_state37, icmp_ln240_fu_2468_p2, icmp_ln241_fu_2509_p2, icmp_ln243_fu_2515_p2, grp_eig_decompose_fu_1410_U_M_real_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((icmp_ln243_fu_2515_p2 = ap_const_lv1_1) and (icmp_ln241_fu_2509_p2 = ap_const_lv1_0) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)) or ((icmp_ln241_fu_2509_p2 = ap_const_lv1_1) and (icmp_ln240_fu_2468_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state37)))) then 
            U_M_real_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_real_ce0 <= grp_eig_decompose_fu_1410_U_M_real_ce0;
        else 
            U_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_M_real_d0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_U_M_real_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_M_real_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_real_d0 <= grp_eig_decompose_fu_1410_U_M_real_d0;
        else 
            U_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    U_M_real_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state34, grp_eig_decompose_fu_1410_U_M_real_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            U_M_real_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            U_M_real_we0 <= grp_eig_decompose_fu_1410_U_M_real_we0;
        else 
            U_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Un_M_imag_address0_assign_proc : process(ap_CS_fsm_state13, Un_M_imag_addr_1_reg_3388, Un_M_imag_addr_2_reg_3393, icmp_ln241_reg_3421, icmp_ln243_reg_3425, ap_CS_fsm_state130, ap_CS_fsm_state132, ap_CS_fsm_state38, zext_ln1027_6_fu_1900_p1, zext_ln257_fu_2609_p1, tmp_50_fu_2679_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            Un_M_imag_address0 <= tmp_50_fu_2679_p3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            Un_M_imag_address0 <= zext_ln257_fu_2609_p1(3 - 1 downto 0);
        elsif (((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            Un_M_imag_address0 <= Un_M_imag_addr_1_reg_3388;
        elsif (((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            Un_M_imag_address0 <= Un_M_imag_addr_2_reg_3393;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Un_M_imag_address0 <= zext_ln1027_6_fu_1900_p1(3 - 1 downto 0);
        else 
            Un_M_imag_address0 <= "XXX";
        end if; 
    end process;


    Un_M_imag_address1_assign_proc : process(ap_CS_fsm_state130, ap_CS_fsm_state132, tmp_46_fu_2621_p3, zext_ln257_3_fu_2667_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            Un_M_imag_address1 <= zext_ln257_3_fu_2667_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            Un_M_imag_address1 <= tmp_46_fu_2621_p3(3 - 1 downto 0);
        else 
            Un_M_imag_address1 <= "XXX";
        end if; 
    end process;


    Un_M_imag_ce0_assign_proc : process(ap_CS_fsm_state13, icmp_ln241_reg_3421, icmp_ln243_reg_3425, ap_CS_fsm_state130, ap_CS_fsm_state132, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            Un_M_imag_ce0 <= ap_const_logic_1;
        else 
            Un_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Un_M_imag_ce1_assign_proc : process(ap_CS_fsm_state130, ap_CS_fsm_state132)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            Un_M_imag_ce1 <= ap_const_logic_1;
        else 
            Un_M_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Un_M_imag_d0_assign_proc : process(ap_CS_fsm_state13, icmp_ln241_reg_3421, icmp_ln243_reg_3425, U_M_imag_q0, ap_CS_fsm_state38)
    begin
        if ((((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            Un_M_imag_d0 <= U_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Un_M_imag_d0 <= ap_const_lv32_0;
        else 
            Un_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Un_M_imag_we0_assign_proc : process(ap_CS_fsm_state13, icmp_ln241_reg_3421, icmp_ln243_reg_3425, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            Un_M_imag_we0 <= ap_const_logic_1;
        else 
            Un_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Un_M_real_address0_assign_proc : process(ap_CS_fsm_state13, Un_M_real_addr_1_reg_3378, Un_M_real_addr_2_reg_3383, icmp_ln241_reg_3421, icmp_ln243_reg_3425, ap_CS_fsm_state130, ap_CS_fsm_state132, ap_CS_fsm_state38, zext_ln1027_6_fu_1900_p1, zext_ln257_fu_2609_p1, tmp_50_fu_2679_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            Un_M_real_address0 <= tmp_50_fu_2679_p3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            Un_M_real_address0 <= zext_ln257_fu_2609_p1(3 - 1 downto 0);
        elsif (((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            Un_M_real_address0 <= Un_M_real_addr_1_reg_3378;
        elsif (((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            Un_M_real_address0 <= Un_M_real_addr_2_reg_3383;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Un_M_real_address0 <= zext_ln1027_6_fu_1900_p1(3 - 1 downto 0);
        else 
            Un_M_real_address0 <= "XXX";
        end if; 
    end process;


    Un_M_real_address1_assign_proc : process(ap_CS_fsm_state130, ap_CS_fsm_state132, tmp_46_fu_2621_p3, zext_ln257_3_fu_2667_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            Un_M_real_address1 <= zext_ln257_3_fu_2667_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            Un_M_real_address1 <= tmp_46_fu_2621_p3(3 - 1 downto 0);
        else 
            Un_M_real_address1 <= "XXX";
        end if; 
    end process;


    Un_M_real_ce0_assign_proc : process(ap_CS_fsm_state13, icmp_ln241_reg_3421, icmp_ln243_reg_3425, ap_CS_fsm_state130, ap_CS_fsm_state132, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            Un_M_real_ce0 <= ap_const_logic_1;
        else 
            Un_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Un_M_real_ce1_assign_proc : process(ap_CS_fsm_state130, ap_CS_fsm_state132)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state132) or (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            Un_M_real_ce1 <= ap_const_logic_1;
        else 
            Un_M_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Un_M_real_d0_assign_proc : process(ap_CS_fsm_state13, icmp_ln241_reg_3421, icmp_ln243_reg_3425, U_M_real_q0, ap_CS_fsm_state38)
    begin
        if ((((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            Un_M_real_d0 <= U_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Un_M_real_d0 <= ap_const_lv32_0;
        else 
            Un_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Un_M_real_we0_assign_proc : process(ap_CS_fsm_state13, icmp_ln241_reg_3421, icmp_ln243_reg_3425, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln241_reg_3421 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38)) or ((icmp_ln243_reg_3425 = ap_const_lv1_1) and (icmp_ln241_reg_3421 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38)))) then 
            Un_M_real_we0 <= ap_const_logic_1;
        else 
            Un_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    X_address0 <= sext_ln221_1_fu_2136_p1(16 - 1 downto 0);

    X_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_ce0 <= ap_const_logic_1;
        else 
            X_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Xj_f_M_imag_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state27, zext_ln1027_10_fu_1742_p1, zext_ln225_3_fu_2213_p1, zext_ln233_3_fu_2290_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Xj_f_M_imag_address0 <= zext_ln233_3_fu_2290_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Xj_f_M_imag_address0 <= zext_ln225_3_fu_2213_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Xj_f_M_imag_address0 <= zext_ln1027_10_fu_1742_p1(16 - 1 downto 0);
        else 
            Xj_f_M_imag_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Xj_f_M_imag_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Xj_f_M_imag_ce0 <= ap_const_logic_1;
        else 
            Xj_f_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Xj_f_M_imag_d0_assign_proc : process(ap_CS_fsm_state5, FFT_Buffer_M_imag_q0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Xj_f_M_imag_d0 <= FFT_Buffer_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Xj_f_M_imag_d0 <= ap_const_lv32_0;
        else 
            Xj_f_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Xj_f_M_imag_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Xj_f_M_imag_we0 <= ap_const_logic_1;
        else 
            Xj_f_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Xj_f_M_real_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state27, zext_ln1027_10_fu_1742_p1, zext_ln225_3_fu_2213_p1, zext_ln233_3_fu_2290_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            Xj_f_M_real_address0 <= zext_ln233_3_fu_2290_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Xj_f_M_real_address0 <= zext_ln225_3_fu_2213_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Xj_f_M_real_address0 <= zext_ln1027_10_fu_1742_p1(16 - 1 downto 0);
        else 
            Xj_f_M_real_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Xj_f_M_real_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state30, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Xj_f_M_real_ce0 <= ap_const_logic_1;
        else 
            Xj_f_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Xj_f_M_real_d0_assign_proc : process(ap_CS_fsm_state5, FFT_Buffer_M_real_q0, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            Xj_f_M_real_d0 <= FFT_Buffer_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Xj_f_M_real_d0 <= ap_const_lv32_0;
        else 
            Xj_f_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Xj_f_M_real_we0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            Xj_f_M_real_we0 <= ap_const_logic_1;
        else 
            Xj_f_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_theta_M_imag_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state151, ap_CS_fsm_state168, ap_CS_fsm_state129, zext_ln1027_12_fu_2034_p1, zext_ln250_2_fu_2584_p1, zext_ln265_3_fu_2832_p1, zext_ln274_3_fu_2929_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            a_theta_M_imag_address0 <= zext_ln274_3_fu_2929_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            a_theta_M_imag_address0 <= zext_ln265_3_fu_2832_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            a_theta_M_imag_address0 <= zext_ln250_2_fu_2584_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_theta_M_imag_address0 <= zext_ln1027_12_fu_2034_p1(11 - 1 downto 0);
        else 
            a_theta_M_imag_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_theta_M_imag_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state151, ap_CS_fsm_state168, ap_CS_fsm_state129)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state129))) then 
            a_theta_M_imag_ce0 <= ap_const_logic_1;
        else 
            a_theta_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_theta_M_imag_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state129, grp_fu_1566_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            a_theta_M_imag_d0 <= grp_fu_1566_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_theta_M_imag_d0 <= ap_const_lv32_0;
        else 
            a_theta_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_theta_M_imag_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state129)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state129))) then 
            a_theta_M_imag_we0 <= ap_const_logic_1;
        else 
            a_theta_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_theta_M_real_address0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state151, ap_CS_fsm_state168, ap_CS_fsm_state129, zext_ln1027_12_fu_2034_p1, zext_ln250_2_fu_2584_p1, zext_ln265_3_fu_2832_p1, zext_ln274_3_fu_2929_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            a_theta_M_real_address0 <= zext_ln274_3_fu_2929_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state151)) then 
            a_theta_M_real_address0 <= zext_ln265_3_fu_2832_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            a_theta_M_real_address0 <= zext_ln250_2_fu_2584_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_theta_M_real_address0 <= zext_ln1027_12_fu_2034_p1(11 - 1 downto 0);
        else 
            a_theta_M_real_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    a_theta_M_real_ce0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state151, ap_CS_fsm_state168, ap_CS_fsm_state129)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state151) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state129))) then 
            a_theta_M_real_ce0 <= ap_const_logic_1;
        else 
            a_theta_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_theta_M_real_d0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state129, grp_fu_1561_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            a_theta_M_real_d0 <= grp_fu_1561_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            a_theta_M_real_d0 <= ap_const_lv32_0;
        else 
            a_theta_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    a_theta_M_real_we0_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state129)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state129))) then 
            a_theta_M_real_we0 <= ap_const_logic_1;
        else 
            a_theta_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1027_1_fu_1724_p2 <= std_logic_vector(unsigned(zext_ln1027_9_fu_1720_p1) + unsigned(add_ln1027_reg_2964));
    add_ln1027_2_fu_2028_p2 <= std_logic_vector(unsigned(phi_mul_reg_1091) + unsigned(zext_ln1027_11_fu_2024_p1));
    add_ln1027_fu_1708_p2 <= std_logic_vector(unsigned(zext_ln1027_fu_1692_p1) + unsigned(zext_ln1027_2_fu_1704_p1));
    add_ln185_fu_1660_p2 <= std_logic_vector(unsigned(phi_ln185_reg_884) + unsigned(ap_const_lv10_1));
    add_ln187_1_fu_1714_p2 <= std_logic_vector(unsigned(phi_ln187_1_reg_907) + unsigned(ap_const_lv4_1));
    add_ln187_2_fu_1729_p2 <= std_logic_vector(unsigned(phi_ln187_2_reg_919) + unsigned(ap_const_lv2_1));
    add_ln187_fu_1678_p2 <= std_logic_vector(unsigned(phi_ln187_reg_895) + unsigned(ap_const_lv10_1));
    add_ln188_1_fu_1772_p2 <= std_logic_vector(unsigned(phi_ln188_1_reg_942) + unsigned(ap_const_lv2_1));
    add_ln188_fu_1766_p2 <= std_logic_vector(unsigned(phi_ln188_reg_930) + unsigned(ap_const_lv4_1));
    add_ln189_1_fu_1810_p2 <= std_logic_vector(unsigned(phi_ln189_1_reg_965) + unsigned(ap_const_lv2_1));
    add_ln189_fu_1804_p2 <= std_logic_vector(unsigned(phi_ln189_reg_953) + unsigned(ap_const_lv2_1));
    add_ln190_1_fu_1848_p2 <= std_logic_vector(unsigned(phi_ln190_1_reg_988) + unsigned(ap_const_lv2_1));
    add_ln190_fu_1842_p2 <= std_logic_vector(unsigned(phi_ln190_reg_976) + unsigned(ap_const_lv2_1));
    add_ln191_fu_1880_p2 <= std_logic_vector(unsigned(phi_ln191_reg_999) + unsigned(ap_const_lv2_1));
    add_ln192_1_fu_1918_p2 <= std_logic_vector(unsigned(phi_ln192_1_reg_1034) + unsigned(ap_const_lv2_1));
    add_ln192_fu_1912_p2 <= std_logic_vector(unsigned(phi_ln192_reg_1022) + unsigned(ap_const_lv2_1));
    add_ln193_1_fu_1956_p2 <= std_logic_vector(unsigned(phi_ln193_1_reg_1057) + unsigned(ap_const_lv2_1));
    add_ln193_fu_1950_p2 <= std_logic_vector(unsigned(phi_ln193_reg_1045) + unsigned(ap_const_lv9_1));
    add_ln194_fu_1988_p2 <= std_logic_vector(unsigned(phi_ln194_reg_1068) + unsigned(ap_const_lv9_1));
    add_ln195_1_fu_2018_p2 <= std_logic_vector(unsigned(phi_ln195_1_reg_1103) + unsigned(ap_const_lv9_1));
    add_ln195_2_fu_2006_p2 <= std_logic_vector(unsigned(phi_mul_reg_1091) + unsigned(ap_const_lv11_169));
    add_ln195_fu_2012_p2 <= std_logic_vector(unsigned(phi_ln195_reg_1079) + unsigned(ap_const_lv2_1));
    add_ln221_1_fu_2131_p2 <= std_logic_vector(unsigned(zext_ln220_reg_3189) + unsigned(tmp_30_fu_2123_p3));
    add_ln221_fu_2118_p2 <= std_logic_vector(signed(sext_ln221_fu_2114_p1) + signed(zext_ln221_reg_3123));
    add_ln225_1_fu_2195_p2 <= std_logic_vector(unsigned(add_ln225_fu_2189_p2) + unsigned(zext_ln219_reg_3128));
    add_ln225_2_fu_2208_p2 <= std_logic_vector(unsigned(tmp_57_cast_fu_2200_p3) + unsigned(zext_ln220_reg_3189));
    add_ln225_fu_2189_p2 <= std_logic_vector(unsigned(zext_ln225_2_fu_2185_p1) + unsigned(zext_ln225_1_fu_2173_p1));
    add_ln230_fu_2218_p2 <= std_logic_vector(unsigned(phi_mul11_reg_1170) + unsigned(ap_const_lv16_2C));
    add_ln233_1_fu_2296_p2 <= std_logic_vector(unsigned(zext_ln232_reg_3257) + unsigned(zext_ln233_1_fu_2276_p1));
    add_ln233_fu_2284_p2 <= std_logic_vector(unsigned(phi_mul11_reg_1170) + unsigned(zext_ln233_2_fu_2280_p1));
    add_ln242_fu_2484_p2 <= std_logic_vector(unsigned(zext_ln242_reg_3373) + unsigned(zext_ln242_2_fu_2480_p1));
    add_ln248_fu_2521_p2 <= std_logic_vector(unsigned(phi_mul5_reg_1237) + unsigned(ap_const_lv11_169));
    add_ln250_fu_2564_p2 <= std_logic_vector(unsigned(phi_mul5_reg_1237) + unsigned(zext_ln250_1_fu_2560_p1));
    add_ln257_fu_2689_p2 <= std_logic_vector(unsigned(zext_ln257_2_fu_2655_p1) + unsigned(zext_ln257_1_reg_3528));
    add_ln260_fu_2733_p2 <= std_logic_vector(unsigned(ap_const_lv17_169) + unsigned(phi_mul7_reg_1294));
    add_ln265_1_fu_2827_p2 <= std_logic_vector(unsigned(zext_ln265_fu_2806_p1) + unsigned(trunc_ln260_reg_3654));
    add_ln265_fu_2822_p2 <= std_logic_vector(unsigned(zext_ln267_reg_3685) + unsigned(zext_ln265_1_fu_2818_p1));
    add_ln267_fu_2783_p2 <= std_logic_vector(unsigned(zext_ln261_reg_3672) + unsigned(zext_ln267_1_fu_2779_p1));
    add_ln270_fu_2863_p2 <= std_logic_vector(unsigned(ap_const_lv17_169) + unsigned(phi_mul9_reg_1364));
    add_ln274_1_fu_2924_p2 <= std_logic_vector(unsigned(trunc_ln270_reg_3761) + unsigned(zext_ln274_1_fu_2909_p1));
    add_ln274_fu_2913_p2 <= std_logic_vector(unsigned(zext_ln273_reg_3785) + unsigned(zext_ln274_1_fu_2909_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state156 <= ap_CS_fsm(155);
    ap_CS_fsm_state157 <= ap_CS_fsm(156);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state162 <= ap_CS_fsm(161);
    ap_CS_fsm_state166 <= ap_CS_fsm(165);
    ap_CS_fsm_state167 <= ap_CS_fsm(166);
    ap_CS_fsm_state168 <= ap_CS_fsm(167);
    ap_CS_fsm_state169 <= ap_CS_fsm(168);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state170 <= ap_CS_fsm(169);
    ap_CS_fsm_state173 <= ap_CS_fsm(172);
    ap_CS_fsm_state174 <= ap_CS_fsm(173);
    ap_CS_fsm_state178 <= ap_CS_fsm(177);
    ap_CS_fsm_state179 <= ap_CS_fsm(178);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state183 <= ap_CS_fsm(182);
    ap_CS_fsm_state184 <= ap_CS_fsm(183);
    ap_CS_fsm_state185 <= ap_CS_fsm(184);
    ap_CS_fsm_state189 <= ap_CS_fsm(188);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state190 <= ap_CS_fsm(189);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);

    ap_block_state128_on_subcall_done_assign_proc : process(grp_sin_or_cos_double_s_fu_1444_ap_done, grp_sin_or_cos_double_s_fu_1464_ap_done)
    begin
                ap_block_state128_on_subcall_done <= ((grp_sin_or_cos_double_s_fu_1464_ap_done = ap_const_logic_0) or (grp_sin_or_cos_double_s_fu_1444_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state28, icmp_ln230_fu_2224_p2)
    begin
        if (((icmp_ln230_fu_2224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_phi_ln191_1_phi_fu_1015_p4 <= phi_ln191_1_reg_1011;

    ap_ready_assign_proc : process(ap_CS_fsm_state28, icmp_ln230_fu_2224_p2)
    begin
        if (((icmp_ln230_fu_2224_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln667_2_fu_2709_p1 <= Un_M_imag_load_reg_3607;
    bitcast_ln667_4_fu_2935_p1 <= reg_1656;
    bitcast_ln667_6_fu_2843_p1 <= reg_1656;
    bitcast_ln667_fu_2694_p1 <= Un_M_imag_load_2_reg_3596;
    fc_address0 <= zext_ln233_reg_3244(10 - 1 downto 0);

    fc_ce0_assign_proc : process(ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            fc_ce0 <= ap_const_logic_1;
        else 
            fc_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_Autocorrelation_fu_1483_ap_start <= grp_Autocorrelation_fu_1483_ap_start_reg;
    grp_eig_decompose_fu_1410_ap_start <= grp_eig_decompose_fu_1410_ap_start_reg;
    grp_fft_fu_1430_ap_start <= grp_fft_fu_1430_ap_start_reg;

    grp_fu_1503_opcode_assign_proc : process(ap_CS_fsm_state138, ap_CS_fsm_state143, ap_CS_fsm_state157, ap_CS_fsm_state162, ap_CS_fsm_state174, ap_CS_fsm_state179, ap_CS_fsm_state185)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state174) or (ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            grp_fu_1503_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state185) or (ap_const_logic_1 = ap_CS_fsm_state179) or (ap_const_logic_1 = ap_CS_fsm_state162) or (ap_const_logic_1 = ap_CS_fsm_state143))) then 
            grp_fu_1503_opcode <= ap_const_lv2_0;
        else 
            grp_fu_1503_opcode <= "XX";
        end if; 
    end process;


    grp_fu_1503_p0_assign_proc : process(reg_1612, reg_1632, w_M_real_load_reg_3856, complex_M_real_read_reg_1329, complex_M_real_read_1_reg_1387, ap_CS_fsm_state138, ap_CS_fsm_state143, ap_CS_fsm_state157, ap_CS_fsm_state162, ap_CS_fsm_state174, ap_CS_fsm_state179, ap_CS_fsm_state185)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state185)) then 
            grp_fu_1503_p0 <= w_M_real_load_reg_3856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state179)) then 
            grp_fu_1503_p0 <= complex_M_real_read_1_reg_1387;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
            grp_fu_1503_p0 <= complex_M_real_read_reg_1329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_fu_1503_p0 <= reg_1632;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state174) or (ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            grp_fu_1503_p0 <= reg_1612;
        else 
            grp_fu_1503_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1503_p1_assign_proc : process(reg_1617, reg_1632, complex_M_real_writ_reg_3644, complex_M_real_read_1_reg_1387, ap_CS_fsm_state138, ap_CS_fsm_state143, ap_CS_fsm_state157, ap_CS_fsm_state162, ap_CS_fsm_state174, ap_CS_fsm_state179, ap_CS_fsm_state185)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state185)) then 
            grp_fu_1503_p1 <= complex_M_real_read_1_reg_1387;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state179) or (ap_const_logic_1 = ap_CS_fsm_state162))) then 
            grp_fu_1503_p1 <= reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_fu_1503_p1 <= complex_M_real_writ_reg_3644;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state174) or (ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            grp_fu_1503_p1 <= reg_1617;
        else 
            grp_fu_1503_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1507_p0_assign_proc : process(reg_1622, reg_1640, w_M_imag_load_reg_3861, complex_M_imag_read_reg_1316, complex_M_imag_read_1_reg_1375, ap_CS_fsm_state138, ap_CS_fsm_state143, ap_CS_fsm_state157, ap_CS_fsm_state162, ap_CS_fsm_state174, ap_CS_fsm_state179, ap_CS_fsm_state185)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state185)) then 
            grp_fu_1507_p0 <= w_M_imag_load_reg_3861;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state179)) then 
            grp_fu_1507_p0 <= complex_M_imag_read_1_reg_1375;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
            grp_fu_1507_p0 <= complex_M_imag_read_reg_1316;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_fu_1507_p0 <= reg_1640;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state174) or (ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            grp_fu_1507_p0 <= reg_1622;
        else 
            grp_fu_1507_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1507_p1_assign_proc : process(reg_1627, reg_1640, complex_M_imag_writ_reg_3649, complex_M_imag_read_1_reg_1375, ap_CS_fsm_state138, ap_CS_fsm_state143, ap_CS_fsm_state157, ap_CS_fsm_state162, ap_CS_fsm_state174, ap_CS_fsm_state179, ap_CS_fsm_state185)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state185)) then 
            grp_fu_1507_p1 <= complex_M_imag_read_1_reg_1375;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state179) or (ap_const_logic_1 = ap_CS_fsm_state162))) then 
            grp_fu_1507_p1 <= reg_1640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            grp_fu_1507_p1 <= complex_M_imag_writ_reg_3649;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state174) or (ap_const_logic_1 = ap_CS_fsm_state157) or (ap_const_logic_1 = ap_CS_fsm_state138))) then 
            grp_fu_1507_p1 <= reg_1627;
        else 
            grp_fu_1507_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1525_p0_assign_proc : process(reg_1648, p_r_M_real_reg_3533, ap_CS_fsm_state134, ap_CS_fsm_state153, p_r_M_real_10_reg_3828, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1525_p0 <= p_r_M_real_10_reg_3828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1525_p0 <= reg_1648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1525_p0 <= p_r_M_real_reg_3533;
        else 
            grp_fu_1525_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1525_p1_assign_proc : process(reg_1648, p_t_real_reg_3590, ap_CS_fsm_state134, ap_CS_fsm_state153, UU_M_real_q0, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1525_p1 <= reg_1648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1525_p1 <= UU_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1525_p1 <= p_t_real_reg_3590;
        else 
            grp_fu_1525_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1529_p0_assign_proc : process(p_r_M_imag_reg_3539, ap_CS_fsm_state134, p_r_M_imag_11_fu_2853_p1, ap_CS_fsm_state153, p_r_M_imag_10_reg_3834, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1529_p0 <= p_r_M_imag_10_reg_3834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1529_p0 <= p_r_M_imag_11_fu_2853_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1529_p0 <= p_r_M_imag_reg_3539;
        else 
            grp_fu_1529_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1529_p1_assign_proc : process(p_t_imag_fu_2703_p1, ap_CS_fsm_state134, ap_CS_fsm_state153, UU_M_imag_q0, p_t_imag_5_fu_2945_p1, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1529_p1 <= p_t_imag_5_fu_2945_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1529_p1 <= UU_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1529_p1 <= p_t_imag_fu_2703_p1;
        else 
            grp_fu_1529_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1533_p0_assign_proc : process(p_r_M_imag_reg_3539, ap_CS_fsm_state134, p_r_M_imag_11_fu_2853_p1, ap_CS_fsm_state153, p_r_M_imag_10_reg_3834, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1533_p0 <= p_r_M_imag_10_reg_3834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1533_p0 <= p_r_M_imag_11_fu_2853_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1533_p0 <= p_r_M_imag_reg_3539;
        else 
            grp_fu_1533_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1533_p1_assign_proc : process(reg_1648, p_t_real_reg_3590, ap_CS_fsm_state134, ap_CS_fsm_state153, UU_M_real_q0, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1533_p1 <= reg_1648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1533_p1 <= UU_M_real_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1533_p1 <= p_t_real_reg_3590;
        else 
            grp_fu_1533_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1537_p0_assign_proc : process(reg_1648, p_r_M_real_reg_3533, ap_CS_fsm_state134, ap_CS_fsm_state153, p_r_M_real_10_reg_3828, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1537_p0 <= p_r_M_real_10_reg_3828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1537_p0 <= reg_1648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1537_p0 <= p_r_M_real_reg_3533;
        else 
            grp_fu_1537_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1537_p1_assign_proc : process(p_t_imag_fu_2703_p1, ap_CS_fsm_state134, ap_CS_fsm_state153, UU_M_imag_q0, p_t_imag_5_fu_2945_p1, ap_CS_fsm_state170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state170)) then 
            grp_fu_1537_p1 <= p_t_imag_5_fu_2945_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_fu_1537_p1 <= UU_M_imag_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            grp_fu_1537_p1 <= p_t_imag_fu_2703_p1;
        else 
            grp_fu_1537_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1561_ce_assign_proc : process(ap_CS_fsm_state128, ap_block_state128_on_subcall_done, ap_CS_fsm_state129)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state129) or ((ap_const_boolean_0 = ap_block_state128_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state128)))) then 
            grp_fu_1561_ce <= ap_const_logic_1;
        else 
            grp_fu_1561_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1566_ce_assign_proc : process(ap_CS_fsm_state128, ap_block_state128_on_subcall_done, ap_CS_fsm_state129)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state129) or ((ap_const_boolean_0 = ap_block_state128_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state128)))) then 
            grp_fu_1566_ce <= ap_const_logic_1;
        else 
            grp_fu_1566_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1571_p0_assign_proc : process(fc_q0, theta_q0, ap_CS_fsm_state49, ap_CS_fsm_state39, ap_CS_fsm_state48, tmp_9_fu_2570_p6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1571_p0 <= theta_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1571_p0 <= tmp_9_fu_2570_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_1571_p0 <= fc_q0;
        else 
            grp_fu_1571_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1576_p0_assign_proc : process(reg_1588, reg_1594, tmp_3_reg_3434, tmp_6_reg_3485, ap_CS_fsm_state50, ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_1576_p0 <= reg_1594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_1576_p0 <= tmp_6_reg_3485;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1576_p0 <= tmp_3_reg_3434;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_1576_p0 <= reg_1588;
        else 
            grp_fu_1576_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1576_p1_assign_proc : process(reg_1588, reg_1606, ap_CS_fsm_state50, ap_CS_fsm_state41, ap_CS_fsm_state51, ap_CS_fsm_state90)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            grp_fu_1576_p1 <= reg_1606;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            grp_fu_1576_p1 <= ap_const_lv64_400921FB4D12D84A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_1576_p1 <= reg_1588;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            grp_fu_1576_p1 <= ap_const_lv64_401921FB4D12D84A;
        else 
            grp_fu_1576_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1582_p0_assign_proc : process(reg_1594, tmp_7_reg_3490, ap_CS_fsm_state57, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_1582_p0 <= reg_1594;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_1582_p0 <= tmp_7_reg_3490;
        else 
            grp_fu_1582_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1582_p1_assign_proc : process(ap_CS_fsm_state57, ap_CS_fsm_state96)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_1582_p1 <= ap_const_lv64_4075400000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            grp_fu_1582_p1 <= ap_const_lv64_4066800000000000;
        else 
            grp_fu_1582_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_1444_ap_start <= grp_sin_or_cos_double_s_fu_1444_ap_start_reg;

    grp_sin_or_cos_double_s_fu_1444_do_cos_assign_proc : process(ap_CS_fsm_state89, ap_CS_fsm_state128)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            grp_sin_or_cos_double_s_fu_1444_do_cos <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            grp_sin_or_cos_double_s_fu_1444_do_cos <= ap_const_logic_0;
        else 
            grp_sin_or_cos_double_s_fu_1444_do_cos <= 'X';
        end if; 
    end process;

    grp_sin_or_cos_double_s_fu_1464_ap_start <= grp_sin_or_cos_double_s_fu_1464_ap_start_reg;
    grp_sin_or_cos_double_s_fu_1464_do_cos <= ap_const_logic_0;
    grp_sort_eigval_fu_1491_ap_start <= grp_sort_eigval_fu_1491_ap_start_reg;
    i_5_fu_2745_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i52_0_reg_1283));
    i_6_fu_2875_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(i54_0_reg_1353));
    i_fu_2595_p2 <= std_logic_vector(unsigned(i50_0_reg_1260) + unsigned(ap_const_lv3_1));
    icmp_ln185_fu_1672_p2 <= "1" when (phi_ln185_reg_884 = ap_const_lv10_3FF) else "0";
    icmp_ln187_1_fu_1754_p2 <= "1" when (phi_ln187_1_reg_907 = ap_const_lv4_9) else "0";
    icmp_ln187_2_fu_1760_p2 <= "1" when (phi_ln187_reg_895 = ap_const_lv10_3FF) else "0";
    icmp_ln187_fu_1748_p2 <= "1" when (phi_ln187_2_reg_919 = ap_const_lv2_3) else "0";
    icmp_ln188_1_fu_1798_p2 <= "1" when (phi_ln188_reg_930 = ap_const_lv4_9) else "0";
    icmp_ln188_fu_1792_p2 <= "1" when (phi_ln188_1_reg_942 = ap_const_lv2_3) else "0";
    icmp_ln189_1_fu_1836_p2 <= "1" when (phi_ln189_reg_953 = ap_const_lv2_3) else "0";
    icmp_ln189_fu_1830_p2 <= "1" when (phi_ln189_1_reg_965 = ap_const_lv2_3) else "0";
    icmp_ln190_1_fu_1874_p2 <= "1" when (phi_ln190_reg_976 = ap_const_lv2_3) else "0";
    icmp_ln190_fu_1868_p2 <= "1" when (phi_ln190_1_reg_988 = ap_const_lv2_3) else "0";
    icmp_ln191_fu_1906_p2 <= "1" when (phi_ln191_reg_999 = ap_const_lv2_3) else "0";
    icmp_ln192_1_fu_1944_p2 <= "1" when (phi_ln192_reg_1022 = ap_const_lv2_3) else "0";
    icmp_ln192_fu_1938_p2 <= "1" when (phi_ln192_1_reg_1034 = ap_const_lv2_3) else "0";
    icmp_ln193_1_fu_1982_p2 <= "1" when (phi_ln193_reg_1045 = ap_const_lv9_168) else "0";
    icmp_ln193_fu_1976_p2 <= "1" when (phi_ln193_1_reg_1057 = ap_const_lv2_3) else "0";
    icmp_ln194_fu_2000_p2 <= "1" when (phi_ln194_reg_1068 = ap_const_lv9_168) else "0";
    icmp_ln195_1_fu_2046_p2 <= "1" when (phi_ln195_reg_1079 = ap_const_lv2_3) else "0";
    icmp_ln195_fu_2040_p2 <= "1" when (phi_ln195_1_reg_1103 = ap_const_lv9_168) else "0";
    icmp_ln218_fu_2052_p2 <= "1" when (l_0_reg_1114 = ap_const_lv4_A) else "0";
    icmp_ln219_fu_2080_p2 <= "1" when (n_0_reg_1125 = ap_const_lv3_4) else "0";
    icmp_ln220_fu_2096_p2 <= "1" when (j44_0_reg_1136 = ap_const_lv11_400) else "0";
    icmp_ln224_fu_2147_p2 <= "1" when (j45_0_reg_1148 = ap_const_lv11_400) else "0";
    icmp_ln230_fu_2224_p2 <= "1" when (jj_0_reg_1159 = ap_const_lv11_400) else "0";
    icmp_ln231_fu_2240_p2 <= "1" when (l46_0_reg_1182 = ap_const_lv4_A) else "0";
    icmp_ln232_fu_2264_p2 <= "1" when (n47_0_reg_1193 = ap_const_lv3_4) else "0";
    icmp_ln239_fu_2414_p2 <= "1" when (x_0_reg_1204 = ap_const_lv3_4) else "0";
    icmp_ln240_fu_2468_p2 <= "1" when (y_0_reg_1215 = ap_const_lv3_4) else "0";
    icmp_ln241_fu_2509_p2 <= "1" when (tmp_fu_2499_p6 = ap_const_lv32_2) else "0";
    icmp_ln243_fu_2515_p2 <= "1" when (tmp_fu_2499_p6 = ap_const_lv32_3) else "0";
    icmp_ln248_fu_2527_p2 <= "1" when (x48_0_reg_1226 = ap_const_lv3_4) else "0";
    icmp_ln249_fu_2543_p2 <= "1" when (y49_0_reg_1249 = ap_const_lv9_169) else "0";
    icmp_ln255_fu_2589_p2 <= "1" when (i50_0_reg_1260 = ap_const_lv3_4) else "0";
    icmp_ln256_fu_2643_p2 <= "1" when (j51_0_reg_1272 = ap_const_lv3_4) else "0";
    icmp_ln260_fu_2739_p2 <= "1" when (i52_0_reg_1283 = ap_const_lv9_169) else "0";
    icmp_ln261_fu_2763_p2 <= "1" when (j53_0_reg_1305 = ap_const_lv3_4) else "0";
    icmp_ln264_fu_2794_p2 <= "1" when (k_0_reg_1342 = ap_const_lv3_4) else "0";
    icmp_ln270_fu_2869_p2 <= "1" when (i54_0_reg_1353 = ap_const_lv9_169) else "0";
    icmp_ln273_fu_2897_p2 <= "1" when (k55_0_reg_1399 = ap_const_lv3_4) else "0";
    j_3_fu_2153_p2 <= std_logic_vector(unsigned(j45_0_reg_1148) + unsigned(ap_const_lv11_1));
    j_4_fu_2649_p2 <= std_logic_vector(unsigned(j51_0_reg_1272) + unsigned(ap_const_lv3_1));
    j_5_fu_2769_p2 <= std_logic_vector(unsigned(j53_0_reg_1305) + unsigned(ap_const_lv3_1));
    j_fu_2102_p2 <= std_logic_vector(unsigned(j44_0_reg_1136) + unsigned(ap_const_lv11_1));
    jj_fu_2230_p2 <= std_logic_vector(unsigned(jj_0_reg_1159) + unsigned(ap_const_lv11_1));
    k_1_fu_2800_p2 <= std_logic_vector(unsigned(k_0_reg_1342) + unsigned(ap_const_lv3_1));
    k_fu_2903_p2 <= std_logic_vector(unsigned(k55_0_reg_1399) + unsigned(ap_const_lv3_1));
    l_1_fu_2246_p2 <= std_logic_vector(unsigned(l46_0_reg_1182) + unsigned(ap_const_lv4_1));
    l_fu_2058_p2 <= std_logic_vector(unsigned(l_0_reg_1114) + unsigned(ap_const_lv4_1));
    n_1_fu_2086_p2 <= std_logic_vector(unsigned(n_0_reg_1125) + unsigned(ap_const_lv3_1));
    n_fu_2270_p2 <= std_logic_vector(unsigned(n47_0_reg_1193) + unsigned(ap_const_lv3_1));
    or_ln244_fu_2452_p2 <= (tmp_32_fu_2438_p3 or ap_const_lv4_1);
    or_ln257_1_fu_2673_p2 <= (tmp_49_fu_2659_p3 or ap_const_lv4_1);
    or_ln257_fu_2615_p2 <= (tmp_45_fu_2601_p3 or ap_const_lv4_1);
    p_r_M_imag_11_fu_2853_p1 <= xor_ln667_3_fu_2847_p2;
    p_t_imag_4_fu_2718_p1 <= xor_ln667_1_fu_2712_p2;
    p_t_imag_5_fu_2945_p1 <= xor_ln667_2_fu_2939_p2;
    p_t_imag_fu_2703_p1 <= xor_ln667_fu_2697_p2;
        sext_ln221_1_fu_2136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln221_1_fu_2131_p2),64));

        sext_ln221_fu_2114_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln221_fu_2108_p2),15));

    shl_ln_fu_2064_p3 <= (l_0_reg_1114 & ap_const_lv10_0);
    theta_address0 <= zext_ln250_fu_2555_p1(9 - 1 downto 0);

    theta_ce0_assign_proc : process(ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            theta_ce0 <= ap_const_logic_1;
        else 
            theta_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_29_fu_2252_p3 <= (l46_0_reg_1182 & ap_const_lv2_0);
    tmp_30_fu_2123_p3 <= (add_ln221_fu_2118_p2 & ap_const_lv2_0);
    tmp_31_fu_2426_p3 <= (x_0_reg_1204 & ap_const_lv2_0);
    tmp_32_fu_2438_p3 <= (x_0_reg_1204 & ap_const_lv1_0);
    tmp_33_fu_2458_p3 <= (ap_const_lv60_0 & or_ln244_fu_2452_p2);
    tmp_34_fu_2165_p3 <= (j45_0_reg_1148 & ap_const_lv3_0);
    tmp_35_fu_1684_p3 <= (phi_ln187_reg_895 & ap_const_lv3_0);
    tmp_36_fu_1696_p3 <= (phi_ln187_reg_895 & ap_const_lv1_0);
    tmp_37_fu_1735_p3 <= (add_ln1027_1_reg_2974 & phi_ln187_2_reg_919);
    tmp_38_fu_1778_p3 <= (phi_ln188_reg_930 & phi_ln188_1_reg_942);
    tmp_39_fu_1816_p3 <= (phi_ln189_reg_953 & phi_ln189_1_reg_965);
    tmp_40_fu_1854_p3 <= (phi_ln190_reg_976 & phi_ln190_1_reg_988);
    tmp_41_fu_1892_p3 <= (phi_ln191_reg_999 & phi_ln191_1_reg_1011);
    tmp_42_fu_1924_p3 <= (phi_ln192_reg_1022 & phi_ln192_1_reg_1034);
    tmp_43_fu_1962_p3 <= (phi_ln193_reg_1045 & phi_ln193_1_reg_1057);
    tmp_44_fu_2177_p3 <= (j45_0_reg_1148 & ap_const_lv1_0);
    tmp_45_fu_2601_p3 <= (i50_0_reg_1260 & ap_const_lv1_0);
    tmp_46_fu_2621_p3 <= (ap_const_lv60_0 & or_ln257_fu_2615_p2);
    tmp_47_fu_2631_p3 <= (i50_0_reg_1260 & ap_const_lv2_0);
    tmp_48_fu_2751_p3 <= (i52_0_reg_1283 & ap_const_lv2_0);
    tmp_49_fu_2659_p3 <= (j51_0_reg_1272 & ap_const_lv1_0);
    tmp_50_fu_2679_p3 <= (ap_const_lv60_0 & or_ln257_1_fu_2673_p2);
    tmp_51_fu_2885_p3 <= (i54_0_reg_1353 & ap_const_lv2_0);
    tmp_52_fu_2810_p3 <= (k_0_reg_1342 & ap_const_lv2_0);
    tmp_57_cast_fu_2200_p3 <= (add_ln225_1_fu_2195_p2 & ap_const_lv2_0);
    tmp_fu_2499_p5 <= y_0_reg_1215(2 - 1 downto 0);
    trunc_ln250_fu_2539_p1 <= x48_0_reg_1226(2 - 1 downto 0);
    trunc_ln260_fu_2729_p1 <= phi_mul7_reg_1294(12 - 1 downto 0);
    trunc_ln270_fu_2859_p1 <= phi_mul9_reg_1364(12 - 1 downto 0);

    w_M_imag_address0_assign_proc : process(ap_CS_fsm_state18, zext_ln274_reg_3779, ap_CS_fsm_state168, w_M_imag_addr_1_reg_3823, ap_CS_fsm_state190, zext_ln194_fu_1994_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
            w_M_imag_address0 <= w_M_imag_addr_1_reg_3823;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            w_M_imag_address0 <= zext_ln274_reg_3779(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_M_imag_address0 <= zext_ln194_fu_1994_p1(9 - 1 downto 0);
        else 
            w_M_imag_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    w_M_imag_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state168, ap_CS_fsm_state190)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state190))) then 
            w_M_imag_ce0 <= ap_const_logic_1;
        else 
            w_M_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_M_imag_d0_assign_proc : process(reg_1640, ap_CS_fsm_state18, ap_CS_fsm_state190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
            w_M_imag_d0 <= reg_1640;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_M_imag_d0 <= ap_const_lv32_0;
        else 
            w_M_imag_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_M_imag_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state190)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state190))) then 
            w_M_imag_we0 <= ap_const_logic_1;
        else 
            w_M_imag_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_M_real_address0_assign_proc : process(ap_CS_fsm_state18, zext_ln274_reg_3779, ap_CS_fsm_state168, w_M_real_addr_1_reg_3818, ap_CS_fsm_state190, zext_ln194_fu_1994_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
            w_M_real_address0 <= w_M_real_addr_1_reg_3818;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state168)) then 
            w_M_real_address0 <= zext_ln274_reg_3779(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_M_real_address0 <= zext_ln194_fu_1994_p1(9 - 1 downto 0);
        else 
            w_M_real_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    w_M_real_ce0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state168, ap_CS_fsm_state190)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state168) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state190))) then 
            w_M_real_ce0 <= ap_const_logic_1;
        else 
            w_M_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_M_real_d0_assign_proc : process(reg_1632, ap_CS_fsm_state18, ap_CS_fsm_state190)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state190)) then 
            w_M_real_d0 <= reg_1632;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_M_real_d0 <= ap_const_lv32_0;
        else 
            w_M_real_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_M_real_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state190)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state190))) then 
            w_M_real_we0 <= ap_const_logic_1;
        else 
            w_M_real_we0 <= ap_const_logic_0;
        end if; 
    end process;

    x_1_fu_2533_p2 <= std_logic_vector(unsigned(x48_0_reg_1226) + unsigned(ap_const_lv3_1));
    x_fu_2420_p2 <= std_logic_vector(unsigned(x_0_reg_1204) + unsigned(ap_const_lv3_1));
    xor_ln191_fu_1886_p2 <= (phi_ln191_1_reg_1011 xor ap_const_lv1_1);
    xor_ln221_fu_2108_p2 <= (j44_0_reg_1136 xor ap_const_lv11_400);
    xor_ln667_1_fu_2712_p2 <= (bitcast_ln667_2_fu_2709_p1 xor ap_const_lv32_80000000);
    xor_ln667_2_fu_2939_p2 <= (bitcast_ln667_4_fu_2935_p1 xor ap_const_lv32_80000000);
    xor_ln667_3_fu_2847_p2 <= (bitcast_ln667_6_fu_2843_p1 xor ap_const_lv32_80000000);
    xor_ln667_fu_2697_p2 <= (bitcast_ln667_fu_2694_p1 xor ap_const_lv32_80000000);
    y_1_fu_2474_p2 <= std_logic_vector(unsigned(y_0_reg_1215) + unsigned(ap_const_lv3_1));
    y_fu_2549_p2 <= std_logic_vector(unsigned(y49_0_reg_1249) + unsigned(ap_const_lv9_1));
    zext_ln1027_10_fu_1742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_1735_p3),64));
    zext_ln1027_11_fu_2024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln195_1_reg_1103),11));
    zext_ln1027_12_fu_2034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1027_2_fu_2028_p2),64));
    zext_ln1027_2_fu_1704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_1696_p3),36));
    zext_ln1027_3_fu_1786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_1778_p3),64));
    zext_ln1027_4_fu_1824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_1816_p3),64));
    zext_ln1027_5_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_1854_p3),64));
    zext_ln1027_6_fu_1900_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_1892_p3),64));
    zext_ln1027_7_fu_1932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_1924_p3),64));
    zext_ln1027_8_fu_1970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_1962_p3),64));
    zext_ln1027_9_fu_1720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln187_1_reg_907),36));
    zext_ln1027_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1684_p3),36));
    zext_ln185_fu_1666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln185_reg_884),64));
    zext_ln194_fu_1994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln194_reg_1068),64));
    zext_ln219_fu_2076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_1114),15));
    zext_ln220_fu_2092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n_0_reg_1125),17));
    zext_ln221_1_fu_2141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j44_0_reg_1136),64));
    zext_ln221_fu_2072_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_2064_p3),15));
    zext_ln225_1_fu_2173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_2165_p3),15));
    zext_ln225_2_fu_2185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_2177_p3),15));
    zext_ln225_3_fu_2213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln225_2_reg_3216),64));
    zext_ln225_fu_2159_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j45_0_reg_1148),64));
    zext_ln232_fu_2260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_2252_p3),7));
    zext_ln233_1_fu_2276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n47_0_reg_1193),7));
    zext_ln233_2_fu_2280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(n47_0_reg_1193),16));
    zext_ln233_3_fu_2290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln233_fu_2284_p2),64));
    zext_ln233_4_fu_2301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln233_1_reg_3280),64));
    zext_ln233_fu_2236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_0_reg_1159),64));
    zext_ln242_1_fu_2446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_2438_p3),64));
    zext_ln242_2_fu_2480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_0_reg_1215),6));
    zext_ln242_3_fu_2489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln242_fu_2484_p2),64));
    zext_ln242_fu_2434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_2426_p3),6));
    zext_ln250_1_fu_2560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y49_0_reg_1249),11));
    zext_ln250_2_fu_2584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln250_reg_3465),64));
    zext_ln250_fu_2555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y49_0_reg_1249),64));
    zext_ln257_1_fu_2639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_2631_p3),6));
    zext_ln257_2_fu_2655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j51_0_reg_1272),6));
    zext_ln257_3_fu_2667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_fu_2659_p3),64));
    zext_ln257_4_fu_2724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln257_reg_3585),64));
    zext_ln257_fu_2609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_2601_p3),64));
    zext_ln261_fu_2759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_48_fu_2751_p3),12));
    zext_ln265_1_fu_2818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_fu_2810_p3),6));
    zext_ln265_2_fu_2838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_reg_3708),64));
    zext_ln265_3_fu_2832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln265_1_fu_2827_p2),64));
    zext_ln265_fu_2806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_1342),12));
    zext_ln267_1_fu_2779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j53_0_reg_1305),12));
    zext_ln267_2_fu_2788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln267_fu_2783_p2),64));
    zext_ln267_fu_2775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j53_0_reg_1305),6));
    zext_ln273_fu_2893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_fu_2885_p3),12));
    zext_ln274_1_fu_2909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k55_0_reg_1399),12));
    zext_ln274_2_fu_2918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln274_fu_2913_p2),64));
    zext_ln274_3_fu_2929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln274_1_fu_2924_p2),64));
    zext_ln274_fu_2881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i54_0_reg_1353),64));
end behav;
