-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_or_cos_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (31 downto 0);
    do_cos : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sin_or_cos_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_C2 : STD_LOGIC_VECTOR (7 downto 0) := "11000010";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_83 : STD_LOGIC_VECTOR (7 downto 0) := "10000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv29_1FFFFFFF : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111111111111111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv23_7FFFFF : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ref_4oPi_table_100_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal ref_4oPi_table_100_V_ce0 : STD_LOGIC;
    signal ref_4oPi_table_100_V_q0 : STD_LOGIC_VECTOR (99 downto 0);
    signal second_order_float_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_2_ce0 : STD_LOGIC;
    signal second_order_float_2_q0 : STD_LOGIC_VECTOR (29 downto 0);
    signal second_order_float_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_3_ce0 : STD_LOGIC;
    signal second_order_float_3_q0 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal second_order_float_s_ce0 : STD_LOGIC;
    signal second_order_float_s_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_Result_s_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_236_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_1_fu_246_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_1_reg_978 : STD_LOGIC_VECTOR (22 downto 0);
    signal closepath_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln601_fu_285_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln601_reg_995 : STD_LOGIC_VECTOR (3 downto 0);
    signal Med_V_reg_1000 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln833_1_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_1_reg_1015 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_24_reg_1021 : STD_LOGIC_VECTOR (57 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal trunc_ln_i_reg_1027 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_25_fu_353_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_25_reg_1032 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_Val2_7_fu_368_p3 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Val2_7_reg_1038 : STD_LOGIC_VECTOR (57 downto 0);
    signal Mx_zeros_V_fu_419_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_zeros_V_reg_1043 : STD_LOGIC_VECTOR (4 downto 0);
    signal Mx_V_reg_1049 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Ex_V_fu_456_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ex_V_reg_1056 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_466_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal ush_fu_480_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_reg_1066 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln833_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_reg_1072 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln833_2_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_fu_529_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_V_fu_560_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_V_reg_1098 : STD_LOGIC_VECTOR (21 downto 0);
    signal B_trunc_V_reg_1103 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln25_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln25_reg_1108 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_squared_V_reg_1128 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal t1_V_reg_1133 : STD_LOGIC_VECTOR (28 downto 0);
    signal second_order_float_6_reg_1138 : STD_LOGIC_VECTOR (22 downto 0);
    signal second_order_float_8_reg_1143 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln4_reg_1148 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal trunc_ln662_2_reg_1153 : STD_LOGIC_VECTOR (13 downto 0);
    signal cos_basis_fu_665_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_1158 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln272_1_fu_671_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal select_ln272_1_reg_1164 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_5_fu_693_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_5_reg_1169 : STD_LOGIC_VECTOR (29 downto 0);
    signal result_V_reg_1174 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ret_V_fu_732_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1179 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln300_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln300_reg_1184 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_scaled_fixed2ieee_1_fu_218_ap_ready : STD_LOGIC;
    signal grp_scaled_fixed2ieee_1_fu_218_ap_done : STD_LOGIC;
    signal select_ln311_fu_875_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln311_reg_1189 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_6_reg_1194 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_V_7_fu_921_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_7_reg_1199 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_scaled_fixed2ieee_1_fu_218_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_1_fu_218_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_1_fu_218_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scaled_fixed2ieee_1_fu_218_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln498_1_fu_280_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln498_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_1_fu_256_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal addr_V_fu_262_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_270_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln744_fu_289_p1 : STD_LOGIC_VECTOR (99 downto 0);
    signal r_V_9_fu_292_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal p_Result_15_fu_308_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (103 downto 0);
    signal trunc_ln745_fu_359_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_bits_V_1_fu_363_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_i_i_fu_375_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_16_fu_385_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_8_fu_393_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_17_fu_403_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_assign_fu_411_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln114_fu_423_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1253_fu_435_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal r_V_10_fu_438_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln482_fu_428_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln655_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1334_fu_462_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1311_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1311_1_fu_501_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal lshr_ln1287_fu_507_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln1287_fu_504_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln1311_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1287_1_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1253_fu_516_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1310_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln25_fu_574_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_basis_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_550_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Result_18_fu_586_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_fu_951_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_12_fu_629_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_12_fu_629_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_12_fu_629_p2 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_958_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal cos_basis_fu_665_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln271_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_678_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal rhs_V_2_fu_681_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ret_V_9_fu_684_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln657_fu_690_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_711_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_711_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_14_fu_711_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal select_ln272_fu_699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_728_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_20_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_20_fu_765_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_771_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_809_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln307_fu_858_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln271_fu_847_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln311_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln311_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_19_fu_743_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_2_fu_751_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln307_fu_858_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln311_1_fu_883_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln300_1_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln300_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln300_fu_916_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln300_2_fu_908_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_V_3_fu_761_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal and_ln307_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Repl2_3_fu_933_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_fu_939_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_11_fu_951_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_fu_601_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_11_fu_951_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_13_fu_958_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_322_p00 : STD_LOGIC_VECTOR (103 downto 0);
    signal grp_fu_322_p10 : STD_LOGIC_VECTOR (103 downto 0);
    signal r_V_12_fu_629_p10 : STD_LOGIC_VECTOR (44 downto 0);
    signal r_V_13_fu_958_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_14_fu_711_p10 : STD_LOGIC_VECTOR (57 downto 0);

    component scaled_fixed2ieee_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (28 downto 0);
        prescale : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component music_mul_80ns_24fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (79 downto 0);
        din1 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (103 downto 0) );
    end component;


    component music_mux_83_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component music_mux_164_1_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component music_mul_mul_15ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component music_mul_mul_15nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sin_or_cos_float_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component sin_or_cos_float_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component sin_or_cos_float_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component sin_or_cos_float_eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    ref_4oPi_table_100_V_U : component sin_or_cos_float_bkb
    generic map (
        DataWidth => 100,
        AddressRange => 13,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ref_4oPi_table_100_V_address0,
        ce0 => ref_4oPi_table_100_V_ce0,
        q0 => ref_4oPi_table_100_V_q0);

    second_order_float_2_U : component sin_or_cos_float_cud
    generic map (
        DataWidth => 30,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_2_address0,
        ce0 => second_order_float_2_ce0,
        q0 => second_order_float_2_q0);

    second_order_float_3_U : component sin_or_cos_float_dEe
    generic map (
        DataWidth => 23,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_3_address0,
        ce0 => second_order_float_3_ce0,
        q0 => second_order_float_3_q0);

    second_order_float_s_U : component sin_or_cos_float_eOg
    generic map (
        DataWidth => 15,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => second_order_float_s_address0,
        ce0 => second_order_float_s_ce0,
        q0 => second_order_float_s_q0);

    grp_scaled_fixed2ieee_1_fu_218 : component scaled_fixed2ieee_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scaled_fixed2ieee_1_fu_218_ap_start,
        ap_done => grp_scaled_fixed2ieee_1_fu_218_ap_done,
        ap_idle => grp_scaled_fixed2ieee_1_fu_218_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_1_fu_218_ap_ready,
        in_V => result_V_reg_1174,
        prescale => ret_V_reg_1179,
        ap_return => grp_scaled_fixed2ieee_1_fu_218_ap_return);

    music_mul_80ns_24fYi_U5 : component music_mul_80ns_24fYi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 80,
        din1_WIDTH => 24,
        dout_WIDTH => 104)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    music_mux_83_1_1_1_U6 : component music_mux_83_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_1,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => p_Val2_25_reg_1032,
        dout => tmp_fu_529_p10);

    music_mux_164_1_1_1_U7 : component music_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_765_p3,
        dout => tmp_s_fu_771_p18);

    music_mux_164_1_1_1_U8 : component music_mux_164_1_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din0 => ap_const_lv1_0,
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_0,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_0,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => p_Result_20_fu_765_p3,
        dout => tmp_2_fu_809_p18);

    music_mul_mul_15ng8j_U9 : component music_mul_mul_15ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_11_fu_951_p0,
        din1 => r_V_11_fu_951_p1,
        dout => r_V_11_fu_951_p2);

    music_mul_mul_15nhbi_U10 : component music_mul_mul_15nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 15,
        dout_WIDTH => 30)
    port map (
        din0 => r_V_13_fu_958_p0,
        din1 => second_order_float_8_reg_1143,
        dout => r_V_13_fu_958_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scaled_fixed2ieee_1_fu_218_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scaled_fixed2ieee_1_fu_218_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_scaled_fixed2ieee_1_fu_218_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scaled_fixed2ieee_1_fu_218_ap_ready = ap_const_logic_1)) then 
                    grp_scaled_fixed2ieee_1_fu_218_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                B_V_reg_1098 <= B_V_fu_560_p1;
                B_trunc_V_reg_1103 <= select_ln1310_fu_522_p3(21 downto 7);
                tmp_reg_1092 <= tmp_fu_529_p10;
                xor_ln25_reg_1108 <= xor_ln25_fu_574_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                B_squared_V_reg_1128 <= r_V_11_fu_951_p2(29 downto 15);
                second_order_float_6_reg_1138 <= second_order_float_3_q0;
                second_order_float_8_reg_1143 <= second_order_float_s_q0;
                t1_V_reg_1133 <= second_order_float_2_q0(29 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Ex_V_reg_1056 <= Ex_V_fu_456_p2;
                Mx_V_reg_1049 <= r_V_10_fu_438_p2(57 downto 29);
                icmp_ln833_2_reg_1078 <= icmp_ln833_2_fu_493_p2;
                icmp_ln833_reg_1072 <= icmp_ln833_fu_488_p2;
                isNeg_reg_1061 <= Ex_V_fu_456_p2(7 downto 7);
                ush_reg_1066 <= ush_fu_480_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Med_V_reg_1000 <= r_V_9_fu_292_p2(99 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Mx_zeros_V_reg_1043 <= Mx_zeros_V_fu_419_p1;
                p_Val2_25_reg_1032 <= p_Val2_25_fu_353_p3;
                p_Val2_7_reg_1038 <= p_Val2_7_fu_368_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scaled_fixed2ieee_1_fu_218_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                and_ln300_reg_1184 <= and_ln300_fu_854_p2;
                ret_V_6_reg_1194 <= ret_V_6_fu_890_p3;
                ret_V_7_reg_1199 <= ret_V_7_fu_921_p3;
                select_ln311_reg_1189 <= select_ln311_fu_875_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                closepath_reg_984 <= closepath_fu_250_p2;
                p_Result_s_reg_965 <= p_Val2_s_fu_224_p1(31 downto 31);
                tmp_V_1_reg_978 <= tmp_V_1_fu_246_p1;
                tmp_V_reg_971 <= p_Val2_s_fu_224_p1(30 downto 23);
                trunc_ln601_reg_995 <= trunc_ln601_fu_285_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                cos_basis_reg_1158 <= cos_basis_fu_665_p3;
                ret_V_5_reg_1169 <= ret_V_5_fu_693_p2;
                select_ln272_1_reg_1164 <= select_ln272_1_fu_671_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln833_1_reg_1015 <= icmp_ln833_1_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                p_Val2_24_reg_1021 <= grp_fu_322_p2(76 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                result_V_reg_1174 <= r_V_14_fu_711_p2(57 downto 29);
                ret_V_reg_1179 <= ret_V_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln4_reg_1148 <= r_V_12_fu_629_p2(44 downto 23);
                trunc_ln662_2_reg_1153 <= r_V_13_fu_958_p2(29 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((closepath_reg_984 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                trunc_ln_i_reg_1027 <= grp_fu_322_p2(79 downto 77);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state15, grp_scaled_fixed2ieee_1_fu_218_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_scaled_fixed2ieee_1_fu_218_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    B_V_fu_560_p1 <= select_ln1310_fu_522_p3(22 - 1 downto 0);
    Ex_V_fu_456_p2 <= std_logic_vector(unsigned(select_ln482_fu_428_p3) - unsigned(zext_ln655_fu_453_p1));
    Mx_bits_V_1_fu_363_p2 <= std_logic_vector(unsigned(ap_const_lv58_0) - unsigned(p_Val2_24_reg_1021));
    Mx_zeros_V_fu_419_p1 <= val_assign_fu_411_p3(5 - 1 downto 0);
    add_ln114_1_fu_256_p2 <= std_logic_vector(signed(ap_const_lv8_C2) + signed(tmp_V_fu_236_p4));
    add_ln114_fu_423_p2 <= std_logic_vector(signed(ap_const_lv8_83) + signed(tmp_V_reg_971));
    addr_V_fu_262_p3 <= 
        ap_const_lv8_3F when (closepath_fu_250_p2(0) = '1') else 
        add_ln114_1_fu_256_p2;
    and_ln300_1_fu_898_p2 <= (icmp_ln833_reg_1072 and icmp_ln833_1_reg_1015);
    and_ln300_fu_854_p2 <= (icmp_ln833_reg_1072 and icmp_ln833_1_reg_1015);
    and_ln307_fu_929_p2 <= (xor_ln25_reg_1108 and p_Result_s_reg_965);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= p_Result_21_fu_939_p4;
    closepath_fu_250_p2 <= "1" when (unsigned(tmp_V_fu_236_p4) < unsigned(ap_const_lv8_7E)) else "0";
    cos_basis_fu_665_p0 <= (0=>do_cos, others=>'-');
    cos_basis_fu_665_p3 <= 
        xor_ln271_fu_660_p2 when (cos_basis_fu_665_p0(0) = '1') else 
        tmp_reg_1092;
    grp_fu_322_p0 <= grp_fu_322_p00(80 - 1 downto 0);
    grp_fu_322_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Med_V_reg_1000),104));
    grp_fu_322_p1 <= grp_fu_322_p10(24 - 1 downto 0);
    grp_fu_322_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_15_fu_308_p3),104));
    grp_scaled_fixed2ieee_1_fu_218_ap_start <= grp_scaled_fixed2ieee_1_fu_218_ap_start_reg;
    icmp_ln833_1_fu_328_p2 <= "1" when (tmp_V_1_reg_978 = ap_const_lv23_0) else "0";
    icmp_ln833_2_fu_493_p2 <= "1" when (tmp_V_reg_971 = ap_const_lv8_FF) else "0";
    icmp_ln833_fu_488_p2 <= "1" when (tmp_V_reg_971 = ap_const_lv8_0) else "0";
    isNeg_fu_466_p3 <= Ex_V_fu_456_p2(7 downto 7);
        lhs_V_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t1_V_reg_1133),30));

    lshr_ln1287_fu_507_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_1049),to_integer(unsigned('0' & sext_ln1311_1_fu_501_p1(29-1 downto 0)))));
    or_ln300_fu_916_p2 <= (icmp_ln833_2_reg_1078 or and_ln300_fu_854_p2);
    or_ln311_fu_870_p2 <= (select_ln271_fu_847_p3 or icmp_ln833_2_reg_1078);
    p_Repl2_3_fu_933_p3 <= 
        and_ln307_fu_929_p2 when (and_ln300_reg_1184(0) = '1') else 
        select_ln311_reg_1189;
    p_Result_15_fu_308_p3 <= (ap_const_lv1_1 & tmp_V_1_reg_978);
    p_Result_16_fu_385_p3 <= (p_Result_i_i_fu_375_p4 & ap_const_lv1_1);
    p_Result_17_fu_403_p3 <= (ap_const_lv2_3 & p_Result_8_fu_393_p4);
    p_Result_18_fu_586_p3 <= (sin_basis_fu_580_p2 & p_Result_i_fu_550_p4);
    p_Result_19_fu_743_p3 <= p_Val2_20_fu_739_p1(31 downto 31);
    p_Result_20_fu_765_p3 <= (p_Result_s_reg_965 & p_Val2_25_reg_1032);
    p_Result_21_fu_939_p4 <= ((p_Repl2_3_fu_933_p3 & ret_V_6_reg_1194) & ret_V_7_reg_1199);
    
    p_Result_8_fu_393_p4_proc : process(p_Result_16_fu_385_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(30+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable p_Result_8_fu_393_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(30 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1D(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_16_fu_385_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(30-1-unsigned(ap_const_lv32_1D(5-1 downto 0)));
            for p_Result_8_fu_393_p4_i in 0 to 30-1 loop
                v0_cpy(p_Result_8_fu_393_p4_i) := p_Result_16_fu_385_p3(30-1-p_Result_8_fu_393_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(30-1 downto 0)))));
        res_mask := res_mask(30-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_8_fu_393_p4 <= resvalue(30-1 downto 0);
    end process;

    p_Result_i_fu_550_p4 <= select_ln1310_fu_522_p3(28 downto 22);
    p_Result_i_i_fu_375_p4 <= p_Val2_7_fu_368_p3(57 downto 29);
    p_Val2_20_fu_739_p1 <= grp_scaled_fixed2ieee_1_fu_218_ap_return;
    p_Val2_25_fu_353_p3 <= 
        ap_const_lv3_0 when (closepath_reg_984(0) = '1') else 
        trunc_ln_i_reg_1027;
    p_Val2_7_fu_368_p3 <= 
        Mx_bits_V_1_fu_363_p2 when (trunc_ln745_fu_359_p1(0) = '1') else 
        p_Val2_24_reg_1021;
    p_Val2_s_fu_224_p1 <= t_in;
    r_V_10_fu_438_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_7_reg_1038),to_integer(unsigned('0' & zext_ln1253_fu_435_p1(31-1 downto 0)))));
    r_V_11_fu_951_p0 <= r_V_fu_601_p1(15 - 1 downto 0);
    r_V_11_fu_951_p1 <= r_V_fu_601_p1(15 - 1 downto 0);
    r_V_12_fu_629_p0 <= second_order_float_6_reg_1138;
    r_V_12_fu_629_p1 <= r_V_12_fu_629_p10(22 - 1 downto 0);
    r_V_12_fu_629_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_V_reg_1098),45));
    r_V_12_fu_629_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_12_fu_629_p0) * signed('0' &r_V_12_fu_629_p1))), 45));
    r_V_13_fu_958_p0 <= r_V_13_fu_958_p00(15 - 1 downto 0);
    r_V_13_fu_958_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_squared_V_reg_1128),30));
    r_V_14_fu_711_p0 <= ret_V_5_reg_1169;
    r_V_14_fu_711_p1 <= r_V_14_fu_711_p10(29 - 1 downto 0);
    r_V_14_fu_711_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln272_1_reg_1164),58));
    r_V_14_fu_711_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(r_V_14_fu_711_p0) * signed('0' &r_V_14_fu_711_p1))), 58));
    r_V_9_fu_292_p2 <= std_logic_vector(shift_left(unsigned(ref_4oPi_table_100_V_q0),to_integer(unsigned('0' & zext_ln744_fu_289_p1(31-1 downto 0)))));
    r_V_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(B_trunc_V_reg_1103),30));
    ref_4oPi_table_100_V_address0 <= zext_ln498_1_fu_280_p1(4 - 1 downto 0);

    ref_4oPi_table_100_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_1;
        else 
            ref_4oPi_table_100_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_5_fu_693_p2 <= std_logic_vector(unsigned(ret_V_9_fu_684_p2) + unsigned(sext_ln657_fu_690_p1));
    ret_V_6_fu_890_p3 <= 
        select_ln307_fu_858_p3 when (and_ln300_fu_854_p2(0) = '1') else 
        select_ln311_1_fu_883_p3;
    ret_V_7_fu_921_p3 <= 
        select_ln300_2_fu_908_p3 when (or_ln300_fu_916_p2(0) = '1') else 
        tmp_V_3_fu_761_p1;
    ret_V_9_fu_684_p2 <= std_logic_vector(signed(lhs_V_fu_678_p1) + signed(rhs_V_2_fu_681_p1));
    ret_V_fu_732_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(rhs_V_fu_728_p1));
        rhs_V_2_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_1148),30));

        rhs_V_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln272_fu_699_p3),9));

    second_order_float_2_address0 <= zext_ln498_fu_594_p1(8 - 1 downto 0);

    second_order_float_2_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            second_order_float_2_ce0 <= ap_const_logic_1;
        else 
            second_order_float_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_3_address0 <= zext_ln498_fu_594_p1(8 - 1 downto 0);

    second_order_float_3_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            second_order_float_3_ce0 <= ap_const_logic_1;
        else 
            second_order_float_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    second_order_float_s_address0 <= zext_ln498_fu_594_p1(8 - 1 downto 0);

    second_order_float_s_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            second_order_float_s_ce0 <= ap_const_logic_1;
        else 
            second_order_float_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln1310_fu_522_p3 <= 
        zext_ln1287_1_fu_512_p1 when (isNeg_reg_1061(0) = '1') else 
        shl_ln1253_fu_516_p2;
    select_ln271_fu_847_p3 <= 
        tmp_s_fu_771_p18 when (cos_basis_reg_1158(0) = '1') else 
        tmp_2_fu_809_p18;
    select_ln272_1_fu_671_p3 <= 
        ap_const_lv29_1FFFFFFF when (cos_basis_fu_665_p3(0) = '1') else 
        Mx_V_reg_1049;
    select_ln272_fu_699_p3 <= 
        ap_const_lv8_0 when (cos_basis_reg_1158(0) = '1') else 
        Ex_V_reg_1056;
    select_ln300_2_fu_908_p3 <= 
        ap_const_lv23_7FFFFF when (xor_ln300_fu_902_p2(0) = '1') else 
        ap_const_lv23_0;
    select_ln307_fu_858_p0 <= (0=>do_cos, others=>'-');
    select_ln307_fu_858_p3 <= 
        ap_const_lv8_7F when (select_ln307_fu_858_p0(0) = '1') else 
        ap_const_lv8_0;
    select_ln311_1_fu_883_p3 <= 
        ap_const_lv8_FF when (icmp_ln833_2_reg_1078(0) = '1') else 
        tmp_V_2_fu_751_p4;
    select_ln311_fu_875_p3 <= 
        xor_ln311_fu_865_p2 when (or_ln311_fu_870_p2(0) = '1') else 
        p_Result_19_fu_743_p3;
    select_ln482_fu_428_p3 <= 
        add_ln114_fu_423_p2 when (closepath_reg_984(0) = '1') else 
        ap_const_lv8_0;
        sext_ln1311_1_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1066),29));

        sext_ln1311_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_reg_1066),32));

        sext_ln1334_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_456_p2),9));

        sext_ln657_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln662_2_reg_1153),30));

    shl_ln1253_fu_516_p2 <= std_logic_vector(shift_left(unsigned(zext_ln1287_fu_504_p1),to_integer(unsigned('0' & sext_ln1311_fu_498_p1(31-1 downto 0)))));
    sin_basis_fu_580_p2 <= (xor_ln25_fu_574_p2 xor tmp_fu_529_p10);
    sub_ln1311_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(sext_ln1334_fu_462_p1));
    tmp_1_fu_270_p4 <= addr_V_fu_262_p3(7 downto 4);
    tmp_V_1_fu_246_p1 <= p_Val2_s_fu_224_p1(23 - 1 downto 0);
    tmp_V_2_fu_751_p4 <= p_Val2_20_fu_739_p1(30 downto 23);
    tmp_V_3_fu_761_p1 <= p_Val2_20_fu_739_p1(23 - 1 downto 0);
    tmp_V_fu_236_p4 <= p_Val2_s_fu_224_p1(30 downto 23);
    trunc_ln601_fu_285_p1 <= addr_V_fu_262_p3(4 - 1 downto 0);
    trunc_ln745_fu_359_p1 <= p_Val2_25_fu_353_p3(1 - 1 downto 0);
    ush_fu_480_p3 <= 
        sub_ln1311_fu_474_p2 when (isNeg_fu_466_p3(0) = '1') else 
        sext_ln1334_fu_462_p1;
    
    val_assign_fu_411_p3_proc : process(p_Result_17_fu_403_p3)
    begin
        val_assign_fu_411_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_17_fu_403_p3(i) = '1' then
                val_assign_fu_411_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    xor_ln25_fu_574_p0 <= (0=>do_cos, others=>'-');
    xor_ln25_fu_574_p2 <= (xor_ln25_fu_574_p0 xor ap_const_lv1_1);
    xor_ln271_fu_660_p2 <= (tmp_reg_1092 xor ap_const_lv1_1);
    xor_ln300_fu_902_p2 <= (ap_const_lv1_1 xor and_ln300_1_fu_898_p2);
    xor_ln311_fu_865_p2 <= (icmp_ln833_2_reg_1078 xor ap_const_lv1_1);
    zext_ln1253_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1043),58));
    zext_ln1287_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1287_fu_507_p2),32));
    zext_ln1287_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_reg_1049),32));
    zext_ln498_1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_270_p4),64));
    zext_ln498_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_18_fu_586_p3),64));
    zext_ln655_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1043),8));
    zext_ln744_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln601_reg_995),100));
end behav;
