-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity scaled_fixed2ieee_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V : IN STD_LOGIC_VECTOR (28 downto 0);
    prescale : IN STD_LOGIC_VECTOR (8 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of scaled_fixed2ieee_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv29_0 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_bits_0_V_fu_190_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_bits_0_V_reg_467 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_214_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_232_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal c_1_1_fu_276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln306_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_2_fu_284_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln313_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln313_reg_495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_fu_298_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_499 : STD_LOGIC_VECTOR (1 downto 0);
    signal shift_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_364_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_reg_510 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_ln316_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln316_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_0_020_reg_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_1_019_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_0_reg_108 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_0107_0_reg_119 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shift_0_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal i2_0_reg_141 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_p_Val2_s_phi_fu_155_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Val2_s_reg_152 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_phi_mux_shift_1_phi_fu_165_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_1_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_172_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_182_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln566_fu_202_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_s_fu_206_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln510_fu_238_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_251_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_242_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_43_fu_260_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_0_fu_268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln314_fu_304_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln314_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal isNeg_fu_322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1311_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ush_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ushcast_fu_344_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ushcast6_fu_354_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal lshr_ln1287_fu_348_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln1253_fu_358_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sub_ln324_fu_378_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln324_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal newexp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1452_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp1_fu_416_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal empty_fu_412_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_V_fu_434_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal significand_V_fu_426_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_44_fu_442_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln348_fu_452_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg(0) <= '0';
                ap_return_preg(1) <= '0';
                ap_return_preg(2) <= '0';
                ap_return_preg(3) <= '0';
                ap_return_preg(4) <= '0';
                ap_return_preg(5) <= '0';
                ap_return_preg(6) <= '0';
                ap_return_preg(7) <= '0';
                ap_return_preg(8) <= '0';
                ap_return_preg(9) <= '0';
                ap_return_preg(10) <= '0';
                ap_return_preg(11) <= '0';
                ap_return_preg(12) <= '0';
                ap_return_preg(13) <= '0';
                ap_return_preg(14) <= '0';
                ap_return_preg(15) <= '0';
                ap_return_preg(16) <= '0';
                ap_return_preg(17) <= '0';
                ap_return_preg(18) <= '0';
                ap_return_preg(19) <= '0';
                ap_return_preg(20) <= '0';
                ap_return_preg(21) <= '0';
                ap_return_preg(22) <= '0';
                ap_return_preg(23) <= '0';
                ap_return_preg(24) <= '0';
                ap_return_preg(25) <= '0';
                ap_return_preg(26) <= '0';
                ap_return_preg(27) <= '0';
                ap_return_preg(28) <= '0';
                ap_return_preg(29) <= '0';
                ap_return_preg(30) <= '0';
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln313_reg_495 = ap_const_lv1_1) or (icmp_ln316_reg_516 = ap_const_lv1_0)))) then 
                                        ap_return_preg(30 downto 0) <= bitcast_ln348_fu_452_p1(30 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i1_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i1_0_reg_108 <= i_fu_232_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i1_0_reg_108 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i2_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i2_0_reg_141 <= ap_const_lv2_0;
            elsif (((icmp_ln316_reg_516 = ap_const_lv1_1) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i2_0_reg_141 <= i_2_reg_499;
            end if; 
        end if;
    end process;

    p_0107_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0107_0_reg_119 <= in_V;
            elsif (((icmp_ln316_reg_516 = ap_const_lv1_1) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_0107_0_reg_119 <= r_V_reg_510;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_reg_516 = ap_const_lv1_0) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_152 <= r_V_reg_510;
            elsif (((icmp_ln313_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_s_reg_152 <= p_0107_0_reg_119;
            end if; 
        end if;
    end process;

    shift_0_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                shift_0_reg_129 <= ap_const_lv32_0;
            elsif (((icmp_ln316_reg_516 = ap_const_lv1_1) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_0_reg_129 <= shift_reg_504;
            end if; 
        end if;
    end process;

    shift_1_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln316_reg_516 = ap_const_lv1_0) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                shift_1_reg_162 <= shift_reg_504;
            elsif (((icmp_ln313_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                shift_1_reg_162 <= shift_0_reg_129;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln306_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                c_0_020_reg_84 <= c_1_1_fu_276_p3;
                c_1_019_reg_96 <= c_1_2_fu_284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_2_reg_499 <= i_2_fu_298_p2;
                icmp_ln313_reg_495 <= icmp_ln313_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln313_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                icmp_ln316_reg_516 <= icmp_ln316_fu_372_p2;
                r_V_reg_510 <= r_V_fu_364_p3;
                shift_reg_504 <= shift_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                out_bits_0_V_reg_467 <= out_bits_0_V_fu_190_p5;
                p_Result_s_reg_472 <= p_Result_s_fu_214_p5;
            end if;
        end if;
    end process;
    ap_return_preg(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln306_fu_226_p2, icmp_ln313_reg_495, icmp_ln316_reg_516, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln306_fu_226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln313_reg_495 = ap_const_lv1_1) or (icmp_ln316_reg_516 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln313_reg_495, icmp_ln316_reg_516, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln313_reg_495 = ap_const_lv1_1) or (icmp_ln316_reg_516 = ap_const_lv1_0))) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_s_phi_fu_155_p4_assign_proc : process(icmp_ln313_reg_495, r_V_reg_510, icmp_ln316_reg_516, ap_CS_fsm_state4, p_Val2_s_reg_152)
    begin
        if (((icmp_ln316_reg_516 = ap_const_lv1_0) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_p_Val2_s_phi_fu_155_p4 <= r_V_reg_510;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_155_p4 <= p_Val2_s_reg_152;
        end if; 
    end process;


    ap_phi_mux_shift_1_phi_fu_165_p4_assign_proc : process(icmp_ln313_reg_495, shift_reg_504, icmp_ln316_reg_516, ap_CS_fsm_state4, shift_1_reg_162)
    begin
        if (((icmp_ln316_reg_516 = ap_const_lv1_0) and (icmp_ln313_reg_495 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_phi_mux_shift_1_phi_fu_165_p4 <= shift_reg_504;
        else 
            ap_phi_mux_shift_1_phi_fu_165_p4 <= shift_1_reg_162;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln313_reg_495, icmp_ln316_reg_516, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln313_reg_495 = ap_const_lv1_1) or (icmp_ln316_reg_516 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(icmp_ln313_reg_495, icmp_ln316_reg_516, ap_CS_fsm_state4, bitcast_ln348_fu_452_p1, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln313_reg_495 = ap_const_lv1_1) or (icmp_ln316_reg_516 = ap_const_lv1_0)))) then 
            ap_return <= bitcast_ln348_fu_452_p1;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln348_fu_452_p1 <= p_Result_44_fu_442_p4;
    
    c_0_fu_268_p3_proc : process(p_Result_43_fu_260_p3)
    begin
        c_0_fu_268_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_43_fu_260_p3(i) = '1' then
                c_0_fu_268_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    c_1_1_fu_276_p3 <= 
        c_0_020_reg_84 when (trunc_ln510_fu_238_p1(0) = '1') else 
        c_0_fu_268_p3;
    c_1_2_fu_284_p3 <= 
        c_0_fu_268_p3 when (trunc_ln510_fu_238_p1(0) = '1') else 
        c_1_019_reg_96;
    empty_fu_412_p1 <= newexp_fu_387_p2(8 - 1 downto 0);
    i_2_fu_298_p2 <= std_logic_vector(unsigned(i2_0_reg_141) + unsigned(ap_const_lv2_1));
    i_fu_232_p2 <= std_logic_vector(unsigned(i1_0_reg_108) + unsigned(ap_const_lv2_1));
    icmp_ln1452_fu_401_p2 <= "1" when (in_V = ap_const_lv29_0) else "0";
    icmp_ln306_fu_226_p2 <= "1" when (i1_0_reg_108 = ap_const_lv2_2) else "0";
    icmp_ln313_fu_292_p2 <= "1" when (i2_0_reg_141 = ap_const_lv2_2) else "0";
    icmp_ln316_fu_372_p2 <= "1" when (select_ln314_fu_308_p3 = ap_const_lv32_10) else "0";
    isNeg_fu_322_p3 <= select_ln314_fu_308_p3(31 downto 31);
    lshr_ln1287_fu_348_p2 <= std_logic_vector(shift_right(unsigned(p_0107_0_reg_119),to_integer(unsigned('0' & ushcast_fu_344_p1(29-1 downto 0)))));
    newexp_fu_387_p2 <= std_logic_vector(signed(sext_ln324_fu_383_p1) - signed(ap_phi_mux_shift_1_phi_fu_165_p4));
    or_ln330_fu_406_p2 <= (tmp_10_fu_393_p3 or icmp_ln1452_fu_401_p2);
    out_bits_0_V_fu_190_p5 <= (tmp_fu_182_p3 & ap_const_lv32_0(14 downto 0));
    out_exp_V_fu_434_p3 <= 
        ap_const_lv8_0 when (or_ln330_fu_406_p2(0) = '1') else 
        empty_fu_412_p1;
    p_Result_1_fu_172_p4 <= in_V(28 downto 13);
    p_Result_43_fu_260_p3 <= 
        tmp_2_fu_251_p4 when (trunc_ln510_fu_238_p1(0) = '1') else 
        tmp_1_fu_242_p4;
    p_Result_44_fu_442_p4 <= ((ap_const_lv1_0 & out_exp_V_fu_434_p3) & significand_V_fu_426_p3);
    p_Result_s_fu_214_p5 <= (tmp_s_fu_206_p3 & ap_const_lv32_0(17 downto 0));
    phitmp1_fu_416_p4 <= ap_phi_mux_p_Val2_s_phi_fu_155_p4(27 downto 5);
    r_V_fu_364_p3 <= 
        lshr_ln1287_fu_348_p2 when (isNeg_fu_322_p3(0) = '1') else 
        shl_ln1253_fu_358_p2;
    select_ln314_fu_308_p3 <= 
        c_1_019_reg_96 when (trunc_ln314_fu_304_p1(0) = '1') else 
        c_0_020_reg_84;
        sext_ln324_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln324_fu_378_p2),32));

    shift_fu_316_p2 <= std_logic_vector(unsigned(select_ln314_fu_308_p3) + unsigned(shift_0_reg_129));
    shl_ln1253_fu_358_p2 <= std_logic_vector(shift_left(unsigned(p_0107_0_reg_119),to_integer(unsigned('0' & ushcast6_fu_354_p1(29-1 downto 0)))));
    significand_V_fu_426_p3 <= 
        ap_const_lv23_0 when (or_ln330_fu_406_p2(0) = '1') else 
        phitmp1_fu_416_p4;
    sub_ln1311_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln314_fu_308_p3));
    sub_ln324_fu_378_p2 <= std_logic_vector(unsigned(ap_const_lv9_7F) - unsigned(prescale));
    tmp_10_fu_393_p3 <= newexp_fu_387_p2(31 downto 31);
    
    tmp_1_fu_242_p4_proc : process(out_bits_0_V_reg_467)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_1_fu_242_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := out_bits_0_V_reg_467;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_1_fu_242_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_1_fu_242_p4_i) := out_bits_0_V_reg_467(32-1-tmp_1_fu_242_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_242_p4 <= resvalue(32-1 downto 0);
    end process;

    
    tmp_2_fu_251_p4_proc : process(p_Result_s_reg_472)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_2_fu_251_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := p_Result_s_reg_472;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for tmp_2_fu_251_p4_i in 0 to 32-1 loop
                v0_cpy(tmp_2_fu_251_p4_i) := p_Result_s_reg_472(32-1-tmp_2_fu_251_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_251_p4 <= resvalue(32-1 downto 0);
    end process;

    tmp_fu_182_p3 <= (p_Result_1_fu_172_p4 & ap_const_lv1_1);
    tmp_s_fu_206_p3 <= (trunc_ln566_fu_202_p1 & ap_const_lv1_1);
    trunc_ln314_fu_304_p1 <= i2_0_reg_141(1 - 1 downto 0);
    trunc_ln510_fu_238_p1 <= i1_0_reg_108(1 - 1 downto 0);
    trunc_ln566_fu_202_p1 <= in_V(13 - 1 downto 0);
    ush_fu_336_p3 <= 
        sub_ln1311_fu_330_p2 when (isNeg_fu_322_p3(0) = '1') else 
        select_ln314_fu_308_p3;
    ushcast6_fu_354_p1 <= ush_fu_336_p3(29 - 1 downto 0);
    ushcast_fu_344_p1 <= ush_fu_336_p3(29 - 1 downto 0);
end behav;
