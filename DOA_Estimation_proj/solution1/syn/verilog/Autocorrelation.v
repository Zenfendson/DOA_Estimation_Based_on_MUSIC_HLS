// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Autocorrelation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_M_real_address0,
        X_M_real_ce0,
        X_M_real_q0,
        X_M_real_address1,
        X_M_real_ce1,
        X_M_real_q1,
        X_M_imag_address0,
        X_M_imag_ce0,
        X_M_imag_q0,
        X_M_imag_address1,
        X_M_imag_ce1,
        X_M_imag_q1,
        Rx_M_real_address0,
        Rx_M_real_ce0,
        Rx_M_real_we0,
        Rx_M_real_d0,
        Rx_M_imag_address0,
        Rx_M_imag_ce0,
        Rx_M_imag_we0,
        Rx_M_imag_d0
);

parameter    ap_ST_fsm_state1 = 43'd1;
parameter    ap_ST_fsm_state2 = 43'd2;
parameter    ap_ST_fsm_state3 = 43'd4;
parameter    ap_ST_fsm_state4 = 43'd8;
parameter    ap_ST_fsm_state5 = 43'd16;
parameter    ap_ST_fsm_state6 = 43'd32;
parameter    ap_ST_fsm_state7 = 43'd64;
parameter    ap_ST_fsm_state8 = 43'd128;
parameter    ap_ST_fsm_state9 = 43'd256;
parameter    ap_ST_fsm_state10 = 43'd512;
parameter    ap_ST_fsm_state11 = 43'd1024;
parameter    ap_ST_fsm_state12 = 43'd2048;
parameter    ap_ST_fsm_state13 = 43'd4096;
parameter    ap_ST_fsm_state14 = 43'd8192;
parameter    ap_ST_fsm_state15 = 43'd16384;
parameter    ap_ST_fsm_state16 = 43'd32768;
parameter    ap_ST_fsm_state17 = 43'd65536;
parameter    ap_ST_fsm_state18 = 43'd131072;
parameter    ap_ST_fsm_state19 = 43'd262144;
parameter    ap_ST_fsm_state20 = 43'd524288;
parameter    ap_ST_fsm_state21 = 43'd1048576;
parameter    ap_ST_fsm_state22 = 43'd2097152;
parameter    ap_ST_fsm_state23 = 43'd4194304;
parameter    ap_ST_fsm_state24 = 43'd8388608;
parameter    ap_ST_fsm_state25 = 43'd16777216;
parameter    ap_ST_fsm_state26 = 43'd33554432;
parameter    ap_ST_fsm_state27 = 43'd67108864;
parameter    ap_ST_fsm_state28 = 43'd134217728;
parameter    ap_ST_fsm_state29 = 43'd268435456;
parameter    ap_ST_fsm_state30 = 43'd536870912;
parameter    ap_ST_fsm_state31 = 43'd1073741824;
parameter    ap_ST_fsm_state32 = 43'd2147483648;
parameter    ap_ST_fsm_state33 = 43'd4294967296;
parameter    ap_ST_fsm_state34 = 43'd8589934592;
parameter    ap_ST_fsm_state35 = 43'd17179869184;
parameter    ap_ST_fsm_state36 = 43'd34359738368;
parameter    ap_ST_fsm_state37 = 43'd68719476736;
parameter    ap_ST_fsm_state38 = 43'd137438953472;
parameter    ap_ST_fsm_state39 = 43'd274877906944;
parameter    ap_ST_fsm_state40 = 43'd549755813888;
parameter    ap_ST_fsm_state41 = 43'd1099511627776;
parameter    ap_ST_fsm_state42 = 43'd2199023255552;
parameter    ap_ST_fsm_state43 = 43'd4398046511104;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] X_M_real_address0;
output   X_M_real_ce0;
input  [31:0] X_M_real_q0;
output  [5:0] X_M_real_address1;
output   X_M_real_ce1;
input  [31:0] X_M_real_q1;
output  [5:0] X_M_imag_address0;
output   X_M_imag_ce0;
input  [31:0] X_M_imag_q0;
output  [5:0] X_M_imag_address1;
output   X_M_imag_ce1;
input  [31:0] X_M_imag_q1;
output  [3:0] Rx_M_real_address0;
output   Rx_M_real_ce0;
output   Rx_M_real_we0;
output  [31:0] Rx_M_real_d0;
output  [3:0] Rx_M_imag_address0;
output   Rx_M_imag_ce0;
output   Rx_M_imag_we0;
output  [31:0] Rx_M_imag_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_M_real_ce0;
reg X_M_real_ce1;
reg X_M_imag_ce0;
reg X_M_imag_ce1;
reg Rx_M_real_ce0;
reg Rx_M_real_we0;
reg Rx_M_imag_ce0;
reg Rx_M_imag_we0;

(* fsm_encoding = "none" *) reg   [42:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] reg_219;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_189_p2;
reg   [31:0] reg_224;
wire   [31:0] grp_fu_195_p2;
reg   [31:0] reg_229;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] reg_234;
wire   [31:0] grp_fu_173_p2;
reg   [31:0] reg_239;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state27;
wire   [31:0] grp_fu_177_p2;
reg   [31:0] reg_245;
wire   [2:0] x_fu_257_p2;
reg   [2:0] x_reg_374;
wire    ap_CS_fsm_state2;
wire   [6:0] zext_ln96_fu_263_p1;
reg   [6:0] zext_ln96_reg_379;
wire   [0:0] icmp_ln90_fu_251_p2;
wire   [5:0] zext_ln91_fu_275_p1;
reg   [5:0] zext_ln91_reg_384;
wire   [2:0] y_fu_285_p2;
reg   [2:0] y_reg_392;
wire    ap_CS_fsm_state3;
wire   [6:0] zext_ln96_1_fu_291_p1;
reg   [6:0] zext_ln96_1_reg_397;
wire   [0:0] icmp_ln91_fu_279_p2;
reg   [3:0] Rx_M_real_addr11_reg_402;
reg   [3:0] Rx_M_imag_addr_reg_407;
wire   [3:0] l_fu_316_p2;
reg   [3:0] l_reg_415;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln93_fu_310_p2;
reg   [31:0] p_t_real_reg_440;
wire    ap_CS_fsm_state5;
reg   [31:0] X_M_imag_load_reg_446;
reg   [31:0] p_r_M_real_17_reg_451;
reg   [31:0] p_r_M_imag_16_reg_457;
wire   [31:0] p_t_imag_fu_365_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state19;
reg   [2:0] x_0_reg_116;
reg   [2:0] y_0_reg_127;
wire    ap_CS_fsm_state43;
reg   [31:0] p_r_M_imag_reg_138;
reg   [31:0] p_r_M_real_reg_150;
reg   [3:0] l_0_reg_162;
wire   [63:0] zext_ln96_3_fu_304_p1;
wire   [63:0] zext_ln94_1_fu_339_p1;
wire   [63:0] zext_ln94_2_fu_350_p1;
wire   [31:0] grp_fu_207_p2;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] grp_fu_173_p0;
reg   [31:0] grp_fu_173_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_177_p0;
reg   [31:0] grp_fu_177_p1;
reg   [31:0] grp_fu_183_p0;
reg   [31:0] grp_fu_183_p1;
reg   [31:0] grp_fu_189_p0;
reg   [31:0] grp_fu_189_p1;
reg   [31:0] grp_fu_195_p0;
reg   [31:0] grp_fu_195_p1;
reg   [31:0] grp_fu_201_p0;
reg   [31:0] grp_fu_201_p1;
wire    ap_CS_fsm_state28;
wire   [4:0] tmp_fu_267_p3;
wire   [5:0] zext_ln96_2_fu_295_p1;
wire   [5:0] add_ln96_fu_299_p2;
wire   [5:0] tmp_s_fu_322_p3;
wire   [6:0] zext_ln94_fu_330_p1;
wire   [6:0] add_ln94_fu_334_p2;
wire   [6:0] add_ln94_1_fu_345_p2;
wire   [31:0] bitcast_ln667_fu_356_p1;
wire   [31:0] xor_ln667_fu_359_p2;
reg   [1:0] grp_fu_173_opcode;
reg   [1:0] grp_fu_177_opcode;
reg   [42:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 43'd1;
end

music_faddfsub_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_faddfsub_32ibs_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_173_p0),
    .din1(grp_fu_173_p1),
    .opcode(grp_fu_173_opcode),
    .ce(1'b1),
    .dout(grp_fu_173_p2)
);

music_faddfsub_32ibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_faddfsub_32ibs_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_177_p0),
    .din1(grp_fu_177_p1),
    .opcode(grp_fu_177_opcode),
    .ce(1'b1),
    .dout(grp_fu_177_p2)
);

music_fmul_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3jbC_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_183_p0),
    .din1(grp_fu_183_p1),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

music_fmul_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3jbC_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_189_p0),
    .din1(grp_fu_189_p1),
    .ce(1'b1),
    .dout(grp_fu_189_p2)
);

music_fmul_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3jbC_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_195_p0),
    .din1(grp_fu_195_p1),
    .ce(1'b1),
    .dout(grp_fu_195_p2)
);

music_fmul_32ns_3jbC #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fmul_32ns_3jbC_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_201_p0),
    .din1(grp_fu_201_p1),
    .ce(1'b1),
    .dout(grp_fu_201_p2)
);

music_fdiv_32ns_3ncg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fdiv_32ns_3ncg_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_239),
    .din1(32'd1120403456),
    .ce(1'b1),
    .dout(grp_fu_207_p2)
);

music_fdiv_32ns_3ncg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
music_fdiv_32ns_3ncg_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_245),
    .din1(32'd1120403456),
    .ce(1'b1),
    .dout(grp_fu_213_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        l_0_reg_162 <= l_reg_415;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln91_fu_279_p2 == 1'd0))) begin
        l_0_reg_162 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_r_M_imag_reg_138 <= grp_fu_177_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln91_fu_279_p2 == 1'd0))) begin
        p_r_M_imag_reg_138 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        p_r_M_real_reg_150 <= grp_fu_173_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln91_fu_279_p2 == 1'd0))) begin
        p_r_M_real_reg_150 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln91_fu_279_p2 == 1'd1))) begin
        x_0_reg_116 <= x_reg_374;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        x_0_reg_116 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        y_0_reg_127 <= y_reg_392;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln90_fu_251_p2 == 1'd0))) begin
        y_0_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln91_fu_279_p2 == 1'd0))) begin
        Rx_M_imag_addr_reg_407 <= zext_ln96_3_fu_304_p1;
        Rx_M_real_addr11_reg_402 <= zext_ln96_3_fu_304_p1;
        zext_ln96_1_reg_397[2 : 0] <= zext_ln96_1_fu_291_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        X_M_imag_load_reg_446 <= X_M_imag_q0;
        p_r_M_imag_16_reg_457 <= X_M_imag_q1;
        p_r_M_real_17_reg_451 <= X_M_real_q1;
        p_t_real_reg_440 <= X_M_real_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        l_reg_415 <= l_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_219 <= grp_fu_183_p2;
        reg_224 <= grp_fu_189_p2;
        reg_229 <= grp_fu_195_p2;
        reg_234 <= grp_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14))) begin
        reg_239 <= grp_fu_173_p2;
        reg_245 <= grp_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_reg_374 <= x_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        y_reg_392 <= y_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln90_fu_251_p2 == 1'd0))) begin
        zext_ln91_reg_384[4 : 2] <= zext_ln91_fu_275_p1[4 : 2];
        zext_ln96_reg_379[2 : 0] <= zext_ln96_fu_263_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        Rx_M_imag_ce0 = 1'b1;
    end else begin
        Rx_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        Rx_M_imag_we0 = 1'b1;
    end else begin
        Rx_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        Rx_M_real_ce0 = 1'b1;
    end else begin
        Rx_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        Rx_M_real_we0 = 1'b1;
    end else begin
        Rx_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X_M_imag_ce0 = 1'b1;
    end else begin
        X_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X_M_imag_ce1 = 1'b1;
    end else begin
        X_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X_M_real_ce0 = 1'b1;
    end else begin
        X_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X_M_real_ce1 = 1'b1;
    end else begin
        X_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln90_fu_251_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln90_fu_251_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_173_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_173_opcode = 2'd0;
    end else begin
        grp_fu_173_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_173_p0 = p_r_M_real_reg_150;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_173_p0 = reg_219;
    end else begin
        grp_fu_173_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_173_p1 = reg_239;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_173_p1 = reg_224;
    end else begin
        grp_fu_173_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_177_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_177_opcode = 2'd0;
    end else begin
        grp_fu_177_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_177_p0 = p_r_M_imag_reg_138;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_177_p0 = reg_229;
    end else begin
        grp_fu_177_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_177_p1 = reg_245;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        grp_fu_177_p1 = reg_234;
    end else begin
        grp_fu_177_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_183_p0 = p_r_M_real_17_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_183_p0 = p_r_M_real_reg_150;
    end else begin
        grp_fu_183_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_183_p1 = p_t_real_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_183_p1 = 32'd1092616192;
    end else begin
        grp_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_189_p0 = p_r_M_imag_16_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_189_p0 = p_r_M_imag_reg_138;
    end else begin
        grp_fu_189_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_189_p1 = p_t_imag_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_189_p1 = 32'd0;
    end else begin
        grp_fu_189_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_195_p0 = p_r_M_imag_16_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_195_p0 = p_r_M_imag_reg_138;
    end else begin
        grp_fu_195_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_195_p1 = p_t_real_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_195_p1 = 32'd1092616192;
    end else begin
        grp_fu_195_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_201_p0 = p_r_M_real_17_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_201_p0 = p_r_M_real_reg_150;
    end else begin
        grp_fu_201_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_201_p1 = p_t_imag_fu_365_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_201_p1 = 32'd0;
    end else begin
        grp_fu_201_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln90_fu_251_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln91_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln93_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rx_M_imag_address0 = Rx_M_imag_addr_reg_407;

assign Rx_M_imag_d0 = grp_fu_213_p2;

assign Rx_M_real_address0 = Rx_M_real_addr11_reg_402;

assign Rx_M_real_d0 = grp_fu_207_p2;

assign X_M_imag_address0 = zext_ln94_2_fu_350_p1;

assign X_M_imag_address1 = zext_ln94_1_fu_339_p1;

assign X_M_real_address0 = zext_ln94_2_fu_350_p1;

assign X_M_real_address1 = zext_ln94_1_fu_339_p1;

assign add_ln94_1_fu_345_p2 = (zext_ln96_1_reg_397 + zext_ln94_fu_330_p1);

assign add_ln94_fu_334_p2 = (zext_ln96_reg_379 + zext_ln94_fu_330_p1);

assign add_ln96_fu_299_p2 = (zext_ln91_reg_384 + zext_ln96_2_fu_295_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln667_fu_356_p1 = X_M_imag_load_reg_446;

assign icmp_ln90_fu_251_p2 = ((x_0_reg_116 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_279_p2 = ((y_0_reg_127 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_310_p2 = ((l_0_reg_162 == 4'd10) ? 1'b1 : 1'b0);

assign l_fu_316_p2 = (l_0_reg_162 + 4'd1);

assign p_t_imag_fu_365_p1 = xor_ln667_fu_359_p2;

assign tmp_fu_267_p3 = {{x_0_reg_116}, {2'd0}};

assign tmp_s_fu_322_p3 = {{l_0_reg_162}, {2'd0}};

assign x_fu_257_p2 = (x_0_reg_116 + 3'd1);

assign xor_ln667_fu_359_p2 = (bitcast_ln667_fu_356_p1 ^ 32'd2147483648);

assign y_fu_285_p2 = (y_0_reg_127 + 3'd1);

assign zext_ln91_fu_275_p1 = tmp_fu_267_p3;

assign zext_ln94_1_fu_339_p1 = add_ln94_fu_334_p2;

assign zext_ln94_2_fu_350_p1 = add_ln94_1_fu_345_p2;

assign zext_ln94_fu_330_p1 = tmp_s_fu_322_p3;

assign zext_ln96_1_fu_291_p1 = y_0_reg_127;

assign zext_ln96_2_fu_295_p1 = y_0_reg_127;

assign zext_ln96_3_fu_304_p1 = add_ln96_fu_299_p2;

assign zext_ln96_fu_263_p1 = x_0_reg_116;

always @ (posedge ap_clk) begin
    zext_ln96_reg_379[6:3] <= 4'b0000;
    zext_ln91_reg_384[1:0] <= 2'b00;
    zext_ln91_reg_384[5] <= 1'b0;
    zext_ln96_1_reg_397[6:3] <= 4'b0000;
end

endmodule //Autocorrelation
