// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sort_eigval (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        eigval_0_read,
        eigval_1_read,
        eigval_2_read,
        eigval_3_read,
        sort_index_0_read,
        sort_index_1_read,
        sort_index_2_read,
        sort_index_3_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] eigval_0_read;
input  [31:0] eigval_1_read;
input  [31:0] eigval_2_read;
input  [31:0] eigval_3_read;
input  [31:0] sort_index_0_read;
input  [31:0] sort_index_1_read;
input  [31:0] sort_index_2_read;
input  [31:0] sort_index_3_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;
reg[31:0] ap_return_2;
reg[31:0] ap_return_3;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_264_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] sort_index_3_1_fu_274_p6;
wire   [0:0] icmp_ln73_fu_258_p2;
wire   [31:0] sort_index_2_1_fu_288_p6;
wire   [31:0] sort_index_1_1_fu_302_p6;
wire   [31:0] sort_index_0_1_fu_316_p6;
wire   [31:0] zext_ln77_fu_330_p1;
wire    ap_CS_fsm_state3;
wire   [1:0] i_1_fu_340_p2;
reg   [1:0] i_1_reg_726;
wire   [31:0] j_2_fu_374_p2;
reg   [31:0] j_2_reg_731;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_1_fu_408_p6;
reg   [31:0] tmp_1_reg_740;
wire   [0:0] icmp_ln78_fu_380_p2;
wire   [31:0] tmp_3_fu_442_p6;
reg   [31:0] tmp_3_reg_746;
wire   [1:0] trunc_ln84_fu_452_p1;
reg   [1:0] trunc_ln84_reg_752;
wire   [31:0] temp_fu_456_p6;
reg   [31:0] temp_reg_760;
wire   [0:0] icmp_ln79_fu_504_p2;
reg   [0:0] icmp_ln79_reg_768;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln79_1_fu_510_p2;
reg   [0:0] icmp_ln79_1_reg_773;
wire   [0:0] icmp_ln79_2_fu_516_p2;
reg   [0:0] icmp_ln79_2_reg_778;
wire   [0:0] icmp_ln79_3_fu_522_p2;
reg   [0:0] icmp_ln79_3_reg_783;
wire   [31:0] j_fu_548_p3;
wire    ap_CS_fsm_state6;
wire   [31:0] sort_index_3_3_fu_555_p6;
wire    ap_CS_fsm_state7;
wire   [31:0] sort_index_2_4_fu_607_p6;
wire   [31:0] sort_index_1_4_fu_619_p6;
wire   [31:0] sort_index_0_4_fu_632_p6;
reg   [31:0] sort_index_0_0_reg_110;
reg   [31:0] sort_index_1_0_reg_120;
reg   [31:0] sort_index_2_0_reg_130;
reg   [31:0] sort_index_3_0_reg_140;
reg   [2:0] i_0_reg_150;
reg   [31:0] sort_index_0_2_reg_161;
reg   [31:0] sort_index_1_2_reg_172;
reg   [31:0] sort_index_2_2_reg_183;
reg   [31:0] sort_index_3_2_reg_194;
reg   [1:0] flag_reg_205;
reg   [31:0] flag_0_reg_217;
wire   [0:0] icmp_ln76_fu_334_p2;
reg   [31:0] j_0_in_reg_227;
reg   [31:0] phi_ln85_reg_236;
wire   [31:0] zext_ln73_fu_254_p1;
wire   [1:0] trunc_ln74_fu_270_p1;
wire   [1:0] tmp_fu_390_p5;
wire   [31:0] tmp_fu_390_p6;
wire   [1:0] tmp_1_fu_408_p5;
wire   [1:0] trunc_ln78_fu_370_p1;
wire   [1:0] tmp_2_fu_424_p5;
wire   [31:0] tmp_2_fu_424_p6;
wire   [1:0] tmp_3_fu_442_p5;
wire   [1:0] temp_fu_456_p5;
wire   [31:0] bitcast_ln79_fu_470_p1;
wire   [31:0] bitcast_ln79_1_fu_487_p1;
wire   [7:0] tmp_4_fu_473_p4;
wire   [22:0] trunc_ln79_3_fu_483_p1;
wire   [7:0] tmp_5_fu_490_p4;
wire   [22:0] trunc_ln79_4_fu_500_p1;
wire   [0:0] or_ln79_fu_528_p2;
wire   [0:0] or_ln79_1_fu_532_p2;
wire   [0:0] and_ln79_fu_536_p2;
wire   [0:0] grp_fu_250_p2;
wire   [0:0] and_ln79_1_fu_542_p2;
wire   [31:0] sort_index_2_3_fu_568_p6;
wire   [31:0] sort_index_1_3_fu_581_p6;
wire   [31:0] sort_index_0_3_fu_594_p6;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [31:0] ap_return_2_preg;
reg   [31:0] ap_return_3_preg;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
#0 ap_return_2_preg = 32'd0;
#0 ap_return_3_preg = 32'd0;
end

music_fcmp_32ns_3pcA #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
music_fcmp_32ns_3pcA_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_740),
    .din1(tmp_3_reg_746),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_250_p2)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U173(
    .din0(sort_index_3_0_reg_140),
    .din1(sort_index_3_0_reg_140),
    .din2(sort_index_3_0_reg_140),
    .din3(zext_ln73_fu_254_p1),
    .din4(trunc_ln74_fu_270_p1),
    .dout(sort_index_3_1_fu_274_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U174(
    .din0(sort_index_2_0_reg_130),
    .din1(sort_index_2_0_reg_130),
    .din2(zext_ln73_fu_254_p1),
    .din3(sort_index_2_0_reg_130),
    .din4(trunc_ln74_fu_270_p1),
    .dout(sort_index_2_1_fu_288_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U175(
    .din0(sort_index_1_0_reg_120),
    .din1(zext_ln73_fu_254_p1),
    .din2(sort_index_1_0_reg_120),
    .din3(sort_index_1_0_reg_120),
    .din4(trunc_ln74_fu_270_p1),
    .dout(sort_index_1_1_fu_302_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U176(
    .din0(zext_ln73_fu_254_p1),
    .din1(sort_index_0_0_reg_110),
    .din2(sort_index_0_0_reg_110),
    .din3(sort_index_0_0_reg_110),
    .din4(trunc_ln74_fu_270_p1),
    .dout(sort_index_0_1_fu_316_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U177(
    .din0(sort_index_0_2_reg_161),
    .din1(sort_index_1_2_reg_172),
    .din2(sort_index_2_2_reg_183),
    .din3(sort_index_3_2_reg_194),
    .din4(tmp_fu_390_p5),
    .dout(tmp_fu_390_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U178(
    .din0(eigval_0_read),
    .din1(eigval_1_read),
    .din2(eigval_2_read),
    .din3(eigval_3_read),
    .din4(tmp_1_fu_408_p5),
    .dout(tmp_1_fu_408_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U179(
    .din0(sort_index_0_2_reg_161),
    .din1(sort_index_1_2_reg_172),
    .din2(sort_index_2_2_reg_183),
    .din3(sort_index_3_2_reg_194),
    .din4(tmp_2_fu_424_p5),
    .dout(tmp_2_fu_424_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U180(
    .din0(eigval_0_read),
    .din1(eigval_1_read),
    .din2(eigval_2_read),
    .din3(eigval_3_read),
    .din4(tmp_3_fu_442_p5),
    .dout(tmp_3_fu_442_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U181(
    .din0(sort_index_0_2_reg_161),
    .din1(sort_index_1_2_reg_172),
    .din2(sort_index_2_2_reg_183),
    .din3(sort_index_3_2_reg_194),
    .din4(temp_fu_456_p5),
    .dout(temp_fu_456_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U182(
    .din0(sort_index_3_2_reg_194),
    .din1(sort_index_3_2_reg_194),
    .din2(sort_index_3_2_reg_194),
    .din3(phi_ln85_reg_236),
    .din4(trunc_ln84_reg_752),
    .dout(sort_index_3_3_fu_555_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U183(
    .din0(sort_index_2_2_reg_183),
    .din1(sort_index_2_2_reg_183),
    .din2(phi_ln85_reg_236),
    .din3(sort_index_2_2_reg_183),
    .din4(trunc_ln84_reg_752),
    .dout(sort_index_2_3_fu_568_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U184(
    .din0(sort_index_1_2_reg_172),
    .din1(phi_ln85_reg_236),
    .din2(sort_index_1_2_reg_172),
    .din3(sort_index_1_2_reg_172),
    .din4(trunc_ln84_reg_752),
    .dout(sort_index_1_3_fu_581_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U185(
    .din0(phi_ln85_reg_236),
    .din1(sort_index_0_2_reg_161),
    .din2(sort_index_0_2_reg_161),
    .din3(sort_index_0_2_reg_161),
    .din4(trunc_ln84_reg_752),
    .dout(sort_index_0_3_fu_594_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U186(
    .din0(sort_index_2_3_fu_568_p6),
    .din1(sort_index_2_3_fu_568_p6),
    .din2(temp_reg_760),
    .din3(temp_reg_760),
    .din4(flag_reg_205),
    .dout(sort_index_2_4_fu_607_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U187(
    .din0(sort_index_1_3_fu_581_p6),
    .din1(temp_reg_760),
    .din2(sort_index_1_3_fu_581_p6),
    .din3(sort_index_1_3_fu_581_p6),
    .din4(flag_reg_205),
    .dout(sort_index_1_4_fu_619_p6)
);

music_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
music_mux_42_32_1_1_U188(
    .din0(temp_reg_760),
    .din1(sort_index_0_3_fu_594_p6),
    .din2(sort_index_0_3_fu_594_p6),
    .din3(sort_index_0_3_fu_594_p6),
    .din4(flag_reg_205),
    .dout(sort_index_0_4_fu_632_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
            ap_return_0_preg <= sort_index_0_2_reg_161;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
            ap_return_1_preg <= sort_index_1_2_reg_172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
            ap_return_2_preg <= sort_index_2_2_reg_183;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 32'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
            ap_return_3_preg <= sort_index_3_2_reg_194;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        flag_0_reg_217 <= zext_ln77_fu_330_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        flag_0_reg_217 <= j_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        flag_reg_205 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        flag_reg_205 <= i_1_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_150 <= i_fu_264_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_150 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_in_reg_227 <= zext_ln77_fu_330_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_0_in_reg_227 <= j_2_reg_731;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((flag_reg_205 == 2'd0)) begin
            phi_ln85_reg_236 <= sort_index_0_2_reg_161;
        end else if ((~(flag_reg_205 == 2'd0) & ~(flag_reg_205 == 2'd1))) begin
            phi_ln85_reg_236 <= sort_index_2_2_reg_183;
        end else if ((flag_reg_205 == 2'd1)) begin
            phi_ln85_reg_236 <= sort_index_1_2_reg_172;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_0_0_reg_110 <= sort_index_0_1_fu_316_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sort_index_0_0_reg_110 <= sort_index_0_read;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_0_2_reg_161 <= sort_index_0_0_reg_110;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sort_index_0_2_reg_161 <= sort_index_0_4_fu_632_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_1_0_reg_120 <= sort_index_1_1_fu_302_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sort_index_1_0_reg_120 <= sort_index_1_read;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_1_2_reg_172 <= sort_index_1_0_reg_120;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sort_index_1_2_reg_172 <= sort_index_1_4_fu_619_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_2_0_reg_130 <= sort_index_2_1_fu_288_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sort_index_2_0_reg_130 <= sort_index_2_read;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_2_2_reg_183 <= sort_index_2_0_reg_130;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sort_index_2_2_reg_183 <= sort_index_2_4_fu_607_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_3_0_reg_140 <= sort_index_3_1_fu_274_p6;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sort_index_3_0_reg_140 <= sort_index_3_read;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln73_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        sort_index_3_2_reg_194 <= sort_index_3_0_reg_140;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sort_index_3_2_reg_194 <= sort_index_3_3_fu_555_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_726 <= i_1_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln79_1_reg_773 <= icmp_ln79_1_fu_510_p2;
        icmp_ln79_2_reg_778 <= icmp_ln79_2_fu_516_p2;
        icmp_ln79_3_reg_783 <= icmp_ln79_3_fu_522_p2;
        icmp_ln79_reg_768 <= icmp_ln79_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_2_reg_731 <= j_2_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        temp_reg_760 <= temp_fu_456_p6;
        trunc_ln84_reg_752 <= trunc_ln84_fu_452_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln78_fu_380_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_1_reg_740 <= tmp_1_fu_408_p6;
        tmp_3_reg_746 <= tmp_3_fu_442_p6;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
        ap_return_0 = sort_index_0_2_reg_161;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
        ap_return_1 = sort_index_1_2_reg_172;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
        ap_return_2 = sort_index_2_2_reg_183;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
        ap_return_3 = sort_index_3_2_reg_194;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln73_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln76_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln78_fu_380_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln79_1_fu_542_p2 = (grp_fu_250_p2 & and_ln79_fu_536_p2);

assign and_ln79_fu_536_p2 = (or_ln79_fu_528_p2 & or_ln79_1_fu_532_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln79_1_fu_487_p1 = tmp_3_reg_746;

assign bitcast_ln79_fu_470_p1 = tmp_1_reg_740;

assign i_1_fu_340_p2 = (flag_reg_205 + 2'd1);

assign i_fu_264_p2 = (i_0_reg_150 + 3'd1);

assign icmp_ln73_fu_258_p2 = ((i_0_reg_150 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_334_p2 = ((flag_reg_205 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_380_p2 = ((j_0_in_reg_227 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_510_p2 = ((trunc_ln79_3_fu_483_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_2_fu_516_p2 = ((tmp_5_fu_490_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln79_3_fu_522_p2 = ((trunc_ln79_4_fu_500_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_504_p2 = ((tmp_4_fu_473_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_2_fu_374_p2 = (32'd1 + j_0_in_reg_227);

assign j_fu_548_p3 = ((and_ln79_1_fu_542_p2[0:0] === 1'b1) ? j_2_reg_731 : flag_0_reg_217);

assign or_ln79_1_fu_532_p2 = (icmp_ln79_3_reg_783 | icmp_ln79_2_reg_778);

assign or_ln79_fu_528_p2 = (icmp_ln79_reg_768 | icmp_ln79_1_reg_773);

assign temp_fu_456_p5 = flag_0_reg_217[1:0];

assign tmp_1_fu_408_p5 = tmp_fu_390_p6[1:0];

assign tmp_2_fu_424_p5 = (2'd1 + trunc_ln78_fu_370_p1);

assign tmp_3_fu_442_p5 = tmp_2_fu_424_p6[1:0];

assign tmp_4_fu_473_p4 = {{bitcast_ln79_fu_470_p1[30:23]}};

assign tmp_5_fu_490_p4 = {{bitcast_ln79_1_fu_487_p1[30:23]}};

assign tmp_fu_390_p5 = flag_0_reg_217[1:0];

assign trunc_ln74_fu_270_p1 = i_0_reg_150[1:0];

assign trunc_ln78_fu_370_p1 = j_0_in_reg_227[1:0];

assign trunc_ln79_3_fu_483_p1 = bitcast_ln79_fu_470_p1[22:0];

assign trunc_ln79_4_fu_500_p1 = bitcast_ln79_1_fu_487_p1[22:0];

assign trunc_ln84_fu_452_p1 = flag_0_reg_217[1:0];

assign zext_ln73_fu_254_p1 = i_0_reg_150;

assign zext_ln77_fu_330_p1 = flag_reg_205;

endmodule //sort_eigval
