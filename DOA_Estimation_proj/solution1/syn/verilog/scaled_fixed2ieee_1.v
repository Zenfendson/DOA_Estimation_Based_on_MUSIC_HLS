// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaled_fixed2ieee_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    ap_const_lv32_0 = 32'd0;


input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [28:0] in_V;
input  [8:0] prescale;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] out_bits_0_V_fu_190_p5;
reg   [31:0] out_bits_0_V_reg_467;
wire   [31:0] p_Result_s_fu_214_p5;
reg   [31:0] p_Result_s_reg_472;
wire   [1:0] i_fu_232_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] c_1_1_fu_276_p3;
wire   [0:0] icmp_ln306_fu_226_p2;
wire   [31:0] c_1_2_fu_284_p3;
wire   [0:0] icmp_ln313_fu_292_p2;
reg   [0:0] icmp_ln313_reg_495;
wire    ap_CS_fsm_state3;
wire   [1:0] i_2_fu_298_p2;
reg   [1:0] i_2_reg_499;
wire   [31:0] shift_fu_316_p2;
reg   [31:0] shift_reg_504;
wire   [28:0] r_V_fu_364_p3;
reg   [28:0] r_V_reg_510;
wire   [0:0] icmp_ln316_fu_372_p2;
reg   [0:0] icmp_ln316_reg_516;
reg   [31:0] c_0_020_reg_84;
reg   [31:0] c_1_019_reg_96;
reg   [1:0] i1_0_reg_108;
reg   [28:0] p_0107_0_reg_119;
wire    ap_CS_fsm_state4;
reg   [31:0] shift_0_reg_129;
reg   [1:0] i2_0_reg_141;
reg   [28:0] ap_phi_mux_p_Val2_s_phi_fu_155_p4;
reg   [28:0] p_Val2_s_reg_152;
reg   [31:0] ap_phi_mux_shift_1_phi_fu_165_p4;
reg   [31:0] shift_1_reg_162;
wire   [15:0] p_Result_1_fu_172_p4;
wire   [16:0] tmp_fu_182_p3;
wire   [12:0] trunc_ln566_fu_202_p1;
wire   [13:0] tmp_s_fu_206_p3;
wire   [0:0] trunc_ln510_fu_238_p1;
reg   [31:0] tmp_2_fu_251_p4;
reg   [31:0] tmp_1_fu_242_p4;
wire   [31:0] p_Result_43_fu_260_p3;
reg   [31:0] c_0_fu_268_p3;
wire   [0:0] trunc_ln314_fu_304_p1;
wire   [31:0] select_ln314_fu_308_p3;
wire   [0:0] isNeg_fu_322_p3;
wire   [31:0] sub_ln1311_fu_330_p2;
wire   [31:0] ush_fu_336_p3;
wire   [28:0] ushcast_fu_344_p1;
wire   [28:0] ushcast6_fu_354_p1;
wire   [28:0] lshr_ln1287_fu_348_p2;
wire   [28:0] shl_ln1253_fu_358_p2;
wire   [8:0] sub_ln324_fu_378_p2;
wire  signed [31:0] sext_ln324_fu_383_p1;
wire   [31:0] newexp_fu_387_p2;
wire   [0:0] tmp_10_fu_393_p3;
wire   [0:0] icmp_ln1452_fu_401_p2;
wire   [0:0] or_ln330_fu_406_p2;
wire   [22:0] phitmp1_fu_416_p4;
wire   [7:0] empty_fu_412_p1;
wire   [7:0] out_exp_V_fu_434_p3;
wire   [22:0] significand_V_fu_426_p3;
wire   [31:0] p_Result_44_fu_442_p4;
wire   [31:0] bitcast_ln348_fu_452_p1;
reg   [31:0] ap_return_preg;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_return_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln313_reg_495 == 1'd1) | (icmp_ln316_reg_516 == 1'd0)))) begin
                        ap_return_preg[30 : 0] <= bitcast_ln348_fu_452_p1[30 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i1_0_reg_108 <= i_fu_232_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i1_0_reg_108 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i2_0_reg_141 <= 2'd0;
    end else if (((icmp_ln316_reg_516 == 1'd1) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i2_0_reg_141 <= i_2_reg_499;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0107_0_reg_119 <= in_V;
    end else if (((icmp_ln316_reg_516 == 1'd1) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0107_0_reg_119 <= r_V_reg_510;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln316_reg_516 == 1'd0) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_152 <= r_V_reg_510;
    end else if (((icmp_ln313_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_s_reg_152 <= p_0107_0_reg_119;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_0_reg_129 <= 32'd0;
    end else if (((icmp_ln316_reg_516 == 1'd1) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_0_reg_129 <= shift_reg_504;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln316_reg_516 == 1'd0) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shift_1_reg_162 <= shift_reg_504;
    end else if (((icmp_ln313_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        shift_1_reg_162 <= shift_0_reg_129;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln306_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_020_reg_84 <= c_1_1_fu_276_p3;
        c_1_019_reg_96 <= c_1_2_fu_284_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_2_reg_499 <= i_2_fu_298_p2;
        icmp_ln313_reg_495 <= icmp_ln313_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln313_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        icmp_ln316_reg_516 <= icmp_ln316_fu_372_p2;
        r_V_reg_510 <= r_V_fu_364_p3;
        shift_reg_504 <= shift_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        out_bits_0_V_reg_467 <= out_bits_0_V_fu_190_p5;
        p_Result_s_reg_472 <= p_Result_s_fu_214_p5;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ((icmp_ln313_reg_495 == 1'd1) | (icmp_ln316_reg_516 == 1'd0))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln316_reg_516 == 1'd0) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_p_Val2_s_phi_fu_155_p4 = r_V_reg_510;
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_155_p4 = p_Val2_s_reg_152;
    end
end

always @ (*) begin
    if (((icmp_ln316_reg_516 == 1'd0) & (icmp_ln313_reg_495 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_phi_mux_shift_1_phi_fu_165_p4 = shift_reg_504;
    end else begin
        ap_phi_mux_shift_1_phi_fu_165_p4 = shift_1_reg_162;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln313_reg_495 == 1'd1) | (icmp_ln316_reg_516 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln313_reg_495 == 1'd1) | (icmp_ln316_reg_516 == 1'd0)))) begin
        ap_return = bitcast_ln348_fu_452_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln306_fu_226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln313_reg_495 == 1'd1) | (icmp_ln316_reg_516 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign bitcast_ln348_fu_452_p1 = p_Result_44_fu_442_p4;


always @ (p_Result_43_fu_260_p3) begin
    if (p_Result_43_fu_260_p3[0] == 1'b1) begin
        c_0_fu_268_p3 = 32'd0;
    end else if (p_Result_43_fu_260_p3[1] == 1'b1) begin
        c_0_fu_268_p3 = 32'd1;
    end else if (p_Result_43_fu_260_p3[2] == 1'b1) begin
        c_0_fu_268_p3 = 32'd2;
    end else if (p_Result_43_fu_260_p3[3] == 1'b1) begin
        c_0_fu_268_p3 = 32'd3;
    end else if (p_Result_43_fu_260_p3[4] == 1'b1) begin
        c_0_fu_268_p3 = 32'd4;
    end else if (p_Result_43_fu_260_p3[5] == 1'b1) begin
        c_0_fu_268_p3 = 32'd5;
    end else if (p_Result_43_fu_260_p3[6] == 1'b1) begin
        c_0_fu_268_p3 = 32'd6;
    end else if (p_Result_43_fu_260_p3[7] == 1'b1) begin
        c_0_fu_268_p3 = 32'd7;
    end else if (p_Result_43_fu_260_p3[8] == 1'b1) begin
        c_0_fu_268_p3 = 32'd8;
    end else if (p_Result_43_fu_260_p3[9] == 1'b1) begin
        c_0_fu_268_p3 = 32'd9;
    end else if (p_Result_43_fu_260_p3[10] == 1'b1) begin
        c_0_fu_268_p3 = 32'd10;
    end else if (p_Result_43_fu_260_p3[11] == 1'b1) begin
        c_0_fu_268_p3 = 32'd11;
    end else if (p_Result_43_fu_260_p3[12] == 1'b1) begin
        c_0_fu_268_p3 = 32'd12;
    end else if (p_Result_43_fu_260_p3[13] == 1'b1) begin
        c_0_fu_268_p3 = 32'd13;
    end else if (p_Result_43_fu_260_p3[14] == 1'b1) begin
        c_0_fu_268_p3 = 32'd14;
    end else if (p_Result_43_fu_260_p3[15] == 1'b1) begin
        c_0_fu_268_p3 = 32'd15;
    end else if (p_Result_43_fu_260_p3[16] == 1'b1) begin
        c_0_fu_268_p3 = 32'd16;
    end else if (p_Result_43_fu_260_p3[17] == 1'b1) begin
        c_0_fu_268_p3 = 32'd17;
    end else if (p_Result_43_fu_260_p3[18] == 1'b1) begin
        c_0_fu_268_p3 = 32'd18;
    end else if (p_Result_43_fu_260_p3[19] == 1'b1) begin
        c_0_fu_268_p3 = 32'd19;
    end else if (p_Result_43_fu_260_p3[20] == 1'b1) begin
        c_0_fu_268_p3 = 32'd20;
    end else if (p_Result_43_fu_260_p3[21] == 1'b1) begin
        c_0_fu_268_p3 = 32'd21;
    end else if (p_Result_43_fu_260_p3[22] == 1'b1) begin
        c_0_fu_268_p3 = 32'd22;
    end else if (p_Result_43_fu_260_p3[23] == 1'b1) begin
        c_0_fu_268_p3 = 32'd23;
    end else if (p_Result_43_fu_260_p3[24] == 1'b1) begin
        c_0_fu_268_p3 = 32'd24;
    end else if (p_Result_43_fu_260_p3[25] == 1'b1) begin
        c_0_fu_268_p3 = 32'd25;
    end else if (p_Result_43_fu_260_p3[26] == 1'b1) begin
        c_0_fu_268_p3 = 32'd26;
    end else if (p_Result_43_fu_260_p3[27] == 1'b1) begin
        c_0_fu_268_p3 = 32'd27;
    end else if (p_Result_43_fu_260_p3[28] == 1'b1) begin
        c_0_fu_268_p3 = 32'd28;
    end else if (p_Result_43_fu_260_p3[29] == 1'b1) begin
        c_0_fu_268_p3 = 32'd29;
    end else if (p_Result_43_fu_260_p3[30] == 1'b1) begin
        c_0_fu_268_p3 = 32'd30;
    end else if (p_Result_43_fu_260_p3[31] == 1'b1) begin
        c_0_fu_268_p3 = 32'd31;
    end else begin
        c_0_fu_268_p3 = 32'd32;
    end
end

assign c_1_1_fu_276_p3 = ((trunc_ln510_fu_238_p1[0:0] === 1'b1) ? c_0_020_reg_84 : c_0_fu_268_p3);

assign c_1_2_fu_284_p3 = ((trunc_ln510_fu_238_p1[0:0] === 1'b1) ? c_0_fu_268_p3 : c_1_019_reg_96);

assign empty_fu_412_p1 = newexp_fu_387_p2[7:0];

assign i_2_fu_298_p2 = (i2_0_reg_141 + 2'd1);

assign i_fu_232_p2 = (i1_0_reg_108 + 2'd1);

assign icmp_ln1452_fu_401_p2 = ((in_V == 29'd0) ? 1'b1 : 1'b0);

assign icmp_ln306_fu_226_p2 = ((i1_0_reg_108 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln313_fu_292_p2 = ((i2_0_reg_141 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln316_fu_372_p2 = ((select_ln314_fu_308_p3 == 32'd16) ? 1'b1 : 1'b0);

assign isNeg_fu_322_p3 = select_ln314_fu_308_p3[32'd31];

assign lshr_ln1287_fu_348_p2 = p_0107_0_reg_119 >> ushcast_fu_344_p1;

assign newexp_fu_387_p2 = ($signed(sext_ln324_fu_383_p1) - $signed(ap_phi_mux_shift_1_phi_fu_165_p4));

assign or_ln330_fu_406_p2 = (tmp_10_fu_393_p3 | icmp_ln1452_fu_401_p2);

assign out_bits_0_V_fu_190_p5 = {{tmp_fu_182_p3}, {ap_const_lv32_0[14:0]}};

assign out_exp_V_fu_434_p3 = ((or_ln330_fu_406_p2[0:0] === 1'b1) ? 8'd0 : empty_fu_412_p1);

assign p_Result_1_fu_172_p4 = {{in_V[28:13]}};

assign p_Result_43_fu_260_p3 = ((trunc_ln510_fu_238_p1[0:0] === 1'b1) ? tmp_2_fu_251_p4 : tmp_1_fu_242_p4);

assign p_Result_44_fu_442_p4 = {{{{1'd0}, {out_exp_V_fu_434_p3}}}, {significand_V_fu_426_p3}};

assign p_Result_s_fu_214_p5 = {{tmp_s_fu_206_p3}, {ap_const_lv32_0[17:0]}};

assign phitmp1_fu_416_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_155_p4[27:5]}};

assign r_V_fu_364_p3 = ((isNeg_fu_322_p3[0:0] === 1'b1) ? lshr_ln1287_fu_348_p2 : shl_ln1253_fu_358_p2);

assign select_ln314_fu_308_p3 = ((trunc_ln314_fu_304_p1[0:0] === 1'b1) ? c_1_019_reg_96 : c_0_020_reg_84);

assign sext_ln324_fu_383_p1 = $signed(sub_ln324_fu_378_p2);

assign shift_fu_316_p2 = (select_ln314_fu_308_p3 + shift_0_reg_129);

assign shl_ln1253_fu_358_p2 = p_0107_0_reg_119 << ushcast6_fu_354_p1;

assign significand_V_fu_426_p3 = ((or_ln330_fu_406_p2[0:0] === 1'b1) ? 23'd0 : phitmp1_fu_416_p4);

assign sub_ln1311_fu_330_p2 = (32'd0 - select_ln314_fu_308_p3);

assign sub_ln324_fu_378_p2 = (9'd127 - prescale);

assign tmp_10_fu_393_p3 = newexp_fu_387_p2[32'd31];

integer ap_tvar_int_0;

always @ (out_bits_0_V_reg_467) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            tmp_1_fu_242_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_242_p4[ap_tvar_int_0] = out_bits_0_V_reg_467[31 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (p_Result_s_reg_472) begin
    for (ap_tvar_int_1 = 32 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 31 - 0) begin
            tmp_2_fu_251_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_2_fu_251_p4[ap_tvar_int_1] = p_Result_s_reg_472[31 - ap_tvar_int_1];
        end
    end
end

assign tmp_fu_182_p3 = {{p_Result_1_fu_172_p4}, {1'd1}};

assign tmp_s_fu_206_p3 = {{trunc_ln566_fu_202_p1}, {1'd1}};

assign trunc_ln314_fu_304_p1 = i2_0_reg_141[0:0];

assign trunc_ln510_fu_238_p1 = i1_0_reg_108[0:0];

assign trunc_ln566_fu_202_p1 = in_V[12:0];

assign ush_fu_336_p3 = ((isNeg_fu_322_p3[0:0] === 1'b1) ? sub_ln1311_fu_330_p2 : select_ln314_fu_308_p3);

assign ushcast6_fu_354_p1 = ush_fu_336_p3[28:0];

assign ushcast_fu_344_p1 = ush_fu_336_p3[28:0];

always @ (posedge ap_clk) begin
    ap_return_preg[31] <= 1'b0;
end

endmodule //scaled_fixed2ieee_1
